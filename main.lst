CCS PCH C Compiler, Version 5.078, 5967               23-Þub-22 09:28

               Filename:   C:\Users\Fatih\Desktop\DAHILI OSC\main.lst

               ROM used:   30008 bytes (92%)
                           Largest free fragment is 2756
               RAM used:   593 (39%) at main() level
                           648 (42%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   5086
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00BA
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   012C
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
*
0184:  DATA 4B,41
0186:  DATA 52,54
0188:  DATA 49,20
018A:  DATA 54,41
018C:  DATA 4B,49
018E:  DATA 4E,49
0190:  DATA 5A,00
*
1958:  MOVLB  2
195A:  CLRF   x56
195C:  CLRF   x57
195E:  MOVLW  01
1960:  MOVWF  x58
1962:  CLRF   FDA
1964:  CLRF   FD9
1966:  MOVLW  02
1968:  MOVWF  x5B
196A:  MOVLW  4E
196C:  MOVWF  x5A
196E:  MOVLW  02
1970:  MOVWF  FEA
1972:  MOVLW  52
1974:  MOVWF  FE9
1976:  MOVFF  25B,FE2
197A:  MOVFF  25A,FE1
197E:  MOVFF  258,259
1982:  BCF    FD8.0
1984:  MOVF   FE5,W
1986:  MULWF  FEE
1988:  MOVF   FF3,W
198A:  ADDWFC x56,F
198C:  MOVF   FF4,W
198E:  ADDWFC x57,F
1990:  DECFSZ x59,F
1992:  BRA    1982
1994:  MOVFF  256,FDE
1998:  MOVFF  257,256
199C:  CLRF   x57
199E:  BTFSC  FD8.0
19A0:  INCF   x57,F
19A2:  INCF   x5A,F
19A4:  BTFSC  FD8.2
19A6:  INCF   x5B,F
19A8:  INCF   x58,F
19AA:  MOVF   x58,W
19AC:  SUBLW  05
19AE:  BNZ   196E
19B0:  MOVLB  0
19B2:  RETURN 0
19B4:  MOVLW  B6
19B6:  MOVWF  00
19B8:  CLRF   03
19BA:  CLRF   02
19BC:  CLRF   01
19BE:  MOVLB  2
19C0:  BCF    x52.0
19C2:  BTFSS  x51.7
19C4:  BRA    19DE
19C6:  BSF    x52.0
19C8:  COMF   x4E,F
19CA:  COMF   x4F,F
19CC:  COMF   x50,F
19CE:  COMF   x51,F
19D0:  INCF   x4E,F
19D2:  BNZ   19DE
19D4:  INCF   x4F,F
19D6:  BNZ   19DE
19D8:  INCF   x50,F
19DA:  BTFSC  FD8.2
19DC:  INCF   x51,F
19DE:  MOVF   x4E,W
19E0:  IORWF  x4F,W
19E2:  IORWF  x50,W
19E4:  IORWF  x51,W
19E6:  BNZ   19EC
19E8:  CLRF   00
19EA:  BRA    1A0A
19EC:  BCF    FD8.0
19EE:  BTFSC  01.7
19F0:  BRA    1A04
19F2:  RLCF   x4E,F
19F4:  RLCF   x4F,F
19F6:  RLCF   x50,F
19F8:  RLCF   x51,F
19FA:  RLCF   03,F
19FC:  RLCF   02,F
19FE:  RLCF   01,F
1A00:  DECFSZ 00,F
1A02:  BRA    19EC
1A04:  BCF    01.7
1A06:  BTFSC  x52.0
1A08:  BSF    01.7
1A0A:  MOVLB  0
1A0C:  GOTO   35FC (RETURN)
1A10:  MOVLW  80
1A12:  BTFSS  FD8.1
1A14:  BRA    1A1A
1A16:  MOVLB  2
1A18:  XORWF  x7B,F
1A1A:  MOVLB  2
1A1C:  CLRF   x80
1A1E:  CLRF   x81
1A20:  MOVFF  277,27F
1A24:  MOVF   x7B,W
1A26:  XORWF  x7F,F
1A28:  MOVF   x76,W
1A2A:  BTFSC  FD8.2
1A2C:  BRA    1BEC
1A2E:  MOVWF  x7E
1A30:  MOVWF  00
1A32:  MOVF   x7A,W
1A34:  BTFSC  FD8.2
1A36:  BRA    1BFE
1A38:  SUBWF  x7E,F
1A3A:  BTFSC  FD8.2
1A3C:  BRA    1B44
1A3E:  BNC   1ABC
1A40:  MOVFF  27B,284
1A44:  BSF    x84.7
1A46:  MOVFF  27C,283
1A4A:  MOVFF  27D,282
1A4E:  CLRF   x81
1A50:  BCF    FD8.0
1A52:  RRCF   x84,F
1A54:  RRCF   x83,F
1A56:  RRCF   x82,F
1A58:  RRCF   x81,F
1A5A:  DECFSZ x7E,F
1A5C:  BRA    1A4E
1A5E:  BTFSS  x7F.7
1A60:  BRA    1A68
1A62:  BSF    x80.0
1A64:  BRA    1C26
1A66:  BCF    x80.0
1A68:  BCF    x7E.0
1A6A:  BSF    x80.4
1A6C:  MOVLW  02
1A6E:  MOVWF  FEA
1A70:  MOVLW  79
1A72:  MOVWF  FE9
1A74:  BRA    1C4C
1A76:  BCF    x80.4
1A78:  BTFSC  x7F.7
1A7A:  BRA    1A90
1A7C:  BTFSS  x7E.0
1A7E:  BRA    1AA6
1A80:  RRCF   x84,F
1A82:  RRCF   x83,F
1A84:  RRCF   x82,F
1A86:  RRCF   x81,F
1A88:  INCF   00,F
1A8A:  BTFSC  FD8.2
1A8C:  BRA    1C1C
1A8E:  BRA    1AA6
1A90:  BTFSC  x84.7
1A92:  BRA    1AAC
1A94:  BCF    FD8.0
1A96:  RLCF   x81,F
1A98:  RLCF   x82,F
1A9A:  RLCF   x83,F
1A9C:  RLCF   x84,F
1A9E:  DECF   00,F
1AA0:  BTFSC  FD8.2
1AA2:  BRA    1C1C
1AA4:  BRA    1A90
1AA6:  BSF    x80.6
1AA8:  BRA    1B84
1AAA:  BCF    x80.6
1AAC:  MOVFF  277,27F
1AB0:  BTFSS  x77.7
1AB2:  BRA    1AB8
1AB4:  BSF    x84.7
1AB6:  BRA    1C0E
1AB8:  BCF    x84.7
1ABA:  BRA    1C0E
1ABC:  MOVFF  27A,27E
1AC0:  MOVFF  27A,00
1AC4:  MOVF   x76,W
1AC6:  SUBWF  x7E,F
1AC8:  MOVFF  277,284
1ACC:  BSF    x84.7
1ACE:  MOVFF  278,283
1AD2:  MOVFF  279,282
1AD6:  CLRF   x81
1AD8:  BCF    FD8.0
1ADA:  RRCF   x84,F
1ADC:  RRCF   x83,F
1ADE:  RRCF   x82,F
1AE0:  RRCF   x81,F
1AE2:  DECFSZ x7E,F
1AE4:  BRA    1AD6
1AE6:  BTFSS  x7F.7
1AE8:  BRA    1AF0
1AEA:  BSF    x80.1
1AEC:  BRA    1C26
1AEE:  BCF    x80.1
1AF0:  BCF    x7E.0
1AF2:  BSF    x80.5
1AF4:  MOVLW  02
1AF6:  MOVWF  FEA
1AF8:  MOVLW  7D
1AFA:  MOVWF  FE9
1AFC:  BRA    1C4C
1AFE:  BCF    x80.5
1B00:  BTFSC  x7F.7
1B02:  BRA    1B18
1B04:  BTFSS  x7E.0
1B06:  BRA    1B2E
1B08:  RRCF   x84,F
1B0A:  RRCF   x83,F
1B0C:  RRCF   x82,F
1B0E:  RRCF   x81,F
1B10:  INCF   00,F
1B12:  BTFSC  FD8.2
1B14:  BRA    1C1C
1B16:  BRA    1B2E
1B18:  BTFSC  x84.7
1B1A:  BRA    1B34
1B1C:  BCF    FD8.0
1B1E:  RLCF   x81,F
1B20:  RLCF   x82,F
1B22:  RLCF   x83,F
1B24:  RLCF   x84,F
1B26:  DECF   00,F
1B28:  BTFSC  FD8.2
1B2A:  BRA    1C1C
1B2C:  BRA    1B18
1B2E:  BSF    x80.7
1B30:  BRA    1B84
1B32:  BCF    x80.7
1B34:  MOVFF  27B,27F
1B38:  BTFSS  x7B.7
1B3A:  BRA    1B40
1B3C:  BSF    x84.7
1B3E:  BRA    1C0E
1B40:  BCF    x84.7
1B42:  BRA    1C0E
1B44:  MOVFF  27B,284
1B48:  BSF    x84.7
1B4A:  MOVFF  27C,283
1B4E:  MOVFF  27D,282
1B52:  BTFSS  x7F.7
1B54:  BRA    1B5E
1B56:  BCF    x84.7
1B58:  BSF    x80.2
1B5A:  BRA    1C26
1B5C:  BCF    x80.2
1B5E:  CLRF   x81
1B60:  BCF    x7E.0
1B62:  MOVLW  02
1B64:  MOVWF  FEA
1B66:  MOVLW  79
1B68:  MOVWF  FE9
1B6A:  BRA    1C4C
1B6C:  BTFSC  x7F.7
1B6E:  BRA    1BA8
1B70:  MOVFF  277,27F
1B74:  BTFSS  x7E.0
1B76:  BRA    1B84
1B78:  RRCF   x84,F
1B7A:  RRCF   x83,F
1B7C:  RRCF   x82,F
1B7E:  RRCF   x81,F
1B80:  INCF   00,F
1B82:  BZ    1C1C
1B84:  BTFSS  x81.7
1B86:  BRA    1B9E
1B88:  INCF   x82,F
1B8A:  BNZ   1B9E
1B8C:  INCF   x83,F
1B8E:  BNZ   1B9E
1B90:  INCF   x84,F
1B92:  BNZ   1B9E
1B94:  RRCF   x84,F
1B96:  RRCF   x83,F
1B98:  RRCF   x82,F
1B9A:  INCF   00,F
1B9C:  BZ    1C1C
1B9E:  BTFSC  x80.6
1BA0:  BRA    1AAA
1BA2:  BTFSC  x80.7
1BA4:  BRA    1B32
1BA6:  BRA    1BE0
1BA8:  MOVLW  80
1BAA:  XORWF  x84,F
1BAC:  BTFSS  x84.7
1BAE:  BRA    1BB8
1BB0:  BRA    1C26
1BB2:  MOVFF  27B,27F
1BB6:  BRA    1BCC
1BB8:  MOVFF  277,27F
1BBC:  MOVF   x84,F
1BBE:  BNZ   1BCC
1BC0:  MOVF   x83,F
1BC2:  BNZ   1BCC
1BC4:  MOVF   x82,F
1BC6:  BNZ   1BCC
1BC8:  CLRF   00
1BCA:  BRA    1C0E
1BCC:  BTFSC  x84.7
1BCE:  BRA    1BE0
1BD0:  BCF    FD8.0
1BD2:  RLCF   x81,F
1BD4:  RLCF   x82,F
1BD6:  RLCF   x83,F
1BD8:  RLCF   x84,F
1BDA:  DECFSZ 00,F
1BDC:  BRA    1BCC
1BDE:  BRA    1C1C
1BE0:  BTFSS  x7F.7
1BE2:  BRA    1BE8
1BE4:  BSF    x84.7
1BE6:  BRA    1C0E
1BE8:  BCF    x84.7
1BEA:  BRA    1C0E
1BEC:  MOVFF  27A,00
1BF0:  MOVFF  27B,284
1BF4:  MOVFF  27C,283
1BF8:  MOVFF  27D,282
1BFC:  BRA    1C0E
1BFE:  MOVFF  276,00
1C02:  MOVFF  277,284
1C06:  MOVFF  278,283
1C0A:  MOVFF  279,282
1C0E:  MOVFF  284,01
1C12:  MOVFF  283,02
1C16:  MOVFF  282,03
1C1A:  BRA    1C84
1C1C:  CLRF   00
1C1E:  CLRF   01
1C20:  CLRF   02
1C22:  CLRF   03
1C24:  BRA    1C84
1C26:  CLRF   x81
1C28:  COMF   x82,F
1C2A:  COMF   x83,F
1C2C:  COMF   x84,F
1C2E:  COMF   x81,F
1C30:  INCF   x81,F
1C32:  BNZ   1C3E
1C34:  INCF   x82,F
1C36:  BNZ   1C3E
1C38:  INCF   x83,F
1C3A:  BNZ   1C3E
1C3C:  INCF   x84,F
1C3E:  BTFSC  x80.0
1C40:  BRA    1A66
1C42:  BTFSC  x80.1
1C44:  BRA    1AEE
1C46:  BTFSC  x80.2
1C48:  BRA    1B5C
1C4A:  BRA    1BB2
1C4C:  MOVF   FEF,W
1C4E:  ADDWF  x82,F
1C50:  BNC   1C5C
1C52:  INCF   x83,F
1C54:  BNZ   1C5C
1C56:  INCF   x84,F
1C58:  BTFSC  FD8.2
1C5A:  BSF    x7E.0
1C5C:  MOVF   FED,F
1C5E:  MOVF   FEF,W
1C60:  ADDWF  x83,F
1C62:  BNC   1C6A
1C64:  INCF   x84,F
1C66:  BTFSC  FD8.2
1C68:  BSF    x7E.0
1C6A:  MOVF   FED,F
1C6C:  MOVF   FEF,W
1C6E:  BTFSC  FEF.7
1C70:  BRA    1C74
1C72:  XORLW  80
1C74:  ADDWF  x84,F
1C76:  BTFSC  FD8.0
1C78:  BSF    x7E.0
1C7A:  BTFSC  x80.4
1C7C:  BRA    1A76
1C7E:  BTFSC  x80.5
1C80:  BRA    1AFE
1C82:  BRA    1B6C
1C84:  MOVLB  0
1C86:  RETURN 0
1C88:  MOVLB  2
1C8A:  MOVF   x5A,W
1C8C:  BTFSC  FD8.2
1C8E:  BRA    1DDA
1C90:  MOVWF  x66
1C92:  MOVF   x5E,W
1C94:  BTFSC  FD8.2
1C96:  BRA    1DDA
1C98:  SUBWF  x66,F
1C9A:  BNC   1CA6
1C9C:  MOVLW  7F
1C9E:  ADDWF  x66,F
1CA0:  BTFSC  FD8.0
1CA2:  BRA    1DDA
1CA4:  BRA    1CB2
1CA6:  MOVLW  81
1CA8:  SUBWF  x66,F
1CAA:  BTFSS  FD8.0
1CAC:  BRA    1DDA
1CAE:  BTFSC  FD8.2
1CB0:  BRA    1DDA
1CB2:  MOVFF  266,00
1CB6:  CLRF   01
1CB8:  CLRF   02
1CBA:  CLRF   03
1CBC:  CLRF   x65
1CBE:  MOVFF  25B,264
1CC2:  BSF    x64.7
1CC4:  MOVFF  25C,263
1CC8:  MOVFF  25D,262
1CCC:  MOVLW  19
1CCE:  MOVWF  x66
1CD0:  MOVF   x61,W
1CD2:  SUBWF  x62,F
1CD4:  BC    1CF0
1CD6:  MOVLW  01
1CD8:  SUBWF  x63,F
1CDA:  BC    1CF0
1CDC:  SUBWF  x64,F
1CDE:  BC    1CF0
1CE0:  SUBWF  x65,F
1CE2:  BC    1CF0
1CE4:  INCF   x65,F
1CE6:  INCF   x64,F
1CE8:  INCF   x63,F
1CEA:  MOVF   x61,W
1CEC:  ADDWF  x62,F
1CEE:  BRA    1D40
1CF0:  MOVF   x60,W
1CF2:  SUBWF  x63,F
1CF4:  BC    1D1A
1CF6:  MOVLW  01
1CF8:  SUBWF  x64,F
1CFA:  BC    1D1A
1CFC:  SUBWF  x65,F
1CFE:  BC    1D1A
1D00:  INCF   x65,F
1D02:  INCF   x64,F
1D04:  MOVF   x60,W
1D06:  ADDWF  x63,F
1D08:  MOVF   x61,W
1D0A:  ADDWF  x62,F
1D0C:  BNC   1D40
1D0E:  INCF   x63,F
1D10:  BNZ   1D40
1D12:  INCF   x64,F
1D14:  BNZ   1D40
1D16:  INCF   x65,F
1D18:  BRA    1D40
1D1A:  MOVF   x5F,W
1D1C:  IORLW  80
1D1E:  SUBWF  x64,F
1D20:  BC    1D3E
1D22:  MOVLW  01
1D24:  SUBWF  x65,F
1D26:  BC    1D3E
1D28:  INCF   x65,F
1D2A:  MOVF   x5F,W
1D2C:  IORLW  80
1D2E:  ADDWF  x64,F
1D30:  MOVF   x60,W
1D32:  ADDWF  x63,F
1D34:  BNC   1D08
1D36:  INCF   x64,F
1D38:  BNZ   1D08
1D3A:  INCF   x65,F
1D3C:  BRA    1D08
1D3E:  BSF    03.0
1D40:  DECFSZ x66,F
1D42:  BRA    1D46
1D44:  BRA    1D5C
1D46:  BCF    FD8.0
1D48:  RLCF   x62,F
1D4A:  RLCF   x63,F
1D4C:  RLCF   x64,F
1D4E:  RLCF   x65,F
1D50:  BCF    FD8.0
1D52:  RLCF   03,F
1D54:  RLCF   02,F
1D56:  RLCF   01,F
1D58:  RLCF   x67,F
1D5A:  BRA    1CD0
1D5C:  BTFSS  x67.0
1D5E:  BRA    1D6C
1D60:  BCF    FD8.0
1D62:  RRCF   01,F
1D64:  RRCF   02,F
1D66:  RRCF   03,F
1D68:  RRCF   x67,F
1D6A:  BRA    1D70
1D6C:  DECF   00,F
1D6E:  BZ    1DDA
1D70:  BTFSC  x67.7
1D72:  BRA    1DB0
1D74:  BCF    FD8.0
1D76:  RLCF   x62,F
1D78:  RLCF   x63,F
1D7A:  RLCF   x64,F
1D7C:  RLCF   x65,F
1D7E:  MOVF   x61,W
1D80:  SUBWF  x62,F
1D82:  BC    1D92
1D84:  MOVLW  01
1D86:  SUBWF  x63,F
1D88:  BC    1D92
1D8A:  SUBWF  x64,F
1D8C:  BC    1D92
1D8E:  SUBWF  x65,F
1D90:  BNC   1DC6
1D92:  MOVF   x60,W
1D94:  SUBWF  x63,F
1D96:  BC    1DA2
1D98:  MOVLW  01
1D9A:  SUBWF  x64,F
1D9C:  BC    1DA2
1D9E:  SUBWF  x65,F
1DA0:  BNC   1DC6
1DA2:  MOVF   x5F,W
1DA4:  IORLW  80
1DA6:  SUBWF  x64,F
1DA8:  BC    1DB0
1DAA:  MOVLW  01
1DAC:  SUBWF  x65,F
1DAE:  BNC   1DC6
1DB0:  INCF   03,F
1DB2:  BNZ   1DC6
1DB4:  INCF   02,F
1DB6:  BNZ   1DC6
1DB8:  INCF   01,F
1DBA:  BNZ   1DC6
1DBC:  INCF   00,F
1DBE:  BZ    1DDA
1DC0:  RRCF   01,F
1DC2:  RRCF   02,F
1DC4:  RRCF   03,F
1DC6:  MOVFF  25B,266
1DCA:  MOVF   x5F,W
1DCC:  XORWF  x66,F
1DCE:  BTFSS  x66.7
1DD0:  BRA    1DD6
1DD2:  BSF    01.7
1DD4:  BRA    1DE2
1DD6:  BCF    01.7
1DD8:  BRA    1DE2
1DDA:  CLRF   00
1DDC:  CLRF   01
1DDE:  CLRF   02
1DE0:  CLRF   03
1DE2:  MOVLB  0
1DE4:  RETURN 0
1DE6:  MOVLB  2
1DE8:  MOVF   x72,W
1DEA:  BTFSC  FD8.2
1DEC:  BRA    1ED0
1DEE:  MOVWF  00
1DF0:  MOVF   x76,W
1DF2:  BTFSC  FD8.2
1DF4:  BRA    1ED0
1DF6:  ADDWF  00,F
1DF8:  BNC   1E02
1DFA:  MOVLW  81
1DFC:  ADDWF  00,F
1DFE:  BC    1ED0
1E00:  BRA    1E0A
1E02:  MOVLW  7F
1E04:  SUBWF  00,F
1E06:  BNC   1ED0
1E08:  BZ    1ED0
1E0A:  MOVFF  273,27A
1E0E:  MOVF   x77,W
1E10:  XORWF  x7A,F
1E12:  BSF    x73.7
1E14:  BSF    x77.7
1E16:  MOVF   x75,W
1E18:  MULWF  x79
1E1A:  MOVFF  FF4,27C
1E1E:  MOVF   x74,W
1E20:  MULWF  x78
1E22:  MOVFF  FF4,03
1E26:  MOVFF  FF3,27B
1E2A:  MULWF  x79
1E2C:  MOVF   FF3,W
1E2E:  ADDWF  x7C,F
1E30:  MOVF   FF4,W
1E32:  ADDWFC x7B,F
1E34:  MOVLW  00
1E36:  ADDWFC 03,F
1E38:  MOVF   x75,W
1E3A:  MULWF  x78
1E3C:  MOVF   FF3,W
1E3E:  ADDWF  x7C,F
1E40:  MOVF   FF4,W
1E42:  ADDWFC x7B,F
1E44:  MOVLW  00
1E46:  CLRF   02
1E48:  ADDWFC 03,F
1E4A:  ADDWFC 02,F
1E4C:  MOVF   x73,W
1E4E:  MULWF  x79
1E50:  MOVF   FF3,W
1E52:  ADDWF  x7B,F
1E54:  MOVF   FF4,W
1E56:  ADDWFC 03,F
1E58:  MOVLW  00
1E5A:  ADDWFC 02,F
1E5C:  MOVF   x73,W
1E5E:  MULWF  x78
1E60:  MOVF   FF3,W
1E62:  ADDWF  03,F
1E64:  MOVF   FF4,W
1E66:  ADDWFC 02,F
1E68:  MOVLW  00
1E6A:  CLRF   01
1E6C:  ADDWFC 01,F
1E6E:  MOVF   x75,W
1E70:  MULWF  x77
1E72:  MOVF   FF3,W
1E74:  ADDWF  x7B,F
1E76:  MOVF   FF4,W
1E78:  ADDWFC 03,F
1E7A:  MOVLW  00
1E7C:  ADDWFC 02,F
1E7E:  ADDWFC 01,F
1E80:  MOVF   x74,W
1E82:  MULWF  x77
1E84:  MOVF   FF3,W
1E86:  ADDWF  03,F
1E88:  MOVF   FF4,W
1E8A:  ADDWFC 02,F
1E8C:  MOVLW  00
1E8E:  ADDWFC 01,F
1E90:  MOVF   x73,W
1E92:  MULWF  x77
1E94:  MOVF   FF3,W
1E96:  ADDWF  02,F
1E98:  MOVF   FF4,W
1E9A:  ADDWFC 01,F
1E9C:  INCF   00,F
1E9E:  BTFSC  01.7
1EA0:  BRA    1EAC
1EA2:  RLCF   x7B,F
1EA4:  RLCF   03,F
1EA6:  RLCF   02,F
1EA8:  RLCF   01,F
1EAA:  DECF   00,F
1EAC:  MOVLW  00
1EAE:  BTFSS  x7B.7
1EB0:  BRA    1EC6
1EB2:  INCF   03,F
1EB4:  ADDWFC 02,F
1EB6:  ADDWFC 01,F
1EB8:  MOVF   01,W
1EBA:  BNZ   1EC6
1EBC:  MOVF   02,W
1EBE:  BNZ   1EC6
1EC0:  MOVF   03,W
1EC2:  BNZ   1EC6
1EC4:  INCF   00,F
1EC6:  BTFSC  x7A.7
1EC8:  BSF    01.7
1ECA:  BTFSS  x7A.7
1ECC:  BCF    01.7
1ECE:  BRA    1ED8
1ED0:  CLRF   00
1ED2:  CLRF   01
1ED4:  CLRF   02
1ED6:  CLRF   03
1ED8:  MOVLB  0
1EDA:  RETURN 0
1EDC:  MOVFF  273,27A
1EE0:  MOVLB  2
1EE2:  MOVF   x77,W
1EE4:  XORWF  x7A,F
1EE6:  BTFSS  x7A.7
1EE8:  BRA    1EF4
1EEA:  BCF    FD8.2
1EEC:  BCF    FD8.0
1EEE:  BTFSC  x73.7
1EF0:  BSF    FD8.0
1EF2:  BRA    1F52
1EF4:  MOVFF  273,27A
1EF8:  MOVFF  276,27B
1EFC:  MOVF   x72,W
1EFE:  SUBWF  x7B,F
1F00:  BZ    1F0E
1F02:  BTFSS  x7A.7
1F04:  BRA    1F52
1F06:  MOVF   FD8,W
1F08:  XORLW  01
1F0A:  MOVWF  FD8
1F0C:  BRA    1F52
1F0E:  MOVFF  277,27B
1F12:  MOVF   x73,W
1F14:  SUBWF  x7B,F
1F16:  BZ    1F24
1F18:  BTFSS  x7A.7
1F1A:  BRA    1F52
1F1C:  MOVF   FD8,W
1F1E:  XORLW  01
1F20:  MOVWF  FD8
1F22:  BRA    1F52
1F24:  MOVFF  278,27B
1F28:  MOVF   x74,W
1F2A:  SUBWF  x7B,F
1F2C:  BZ    1F3A
1F2E:  BTFSS  x7A.7
1F30:  BRA    1F52
1F32:  MOVF   FD8,W
1F34:  XORLW  01
1F36:  MOVWF  FD8
1F38:  BRA    1F52
1F3A:  MOVFF  279,27B
1F3E:  MOVF   x75,W
1F40:  SUBWF  x7B,F
1F42:  BZ    1F50
1F44:  BTFSS  x7A.7
1F46:  BRA    1F52
1F48:  MOVF   FD8,W
1F4A:  XORLW  01
1F4C:  MOVWF  FD8
1F4E:  BRA    1F52
1F50:  BCF    FD8.0
1F52:  MOVLB  0
1F54:  RETURN 0
1F56:  MOVLW  8E
1F58:  MOVWF  00
1F5A:  MOVLB  2
1F5C:  MOVF   x72,W
1F5E:  SUBWF  00,F
1F60:  MOVFF  273,02
1F64:  MOVFF  274,01
1F68:  BSF    02.7
1F6A:  MOVF   00,F
1F6C:  BZ    1F80
1F6E:  BCF    FD8.0
1F70:  MOVF   02,F
1F72:  BNZ   1F78
1F74:  MOVF   01,F
1F76:  BZ    1F80
1F78:  RRCF   02,F
1F7A:  RRCF   01,F
1F7C:  DECFSZ 00,F
1F7E:  BRA    1F6E
1F80:  BTFSS  x73.7
1F82:  BRA    1F8E
1F84:  COMF   01,F
1F86:  COMF   02,F
1F88:  INCF   01,F
1F8A:  BTFSC  FD8.2
1F8C:  INCF   02,F
1F8E:  MOVLB  0
1F90:  RETURN 0
1F92:  MOVLW  8E
1F94:  MOVWF  00
1F96:  MOVFF  277,01
1F9A:  MOVFF  276,02
1F9E:  CLRF   03
1FA0:  MOVF   01,F
1FA2:  BNZ   1FB6
1FA4:  MOVFF  02,01
1FA8:  CLRF   02
1FAA:  MOVLW  08
1FAC:  SUBWF  00,F
1FAE:  MOVF   01,F
1FB0:  BNZ   1FB6
1FB2:  CLRF   00
1FB4:  BRA    1FC6
1FB6:  BCF    FD8.0
1FB8:  BTFSC  01.7
1FBA:  BRA    1FC4
1FBC:  RLCF   02,F
1FBE:  RLCF   01,F
1FC0:  DECF   00,F
1FC2:  BRA    1FB6
1FC4:  BCF    01.7
1FC6:  RETURN 0
*
24AC:  MOVLB  2
24AE:  MOVF   x50,W
24B0:  SUBLW  B6
24B2:  MOVWF  x50
24B4:  CLRF   03
24B6:  MOVFF  251,254
24BA:  BSF    x51.7
24BC:  BCF    FD8.0
24BE:  RRCF   x51,F
24C0:  RRCF   x52,F
24C2:  RRCF   x53,F
24C4:  RRCF   03,F
24C6:  RRCF   02,F
24C8:  RRCF   01,F
24CA:  RRCF   00,F
24CC:  DECFSZ x50,F
24CE:  BRA    24BC
24D0:  BTFSS  x54.7
24D2:  BRA    24EA
24D4:  COMF   00,F
24D6:  COMF   01,F
24D8:  COMF   02,F
24DA:  COMF   03,F
24DC:  INCF   00,F
24DE:  BTFSC  FD8.2
24E0:  INCF   01,F
24E2:  BTFSC  FD8.2
24E4:  INCF   02,F
24E6:  BTFSC  FD8.2
24E8:  INCF   03,F
24EA:  MOVLB  0
24EC:  RETURN 0
*
387C:  MOVLB  2
387E:  MOVF   x58,W
3880:  CLRF   01
3882:  SUBWF  x57,W
3884:  BC    388C
3886:  MOVFF  257,00
388A:  BRA    38A4
388C:  CLRF   00
388E:  MOVLW  08
3890:  MOVWF  x59
3892:  RLCF   x57,F
3894:  RLCF   00,F
3896:  MOVF   x58,W
3898:  SUBWF  00,W
389A:  BTFSC  FD8.0
389C:  MOVWF  00
389E:  RLCF   01,F
38A0:  DECFSZ x59,F
38A2:  BRA    3892
38A4:  MOVLB  0
38A6:  RETURN 0
*
39B8:  MOVLB  2
39BA:  MOVF   x51,W
39BC:  MULWF  x53
39BE:  MOVFF  FF3,01
39C2:  MOVFF  FF4,00
39C6:  MULWF  x54
39C8:  MOVF   FF3,W
39CA:  ADDWF  00,F
39CC:  MOVF   x52,W
39CE:  MULWF  x53
39D0:  MOVF   FF3,W
39D2:  ADDWFC 00,W
39D4:  MOVWF  02
39D6:  MOVLB  0
39D8:  RETURN 0
*
44FC:  MOVFF  FEA,256
4500:  MOVFF  FE9,255
4504:  MOVLB  2
4506:  BTFSS  x4F.7
4508:  BRA    451A
450A:  BSF    x55.7
450C:  BTFSS  x55.4
450E:  INCF   x55,F
4510:  COMF   x4E,F
4512:  COMF   x4F,F
4514:  INCF   x4E,F
4516:  BTFSC  FD8.2
4518:  INCF   x4F,F
451A:  SWAPF  x4F,W
451C:  IORLW  F0
451E:  MOVWF  x51
4520:  ADDWF  x51,F
4522:  ADDLW  E2
4524:  MOVWF  x52
4526:  ADDLW  32
4528:  MOVWF  x54
452A:  MOVF   x4F,W
452C:  ANDLW  0F
452E:  ADDWF  x52,F
4530:  ADDWF  x52,F
4532:  ADDWF  x54,F
4534:  ADDLW  E9
4536:  MOVWF  x53
4538:  ADDWF  x53,F
453A:  ADDWF  x53,F
453C:  SWAPF  x4E,W
453E:  ANDLW  0F
4540:  ADDWF  x53,F
4542:  ADDWF  x54,F
4544:  RLCF   x53,F
4546:  RLCF   x54,F
4548:  COMF   x54,F
454A:  RLCF   x54,F
454C:  MOVF   x4E,W
454E:  ANDLW  0F
4550:  ADDWF  x54,F
4552:  RLCF   x51,F
4554:  MOVLW  07
4556:  MOVWF  x50
4558:  MOVLW  0A
455A:  DECF   x53,F
455C:  ADDWF  x54,F
455E:  BNC   455A
4560:  DECF   x52,F
4562:  ADDWF  x53,F
4564:  BNC   4560
4566:  DECF   x51,F
4568:  ADDWF  x52,F
456A:  BNC   4566
456C:  DECF   x50,F
456E:  ADDWF  x51,F
4570:  BNC   456C
4572:  MOVLW  02
4574:  MOVWF  FEA
4576:  MOVLW  50
4578:  MOVWF  FE9
457A:  MOVLW  07
457C:  ANDWF  x55,W
457E:  BCF    x55.6
4580:  MOVF   FED,F
4582:  ANDWF  x55,W
4584:  BNZ   4594
4586:  BTFSC  x55.4
4588:  MOVF   FEE,F
458A:  BTFSC  x55.4
458C:  BRA    4594
458E:  MOVLW  20
4590:  MOVWF  00
4592:  BRA    45D6
4594:  ADDWF  FE9,F
4596:  MOVLW  00
4598:  ADDWFC FEA,F
459A:  MOVF   FE9,W
459C:  SUBLW  54
459E:  BNZ   45A8
45A0:  MOVF   FEA,W
45A2:  SUBLW  02
45A4:  BNZ   45A8
45A6:  BSF    x55.6
45A8:  MOVF   FEF,W
45AA:  MOVWF  00
45AC:  BNZ   45BE
45AE:  BTFSC  x55.6
45B0:  BRA    45BE
45B2:  BTFSC  x55.4
45B4:  BRA    45F0
45B6:  BTFSC  x55.3
45B8:  BRA    45BE
45BA:  MOVLW  20
45BC:  BRA    45D4
45BE:  BTFSS  x55.7
45C0:  BRA    45CE
45C2:  MOVLW  2D
45C4:  MOVWF  00
45C6:  MOVF   FED,W
45C8:  BCF    x55.6
45CA:  BCF    x55.7
45CC:  BRA    45D6
45CE:  BSF    x55.3
45D0:  BCF    x55.4
45D2:  MOVLW  30
45D4:  ADDWF  00,F
45D6:  MOVFF  FEA,24F
45DA:  MOVFF  FE9,24E
45DE:  MOVFF  00,25A
45E2:  MOVLB  0
45E4:  RCALL  4488
45E6:  MOVFF  24F,FEA
45EA:  MOVFF  24E,FE9
45EE:  MOVLB  2
45F0:  MOVF   FEE,W
45F2:  BTFSS  x55.6
45F4:  BRA    459A
45F6:  MOVLB  0
45F8:  RETURN 0
45FA:  MOVLW  20
45FC:  MOVLB  2
45FE:  BTFSS  x4F.4
4600:  MOVLW  30
4602:  MOVWF  x50
4604:  MOVFF  24E,00
4608:  BTFSS  00.7
460A:  BRA    461C
460C:  COMF   00,F
460E:  INCF   00,F
4610:  MOVFF  00,24E
4614:  MOVLW  2D
4616:  MOVWF  x50
4618:  BSF    x4F.7
461A:  BSF    x4F.0
461C:  MOVF   01,W
461E:  MOVFF  24E,257
4622:  MOVLW  64
4624:  MOVWF  x58
4626:  MOVLB  0
4628:  CALL   387C
462C:  MOVFF  00,24E
4630:  MOVLW  30
4632:  ADDWF  01,W
4634:  MOVLB  2
4636:  MOVWF  x51
4638:  MOVFF  24E,257
463C:  MOVLW  0A
463E:  MOVWF  x58
4640:  MOVLB  0
4642:  CALL   387C
4646:  MOVLW  30
4648:  ADDWF  00,W
464A:  MOVLB  2
464C:  MOVWF  x53
464E:  MOVLW  30
4650:  ADDWF  01,W
4652:  MOVWF  x52
4654:  MOVFF  250,00
4658:  MOVLW  30
465A:  SUBWF  x51,W
465C:  BZ    4666
465E:  BSF    x4F.1
4660:  BTFSC  x4F.7
4662:  BSF    x4F.2
4664:  BRA    468A
4666:  MOVFF  250,251
466A:  MOVLW  20
466C:  MOVWF  x50
466E:  MOVLW  30
4670:  SUBWF  x52,W
4672:  BZ    467C
4674:  BSF    x4F.0
4676:  BTFSC  x4F.7
4678:  BSF    x4F.1
467A:  BRA    468A
467C:  BTFSS  FD8.2
467E:  BSF    x4F.0
4680:  BNZ   468A
4682:  MOVFF  251,252
4686:  MOVLW  20
4688:  MOVWF  x51
468A:  BTFSC  x4F.2
468C:  BRA    4698
468E:  BTFSC  x4F.1
4690:  BRA    46A0
4692:  BTFSC  x4F.0
4694:  BRA    46A8
4696:  BRA    46B0
4698:  MOVFF  250,25A
469C:  MOVLB  0
469E:  RCALL  4488
46A0:  MOVFF  251,25A
46A4:  MOVLB  0
46A6:  RCALL  4488
46A8:  MOVFF  252,25A
46AC:  MOVLB  0
46AE:  RCALL  4488
46B0:  MOVFF  253,25A
46B4:  MOVLB  0
46B6:  RCALL  4488
46B8:  RETURN 0
46BA:  BTFSC  FD8.1
46BC:  BRA    46C6
46BE:  MOVLW  02
46C0:  MOVWF  FEA
46C2:  MOVLW  62
46C4:  MOVWF  FE9
46C6:  CLRF   00
46C8:  CLRF   01
46CA:  CLRF   02
46CC:  CLRF   03
46CE:  MOVLB  2
46D0:  CLRF   x62
46D2:  CLRF   x63
46D4:  CLRF   x64
46D6:  CLRF   x65
46D8:  MOVF   x61,W
46DA:  IORWF  x60,W
46DC:  IORWF  x5F,W
46DE:  IORWF  x5E,W
46E0:  BZ    473A
46E2:  MOVLW  20
46E4:  MOVWF  x66
46E6:  BCF    FD8.0
46E8:  RLCF   x5A,F
46EA:  RLCF   x5B,F
46EC:  RLCF   x5C,F
46EE:  RLCF   x5D,F
46F0:  RLCF   x62,F
46F2:  RLCF   x63,F
46F4:  RLCF   x64,F
46F6:  RLCF   x65,F
46F8:  MOVF   x61,W
46FA:  SUBWF  x65,W
46FC:  BNZ   470E
46FE:  MOVF   x60,W
4700:  SUBWF  x64,W
4702:  BNZ   470E
4704:  MOVF   x5F,W
4706:  SUBWF  x63,W
4708:  BNZ   470E
470A:  MOVF   x5E,W
470C:  SUBWF  x62,W
470E:  BNC   472E
4710:  MOVF   x5E,W
4712:  SUBWF  x62,F
4714:  MOVF   x5F,W
4716:  BTFSS  FD8.0
4718:  INCFSZ x5F,W
471A:  SUBWF  x63,F
471C:  MOVF   x60,W
471E:  BTFSS  FD8.0
4720:  INCFSZ x60,W
4722:  SUBWF  x64,F
4724:  MOVF   x61,W
4726:  BTFSS  FD8.0
4728:  INCFSZ x61,W
472A:  SUBWF  x65,F
472C:  BSF    FD8.0
472E:  RLCF   00,F
4730:  RLCF   01,F
4732:  RLCF   02,F
4734:  RLCF   03,F
4736:  DECFSZ x66,F
4738:  BRA    46E6
473A:  MOVFF  262,FEF
473E:  MOVFF  263,FEC
4742:  MOVFF  264,FEC
4746:  MOVFF  265,FEC
474A:  MOVLB  0
474C:  RETURN 0
474E:  MOVF   FE9,W
4750:  MOVLB  2
4752:  MOVWF  x52
4754:  BTFSS  x51.7
4756:  BRA    4772
4758:  DECF   x52,F
475A:  BSF    x52.5
475C:  COMF   x4E,F
475E:  COMF   x4F,F
4760:  COMF   x50,F
4762:  COMF   x51,F
4764:  INCF   x4E,F
4766:  BTFSC  FD8.2
4768:  INCF   x4F,F
476A:  BTFSC  FD8.2
476C:  INCF   x50,F
476E:  BTFSC  FD8.2
4770:  INCF   x51,F
4772:  MOVLW  3B
4774:  MOVWF  x59
4776:  MOVLW  9A
4778:  MOVWF  x58
477A:  MOVLW  CA
477C:  MOVWF  x57
477E:  CLRF   x56
4780:  MOVLW  0A
4782:  MOVWF  x54
4784:  BSF    FD8.1
4786:  MOVLW  02
4788:  MOVWF  FEA
478A:  MOVLW  4E
478C:  MOVWF  FE9
478E:  MOVFF  251,25D
4792:  MOVFF  250,25C
4796:  MOVFF  24F,25B
479A:  MOVFF  24E,25A
479E:  MOVFF  259,261
47A2:  MOVFF  258,260
47A6:  MOVFF  257,25F
47AA:  MOVFF  256,25E
47AE:  MOVLB  0
47B0:  RCALL  46BA
47B2:  MOVF   01,W
47B4:  MOVF   00,F
47B6:  BNZ   47DE
47B8:  MOVLB  2
47BA:  MOVF   x54,W
47BC:  XORLW  01
47BE:  BTFSS  FD8.2
47C0:  BRA    47C6
47C2:  MOVLB  0
47C4:  BRA    47DE
47C6:  MOVF   x52,W
47C8:  BZ    47E4
47CA:  ANDLW  0F
47CC:  SUBWF  x54,W
47CE:  BZ    47D2
47D0:  BC    4828
47D2:  BTFSC  x52.7
47D4:  BRA    4828
47D6:  BTFSC  x52.6
47D8:  BRA    47E4
47DA:  MOVLW  20
47DC:  BRA    481C
47DE:  MOVLW  20
47E0:  MOVLB  2
47E2:  ANDWF  x52,F
47E4:  BTFSS  x52.5
47E6:  BRA    47FE
47E8:  BCF    x52.5
47EA:  MOVFF  00,252
47EE:  MOVLW  2D
47F0:  MOVWF  x5A
47F2:  MOVLB  0
47F4:  RCALL  4488
47F6:  MOVLB  2
47F8:  MOVFF  252,00
47FC:  CLRF   x52
47FE:  MOVLW  30
4800:  BTFSS  x52.5
4802:  BRA    481C
4804:  BCF    x52.5
4806:  MOVFF  00,252
480A:  MOVLW  2D
480C:  MOVWF  x5A
480E:  MOVLB  0
4810:  RCALL  4488
4812:  MOVLB  2
4814:  MOVFF  252,00
4818:  CLRF   x52
481A:  MOVLW  30
481C:  ADDWF  00,F
481E:  MOVFF  00,25A
4822:  MOVLB  0
4824:  RCALL  4488
4826:  MOVLB  2
4828:  BCF    FD8.1
482A:  MOVFF  259,25D
482E:  MOVFF  258,25C
4832:  MOVFF  257,25B
4836:  MOVFF  256,25A
483A:  CLRF   x61
483C:  CLRF   x60
483E:  CLRF   x5F
4840:  MOVLW  0A
4842:  MOVWF  x5E
4844:  MOVLB  0
4846:  RCALL  46BA
4848:  MOVFF  03,259
484C:  MOVFF  02,258
4850:  MOVFF  01,257
4854:  MOVFF  00,256
4858:  MOVLB  2
485A:  DECFSZ x54,F
485C:  BRA    4784
485E:  MOVLB  0
4860:  RETURN 0
*
4B1E:  TBLRD*+
4B20:  MOVF   FF5,F
4B22:  BZ    4B3C
4B24:  MOVFF  FF6,24E
4B28:  MOVFF  FF7,24F
4B2C:  MOVFF  FF5,25A
4B30:  RCALL  4488
4B32:  MOVFF  24E,FF6
4B36:  MOVFF  24F,FF7
4B3A:  BRA    4B1E
4B3C:  GOTO   4B7C (RETURN)
*
4C50:  MOVLW  20
4C52:  MOVLB  2
4C54:  BTFSS  x4F.4
4C56:  MOVLW  30
4C58:  MOVWF  x50
4C5A:  MOVFF  24E,00
4C5E:  BTFSS  00.7
4C60:  BRA    4C72
4C62:  COMF   00,F
4C64:  INCF   00,F
4C66:  MOVFF  00,24E
4C6A:  MOVLW  2D
4C6C:  MOVWF  x50
4C6E:  BSF    x4F.7
4C70:  BSF    x4F.0
4C72:  MOVF   01,W
4C74:  MOVFF  24E,257
4C78:  MOVLW  64
4C7A:  MOVWF  x58
4C7C:  MOVLB  0
4C7E:  CALL   387C
4C82:  MOVFF  00,24E
4C86:  MOVLW  30
4C88:  ADDWF  01,W
4C8A:  MOVLB  2
4C8C:  MOVWF  x51
4C8E:  MOVFF  24E,257
4C92:  MOVLW  0A
4C94:  MOVWF  x58
4C96:  MOVLB  0
4C98:  CALL   387C
4C9C:  MOVLW  30
4C9E:  ADDWF  00,W
4CA0:  MOVLB  2
4CA2:  MOVWF  x53
4CA4:  MOVLW  30
4CA6:  ADDWF  01,W
4CA8:  MOVWF  x52
4CAA:  MOVFF  250,00
4CAE:  MOVLW  30
4CB0:  SUBWF  x51,W
4CB2:  BZ    4CBC
4CB4:  BSF    x4F.1
4CB6:  BTFSC  x4F.7
4CB8:  BSF    x4F.2
4CBA:  BRA    4CE0
4CBC:  BTFSC  x4F.2
4CBE:  BRA    4CE0
4CC0:  MOVFF  250,251
4CC4:  BTFSC  x4F.1
4CC6:  BRA    4CD0
4CC8:  MOVLW  30
4CCA:  SUBWF  x52,W
4CCC:  BZ    4CD6
4CCE:  BSF    x4F.0
4CD0:  BTFSC  x4F.7
4CD2:  BSF    x4F.1
4CD4:  BRA    4CE0
4CD6:  BTFSS  FD8.2
4CD8:  BSF    x4F.0
4CDA:  BTFSC  FD8.2
4CDC:  MOVFF  251,252
4CE0:  BTFSC  x4F.2
4CE2:  BRA    4CEE
4CE4:  BTFSC  x4F.1
4CE6:  BRA    4CF8
4CE8:  BTFSC  x4F.0
4CEA:  BRA    4D02
4CEC:  BRA    4D0C
4CEE:  MOVFF  250,25A
4CF2:  MOVLB  0
4CF4:  CALL   4488
4CF8:  MOVFF  251,25A
4CFC:  MOVLB  0
4CFE:  CALL   4488
4D02:  MOVFF  252,25A
4D06:  MOVLB  0
4D08:  CALL   4488
4D0C:  MOVFF  253,25A
4D10:  MOVLB  0
4D12:  CALL   4488
4D16:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(internal=4000000) 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1FC8:  MOVLB  2
1FCA:  BCF    x71.0
....................    y = x; 
1FCC:  MOVFF  265,26A
1FD0:  MOVFF  264,269
1FD4:  MOVFF  263,268
1FD8:  MOVFF  262,267
....................  
....................    if (x < 0) 
1FDC:  MOVFF  265,275
1FE0:  MOVFF  264,274
1FE4:  MOVFF  263,273
1FE8:  MOVFF  262,272
1FEC:  CLRF   x79
1FEE:  CLRF   x78
1FF0:  CLRF   x77
1FF2:  CLRF   x76
1FF4:  MOVLB  0
1FF6:  RCALL  1EDC
1FF8:  BNC   2006
....................    { 
....................       s = 1; 
1FFA:  MOVLB  2
1FFC:  BSF    x71.0
....................       y = -y; 
1FFE:  MOVF   x68,W
2000:  XORLW  80
2002:  MOVWF  x68
2004:  MOVLB  0
....................    } 
....................  
....................    if (y <= 32768.0) 
2006:  MOVFF  26A,275
200A:  MOVFF  269,274
200E:  MOVFF  268,273
2012:  MOVFF  267,272
2016:  MOVLB  2
2018:  CLRF   x79
201A:  CLRF   x78
201C:  CLRF   x77
201E:  MOVLW  8E
2020:  MOVWF  x76
2022:  MOVLB  0
2024:  RCALL  1EDC
2026:  BC    202A
2028:  BNZ   2058
....................       res = (float32)(unsigned int16)y; 
202A:  MOVFF  26A,275
202E:  MOVFF  269,274
2032:  MOVFF  268,273
2036:  MOVFF  267,272
203A:  RCALL  1F56
203C:  MOVFF  02,277
2040:  MOVFF  01,276
2044:  RCALL  1F92
2046:  MOVFF  03,26E
204A:  MOVFF  02,26D
204E:  MOVFF  01,26C
2052:  MOVFF  00,26B
2056:  BRA    21E6
....................  
....................  else if (y < 10000000.0) 
2058:  MOVFF  26A,275
205C:  MOVFF  269,274
2060:  MOVFF  268,273
2064:  MOVFF  267,272
2068:  MOVLW  80
206A:  MOVLB  2
206C:  MOVWF  x79
206E:  MOVLW  96
2070:  MOVWF  x78
2072:  MOVLW  18
2074:  MOVWF  x77
2076:  MOVLW  96
2078:  MOVWF  x76
207A:  MOVLB  0
207C:  RCALL  1EDC
207E:  BTFSS  FD8.0
2080:  BRA    21D6
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
2082:  MOVFF  26A,275
2086:  MOVFF  269,274
208A:  MOVFF  268,273
208E:  MOVFF  267,272
2092:  MOVLB  2
2094:  CLRF   x79
2096:  CLRF   x78
2098:  CLRF   x77
209A:  MOVLW  70
209C:  MOVWF  x76
209E:  MOVLB  0
20A0:  RCALL  1DE6
20A2:  MOVFF  03,275
20A6:  MOVFF  02,274
20AA:  MOVFF  01,273
20AE:  MOVFF  00,272
20B2:  RCALL  1F56
20B4:  MOVFF  02,270
20B8:  MOVFF  01,26F
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
20BC:  MOVFF  26A,275
20C0:  MOVFF  269,274
20C4:  MOVFF  268,273
20C8:  MOVFF  267,272
20CC:  MOVLB  2
20CE:  CLRF   x79
20D0:  CLRF   x78
20D2:  CLRF   x77
20D4:  MOVLW  70
20D6:  MOVWF  x76
20D8:  MOVLB  0
20DA:  RCALL  1DE6
20DC:  MOVFF  03,275
20E0:  MOVFF  02,274
20E4:  MOVFF  01,273
20E8:  MOVFF  00,272
20EC:  MOVFF  270,277
20F0:  MOVFF  26F,276
20F4:  RCALL  1F92
20F6:  BSF    FD8.1
20F8:  MOVFF  275,279
20FC:  MOVFF  274,278
2100:  MOVFF  273,277
2104:  MOVFF  272,276
2108:  MOVFF  03,27D
210C:  MOVFF  02,27C
2110:  MOVFF  01,27B
2114:  MOVFF  00,27A
2118:  RCALL  1A10
211A:  MOVLB  2
211C:  CLRF   x75
211E:  CLRF   x74
2120:  CLRF   x73
2122:  MOVLW  8E
2124:  MOVWF  x72
2126:  MOVFF  03,279
212A:  MOVFF  02,278
212E:  MOVFF  01,277
2132:  MOVFF  00,276
2136:  MOVLB  0
2138:  RCALL  1DE6
213A:  MOVFF  03,26A
213E:  MOVFF  02,269
2142:  MOVFF  01,268
2146:  MOVFF  00,267
....................       res = 32768.0*(float32)l; 
214A:  MOVFF  270,277
214E:  MOVFF  26F,276
2152:  RCALL  1F92
2154:  MOVLB  2
2156:  CLRF   x75
2158:  CLRF   x74
215A:  CLRF   x73
215C:  MOVLW  8E
215E:  MOVWF  x72
2160:  MOVFF  03,279
2164:  MOVFF  02,278
2168:  MOVFF  01,277
216C:  MOVFF  00,276
2170:  MOVLB  0
2172:  RCALL  1DE6
2174:  MOVFF  03,26E
2178:  MOVFF  02,26D
217C:  MOVFF  01,26C
2180:  MOVFF  00,26B
....................       res += (float32)(unsigned int16)y; 
2184:  MOVFF  26A,275
2188:  MOVFF  269,274
218C:  MOVFF  268,273
2190:  MOVFF  267,272
2194:  RCALL  1F56
2196:  MOVFF  02,277
219A:  MOVFF  01,276
219E:  RCALL  1F92
21A0:  BCF    FD8.1
21A2:  MOVFF  26E,279
21A6:  MOVFF  26D,278
21AA:  MOVFF  26C,277
21AE:  MOVFF  26B,276
21B2:  MOVFF  03,27D
21B6:  MOVFF  02,27C
21BA:  MOVFF  01,27B
21BE:  MOVFF  00,27A
21C2:  RCALL  1A10
21C4:  MOVFF  03,26E
21C8:  MOVFF  02,26D
21CC:  MOVFF  01,26C
21D0:  MOVFF  00,26B
....................    } 
21D4:  BRA    21E6
....................  
....................  else 
....................   res = y; 
21D6:  MOVFF  26A,26E
21DA:  MOVFF  269,26D
21DE:  MOVFF  268,26C
21E2:  MOVFF  267,26B
....................  
....................  y = y - (float32)(unsigned int16)y; 
21E6:  MOVFF  26A,275
21EA:  MOVFF  269,274
21EE:  MOVFF  268,273
21F2:  MOVFF  267,272
21F6:  RCALL  1F56
21F8:  MOVFF  02,277
21FC:  MOVFF  01,276
2200:  RCALL  1F92
2202:  BSF    FD8.1
2204:  MOVFF  26A,279
2208:  MOVFF  269,278
220C:  MOVFF  268,277
2210:  MOVFF  267,276
2214:  MOVFF  03,27D
2218:  MOVFF  02,27C
221C:  MOVFF  01,27B
2220:  MOVFF  00,27A
2224:  CALL   1A10
2228:  MOVFF  03,26A
222C:  MOVFF  02,269
2230:  MOVFF  01,268
2234:  MOVFF  00,267
....................  
....................  if (s) 
2238:  MOVLB  2
223A:  BTFSS  x71.0
223C:  BRA    2244
....................   res = -res; 
223E:  MOVF   x6C,W
2240:  XORLW  80
2242:  MOVWF  x6C
....................  
....................  if (y != 0) 
2244:  MOVFF  26A,275
2248:  MOVFF  269,274
224C:  MOVFF  268,273
2250:  MOVFF  267,272
2254:  CLRF   x79
2256:  CLRF   x78
2258:  CLRF   x77
225A:  CLRF   x76
225C:  MOVLB  0
225E:  RCALL  1EDC
2260:  BZ    22DA
....................  { 
....................   if (s == 1 && n == 0) 
2262:  MOVLB  2
2264:  BTFSS  x71.0
2266:  BRA    22A0
2268:  MOVF   x66,F
226A:  BNZ   22A0
....................    res -= 1.0; 
226C:  BSF    FD8.1
226E:  MOVFF  26E,279
2272:  MOVFF  26D,278
2276:  MOVFF  26C,277
227A:  MOVFF  26B,276
227E:  CLRF   x7D
2280:  CLRF   x7C
2282:  CLRF   x7B
2284:  MOVLW  7F
2286:  MOVWF  x7A
2288:  MOVLB  0
228A:  CALL   1A10
228E:  MOVFF  03,26E
2292:  MOVFF  02,26D
2296:  MOVFF  01,26C
229A:  MOVFF  00,26B
229E:  MOVLB  2
....................  
....................   if (s == 0 && n == 1) 
22A0:  BTFSC  x71.0
22A2:  BRA    22DC
22A4:  DECFSZ x66,W
22A6:  BRA    22DC
....................    res += 1.0; 
22A8:  BCF    FD8.1
22AA:  MOVFF  26E,279
22AE:  MOVFF  26D,278
22B2:  MOVFF  26C,277
22B6:  MOVFF  26B,276
22BA:  CLRF   x7D
22BC:  CLRF   x7C
22BE:  CLRF   x7B
22C0:  MOVLW  7F
22C2:  MOVWF  x7A
22C4:  MOVLB  0
22C6:  CALL   1A10
22CA:  MOVFF  03,26E
22CE:  MOVFF  02,26D
22D2:  MOVFF  01,26C
22D6:  MOVFF  00,26B
22DA:  MOVLB  2
....................  } 
....................  if (x == 0) 
22DC:  MOVFF  265,275
22E0:  MOVFF  264,274
22E4:  MOVFF  263,273
22E8:  MOVFF  262,272
22EC:  CLRF   x79
22EE:  CLRF   x78
22F0:  CLRF   x77
22F2:  CLRF   x76
22F4:  MOVLB  0
22F6:  RCALL  1EDC
22F8:  BNZ   2306
....................     res = 0; 
22FA:  MOVLB  2
22FC:  CLRF   x6E
22FE:  CLRF   x6D
2300:  CLRF   x6C
2302:  CLRF   x6B
2304:  MOVLB  0
....................  
....................  return (res); 
2306:  MOVFF  26B,00
230A:  MOVFF  26C,01
230E:  MOVFF  26D,02
2312:  MOVFF  26E,03
2316:  RETURN 0
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
*
2336:  MOVFF  261,265
233A:  MOVFF  260,264
233E:  MOVFF  25F,263
2342:  MOVFF  25E,262
2346:  MOVLB  2
2348:  CLRF   x66
234A:  MOVLB  0
234C:  RCALL  1FC8
234E:  GOTO   2450 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
2318:  MOVFF  261,265
231C:  MOVFF  260,264
2320:  MOVFF  25F,263
2324:  MOVFF  25E,262
2328:  MOVLW  01
232A:  MOVLB  2
232C:  MOVWF  x66
232E:  MOVLB  0
2330:  RCALL  1FC8
2332:  GOTO   240A (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
2352:  MOVFF  255,275
2356:  MOVFF  254,274
235A:  MOVFF  253,273
235E:  MOVFF  252,272
2362:  MOVLB  2
2364:  CLRF   x79
2366:  CLRF   x78
2368:  CLRF   x77
236A:  CLRF   x76
236C:  MOVLB  0
236E:  RCALL  1EDC
2370:  BTFSC  FD8.2
2372:  BRA    24AA
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
2374:  MOVFF  251,25D
2378:  MOVFF  250,25C
237C:  MOVFF  24F,25B
2380:  MOVFF  24E,25A
2384:  MOVFF  255,261
2388:  MOVFF  254,260
238C:  MOVFF  253,25F
2390:  MOVFF  252,25E
2394:  RCALL  1C88
2396:  MOVFF  03,25D
239A:  MOVFF  02,25C
239E:  MOVFF  01,25B
23A2:  MOVFF  00,25A
23A6:  MOVFF  03,275
23AA:  MOVFF  02,274
23AE:  MOVFF  01,273
23B2:  MOVFF  00,272
23B6:  MOVLB  2
23B8:  CLRF   x79
23BA:  CLRF   x78
23BC:  CLRF   x77
23BE:  CLRF   x76
23C0:  MOVLB  0
23C2:  RCALL  1EDC
23C4:  BNC   240C
23C6:  MOVFF  251,25D
23CA:  MOVFF  250,25C
23CE:  MOVFF  24F,25B
23D2:  MOVFF  24E,25A
23D6:  MOVFF  255,261
23DA:  MOVFF  254,260
23DE:  MOVFF  253,25F
23E2:  MOVFF  252,25E
23E6:  RCALL  1C88
23E8:  MOVFF  03,25D
23EC:  MOVFF  02,25C
23F0:  MOVFF  01,25B
23F4:  MOVFF  00,25A
23F8:  MOVFF  03,261
23FC:  MOVFF  02,260
2400:  MOVFF  01,25F
2404:  MOVFF  00,25E
2408:  BRA    2318
240A:  BRA    2450
240C:  MOVFF  251,25D
2410:  MOVFF  250,25C
2414:  MOVFF  24F,25B
2418:  MOVFF  24E,25A
241C:  MOVFF  255,261
2420:  MOVFF  254,260
2424:  MOVFF  253,25F
2428:  MOVFF  252,25E
242C:  RCALL  1C88
242E:  MOVFF  03,25D
2432:  MOVFF  02,25C
2436:  MOVFF  01,25B
243A:  MOVFF  00,25A
243E:  MOVFF  03,261
2442:  MOVFF  02,260
2446:  MOVFF  01,25F
244A:  MOVFF  00,25E
244E:  BRA    2336
2450:  MOVFF  03,259
2454:  MOVFF  02,258
2458:  MOVFF  01,257
245C:  MOVFF  00,256
....................       return(x-(i*y)); 
2460:  MOVFF  259,275
2464:  MOVFF  258,274
2468:  MOVFF  257,273
246C:  MOVFF  256,272
2470:  MOVFF  255,279
2474:  MOVFF  254,278
2478:  MOVFF  253,277
247C:  MOVFF  252,276
2480:  RCALL  1DE6
2482:  BSF    FD8.1
2484:  MOVFF  251,279
2488:  MOVFF  250,278
248C:  MOVFF  24F,277
2490:  MOVFF  24E,276
2494:  MOVFF  03,27D
2498:  MOVFF  02,27C
249C:  MOVFF  01,27B
24A0:  MOVFF  00,27A
24A4:  CALL   1A10
24A8:  BRA    24AA
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
24AA:  RETURN 0
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG,NOCPD 
.................... #use delay(clock=4000000) 
*
0192:  MOVLW  02
0194:  MOVWF  FEA
0196:  MOVLW  5B
0198:  MOVWF  FE9
019A:  MOVF   FEF,W
019C:  BZ    01BA
019E:  MOVLW  01
01A0:  MOVWF  01
01A2:  CLRF   00
01A4:  DECFSZ 00,F
01A6:  BRA    01A4
01A8:  DECFSZ 01,F
01AA:  BRA    01A2
01AC:  MOVLW  4A
01AE:  MOVWF  00
01B0:  DECFSZ 00,F
01B2:  BRA    01B0
01B4:  BRA    01B6
01B6:  DECFSZ FEF,F
01B8:  BRA    019E
01BA:  RETURN 0
.................... #include <PIC18F4520_registers.h> 
.................... #byte TOSU = 0xFFF 
....................  
.................... #word TOS = 0xFFD 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int SP:5; 
....................          unsigned int :2; 
....................          unsigned int STKOVF:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int STKPTR:5; 
....................          unsigned int :1; 
....................          unsigned int STKUNF:1; 
....................          unsigned int STKFUL:1; 
....................       }; 
....................    }; 
.................... } STKPTR; 
.................... #byte STKPTR = 0xFFC 
....................  
.................... #byte PCLATU = 0xFFB 
....................  
.................... #byte PCLATH = 0xFFA 
....................  
.................... #byte PCL = 0xFF9 
....................  
.................... struct  { 
....................    unsigned int TBLPTRU:5; 
....................    unsigned int ACSS:1; 
.................... } TBLPTRU; 
.................... #byte TBLPTRU = 0xFF8 
....................  
.................... #word TBLPTR = 0xFF6 
....................  
.................... #byte TABLAT = 0xFF5 
....................  
.................... #word PROD = 0xFF3 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :6; 
....................          unsigned int GIEL:1; 
....................          unsigned int GIEH:1; 
....................       }; 
....................  
....................    union { 
....................       struct { 
....................          unsigned int :1; 
....................          unsigned int INT0F:1; 
....................          unsigned int T0IF:1; 
....................          unsigned int :1; 
....................          unsigned int INT0E:1; 
....................          unsigned int T0IE:1; 
....................          unsigned int PEIE:1; 
....................          unsigned int GIE:1; 
....................       }; 
....................    }; 
....................  
....................       struct { 
....................          unsigned int RBIF:1; 
....................          unsigned int INT0IF:1; 
....................          unsigned int TMR0IF:1; 
....................          unsigned int RBIE:1; 
....................          unsigned int INT0IE:1; 
....................          unsigned int TMR0IE:1; 
....................          unsigned int PEIE_GIEL:1; 
....................          unsigned int GIE_GIEH:1; 
....................       }; 
....................    }; 
.................... } INTCON; 
.................... #byte INTCON = 0xFF2 
....................  
.................... struct  { 
....................    unsigned int RBIP:1; 
....................    unsigned int :1; 
....................    unsigned int TMR0IP:1; 
....................    unsigned int :1; 
....................    unsigned int INTEDG2:1; 
....................    unsigned int INTEDG1:1; 
....................    unsigned int INTEDG0:1; 
....................    unsigned int RBPU:1; 
.................... } INTCON2; 
.................... #byte INTCON2 = 0xFF1 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int INT1F:1; 
....................          unsigned int INT2F:1; 
....................          unsigned int :1; 
....................          unsigned int INT1E:1; 
....................          unsigned int INT2E:1; 
....................          unsigned int :1; 
....................          unsigned int INT1P:1; 
....................          unsigned int INT2P:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int INT1IF:1; 
....................          unsigned int INT2IF:1; 
....................          unsigned int :1; 
....................          unsigned int INT1IE:1; 
....................          unsigned int INT2IE:1; 
....................          unsigned int :1; 
....................          unsigned int INT1IP:1; 
....................          unsigned int INT2IP:1; 
....................       }; 
....................    }; 
.................... } INTCON3; 
.................... #byte INTCON3 = 0xFF0 
....................  
.................... #byte INDF0 = 0xFEF 
....................  
.................... #byte POSTINC0 = 0xFEE 
....................  
.................... #byte POSTDEC0 = 0xFED 
....................  
.................... #byte PREINC0 = 0xFEC 
....................  
.................... #byte PLUSW0 = 0xFEB 
....................  
.................... #word FSR0 = 0xFE9 
....................  
.................... #byte WREG = 0xFE8 
....................  
.................... #byte INDF1 = 0xFE7 
....................  
.................... #byte POSTINC1 = 0xFE6 
....................  
.................... #byte POSTDEC1 = 0xFE5 
....................  
.................... #byte PREINC1 = 0xFE4 
....................  
.................... #byte PLUSW1 = 0xFE3 
....................  
.................... #word FSR1 = 0xFE1 
....................  
.................... #byte BSR = 0xFE0 
....................  
.................... #byte INDF2 = 0xFDF 
....................  
.................... #byte POSTINC2 = 0xFDE 
....................  
.................... #byte POSTDEC2 = 0xFDD 
....................  
.................... #byte PREINC2 = 0xFDC 
....................  
.................... #byte PLUSW2 = 0xFDB 
....................  
.................... #word FSR2 = 0xFD9 
....................  
.................... struct  { 
....................    unsigned int C:1; 
....................    unsigned int DC:1; 
....................    unsigned int Z:1; 
....................    unsigned int OV:1; 
....................    unsigned int N:1; 
.................... } STATUS; 
.................... #byte STATUS = 0xFD8 
....................  
.................... #word TMR0 = 0xFD6 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :3; 
....................          unsigned int T0PS3:1; 
....................          unsigned int :2; 
....................          unsigned int T016BIT:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int T0PS:3; 
....................          unsigned int PSA:1; 
....................          unsigned int T0SE:1; 
....................          unsigned int T0CS:1; 
....................          unsigned int T08BIT:1; 
....................          unsigned int TMR0ON:1; 
....................       }; 
....................    }; 
.................... } T0CON; 
.................... #byte T0CON = 0xFD5 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int FLTS:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int SCS:2; 
....................          unsigned int IOFS:1; 
....................          unsigned int OSTS:1; 
....................          unsigned int IRCF:3; 
....................          unsigned int IDLEN:1; 
....................       }; 
....................    }; 
.................... } OSCCON; 
.................... #byte OSCCON = 0xFD3 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int HLVDL:4; 
....................          unsigned int HLVDEN:1; 
....................          unsigned int IVRST:1; 
....................          unsigned int :1; 
....................          unsigned int VDIRMAG:1; 
....................       }; 
....................  
....................    union { 
....................       struct { 
....................          unsigned int LVDL:4; 
....................          unsigned int LVDEN:1; 
....................          unsigned int IRVST:1; 
....................       }; 
....................    }; 
....................  
....................       struct { 
....................          unsigned int LVV:4; 
....................          unsigned int :1; 
....................          unsigned int BGST:1; 
....................       }; 
....................    }; 
.................... } HLVDCON; 
.................... #byte HLVDCON = 0xFD2 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int SWDTE:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int SWDTEN:1; 
....................       }; 
....................    }; 
.................... } WDTCON; 
.................... #byte WDTCON = 0xFD1 
....................  
.................... struct  { 
....................    unsigned int BOR:1; 
....................    unsigned int POR:1; 
....................    unsigned int PD:1; 
....................    unsigned int TO:1; 
....................    unsigned int RI:1; 
....................    unsigned int :1; 
....................    unsigned int SBOREN:1; 
....................    unsigned int IPEN:1; 
.................... } RCON; 
.................... #byte RCON = 0xFD0 
....................  
.................... #word TMR1 = 0xFCE 
....................  
.................... struct  { 
....................    unsigned int TMR1ON:1; 
....................    unsigned int TMR1CS:1; 
....................    unsigned int T1SYNC:1; 
....................    unsigned int T1OSCEN:1; 
....................    unsigned int T1CKPS:2; 
....................    unsigned int T1RUN:1; 
....................    unsigned int RD16:1; 
.................... } T1CON; 
.................... #byte T1CON = 0xFCD 
....................  
.................... #byte TMR2 = 0xFCC 
....................  
.................... #byte PR2 = 0xFCB 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :3; 
....................          unsigned int TOUTPS:4; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int T2CKPS:2; 
....................          unsigned int TMR2ON:1; 
....................          unsigned int T2OUTPS:4; 
....................       }; 
....................    }; 
.................... } T2CON; 
.................... #byte T2CON = 0xFCA 
....................  
.................... #byte SSPBUF = 0xFC9 
....................  
.................... #byte SSPADD = 0xFC8 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int WRITE:1; 
....................          unsigned int :2; 
....................          unsigned int ADDRESS:1; 
....................       }; 
....................  
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int R_W:1; 
....................          unsigned int :2; 
....................          unsigned int D_A:1; 
....................       }; 
....................    }; 
....................  
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int W:1; 
....................          unsigned int :2; 
....................          unsigned int A:1; 
....................       }; 
....................    }; 
....................  
....................       struct { 
....................          unsigned int BF:1; 
....................          unsigned int UA:1; 
....................          unsigned int R:1; 
....................          unsigned int S:1; 
....................          unsigned int P:1; 
....................          unsigned int D:1; 
....................          unsigned int CKE:1; 
....................          unsigned int SMP:1; 
....................       }; 
....................    }; 
.................... } SSPSTAT; 
.................... #byte SSPSTAT = 0xFC7 
....................  
.................... struct  { 
....................    unsigned int SSPM:4; 
....................    unsigned int CKP:1; 
....................    unsigned int SSPEN:1; 
....................    unsigned int SSPOV:1; 
....................    unsigned int WCOL:1; 
.................... } SSPCON1; 
.................... #byte SSPCON1 = 0xFC6 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :1; 
....................          unsigned int ADMSK1:5; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int SEN:1; 
....................          unsigned int RSEN:1; 
....................          unsigned int PEN:1; 
....................          unsigned int RCEN:1; 
....................          unsigned int ACKEN:1; 
....................          unsigned int ACKDT:1; 
....................          unsigned int ACKSTAT:1; 
....................          unsigned int GCEN:1; 
....................       }; 
....................    }; 
.................... } SSPCON2; 
.................... #byte SSPCON2 = 0xFC5 
....................  
.................... #word ADRES = 0xFC3 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :1; 
....................          unsigned int GO_DONE:1; 
....................       }; 
....................  
....................    union { 
....................       struct { 
....................          unsigned int :1; 
....................          unsigned int DONE:1; 
....................       }; 
....................    }; 
....................  
....................       struct { 
....................          unsigned int ADON:1; 
....................          unsigned int GO:1; 
....................          unsigned int CHS:4; 
....................       }; 
....................    }; 
.................... } ADCON0; 
.................... #byte ADCON0 = 0xFC2 
....................  
.................... struct  { 
....................    unsigned int PCFG:4; 
....................    unsigned int VCFG:2; 
.................... } ADCON1; 
.................... #byte ADCON1 = 0xFC1 
....................  
.................... struct  { 
....................    unsigned int ADCS:3; 
....................    unsigned int ACQT:3; 
....................    unsigned int :1; 
....................    unsigned int ADFM:1; 
.................... } ADCON2; 
.................... #byte ADCON2 = 0xFC0 
....................  
.................... #word CCPR1 = 0xFBE 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :4; 
....................          unsigned int CCP1Y:1; 
....................          unsigned int CCP1X:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int CCP1M:4; 
....................          unsigned int DC1B:2; 
....................          unsigned int P1M:2; 
....................       }; 
....................    }; 
.................... } CCP1CON; 
.................... #byte CCP1CON = 0xFBD 
....................  
.................... #word CCPR2 = 0xFBB 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :4; 
....................          unsigned int CCP2Y:1; 
....................          unsigned int CCP2X:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int CCP2M:4; 
....................          unsigned int DC2B:2; 
....................       }; 
....................    }; 
.................... } CCP2CON; 
.................... #byte CCP2CON = 0xFBA 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :4; 
....................          unsigned int SCKP:1; 
....................          unsigned int :1; 
....................          unsigned int RCMT:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int ABDEN:1; 
....................          unsigned int WUE:1; 
....................          unsigned int :1; 
....................          unsigned int BRG16:1; 
....................          unsigned int TXCKP:1; 
....................          unsigned int RXDTP:1; 
....................          unsigned int RCIDL:1; 
....................          unsigned int ABDOVF:1; 
....................       }; 
....................    }; 
.................... } BAUDCON; 
.................... #byte BAUDCON = 0xFB8 
....................  
.................... struct  { 
....................    unsigned int PDC:7; 
....................    unsigned int PRSEN:1; 
.................... } PWM1CON; 
.................... #byte PWM1CON = 0xFB7 
....................  
.................... struct  { 
....................    unsigned int PSSBD:2; 
....................    unsigned int PSSAC:2; 
....................    unsigned int ECCPAS:3; 
....................    unsigned int ECCPASE:1; 
.................... } ECCP1AS; 
.................... #byte ECCP1AS = 0xFB6 
....................  
.................... struct  { 
....................    unsigned int CVR:4; 
....................    unsigned int CVRSS:1; 
....................    unsigned int CVRR:1; 
....................    unsigned int CVROE:1; 
....................    unsigned int CVREN:1; 
.................... } CVRCON; 
.................... #byte CVRCON = 0xFB5 
....................  
.................... struct  { 
....................    unsigned int CM:3; 
....................    unsigned int CIS:1; 
....................    unsigned int C1INV:1; 
....................    unsigned int C2INV:1; 
....................    unsigned int C1OUT:1; 
....................    unsigned int C2OUT:1; 
.................... } CMCON; 
.................... #byte CMCON = 0xFB4 
....................  
.................... #word TMR3 = 0xFB2 
....................  
.................... struct  { 
....................    unsigned int TMR3ON:1; 
....................    unsigned int TMR3CS:1; 
....................    unsigned int T3SYNC:1; 
....................    unsigned int T3CCP1:1; 
....................    unsigned int T3CKPS:2; 
....................    unsigned int T3CCP2:1; 
....................    unsigned int RD16:1; 
.................... } T3CON; 
.................... #byte T3CON = 0xFB1 
....................  
.................... #byte SPBRGH = 0xFB0 
....................  
.................... #byte SPBRG = 0xFAF 
....................  
.................... #byte RCREG = 0xFAE 
....................  
.................... #byte TXREG = 0xFAD 
....................  
.................... struct  { 
....................    unsigned int TX9D:1; 
....................    unsigned int TRMT:1; 
....................    unsigned int BRGH:1; 
....................    unsigned int SENDB:1; 
....................    unsigned int SYNC:1; 
....................    unsigned int TXEN:1; 
....................    unsigned int TX9:1; 
....................    unsigned int CSRC:1; 
.................... } TXSTA; 
.................... #byte TXSTA = 0xFAC 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :3; 
....................          unsigned int ADEN:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int RX9D:1; 
....................          unsigned int OERR:1; 
....................          unsigned int FERR:1; 
....................          unsigned int ADDEN:1; 
....................          unsigned int CREN:1; 
....................          unsigned int SREN:1; 
....................          unsigned int RX9:1; 
....................          unsigned int SPEN:1; 
....................       }; 
....................    }; 
.................... } RCSTA; 
.................... #byte RCSTA = 0xFAB 
....................  
.................... #byte EEADR = 0xFA9 
....................  
.................... #byte EEDATA = 0xFA8 
....................  
.................... #byte EECON2 = 0xFA7 
....................  
.................... struct  { 
....................    unsigned int RD:1; 
....................    unsigned int WR:1; 
....................    unsigned int WREN:1; 
....................    unsigned int WRERR:1; 
....................    unsigned int FREE:1; 
....................    unsigned int :1; 
....................    unsigned int CFGS:1; 
....................    unsigned int EEPGD:1; 
.................... } EECON1; 
.................... #byte EECON1 = 0xFA6 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int LVDIP:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int CCP2IP:1; 
....................          unsigned int TMR3IP:1; 
....................          unsigned int HLVDIP:1; 
....................          unsigned int BCLIP:1; 
....................          unsigned int EEIP:1; 
....................          unsigned int :1; 
....................          unsigned int CMIP:1; 
....................          unsigned int OSCFIP:1; 
....................       }; 
....................    }; 
.................... } IPR2; 
.................... #byte IPR2 = 0xFA2 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int LVDIF:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int CCP2IF:1; 
....................          unsigned int TMR3IF:1; 
....................          unsigned int HLVDIF:1; 
....................          unsigned int BCLIF:1; 
....................          unsigned int EEIF:1; 
....................          unsigned int :1; 
....................          unsigned int CMIF:1; 
....................          unsigned int OSCFIF:1; 
....................       }; 
....................    }; 
.................... } PIR2; 
.................... #byte PIR2 = 0xFA1 
....................  
.................... struct  { 
....................    union { 
....................       struct { 
....................          unsigned int :2; 
....................          unsigned int LVDIE:1; 
....................       }; 
....................  
....................       struct { 
....................          unsigned int CCP2IE:1; 
....................          unsigned int TMR3IE:1; 
....................          unsigned int HLVDIE:1; 
....................          unsigned int BCLIE:1; 
....................          unsigned int EEIE:1; 
....................          unsigned int :1; 
....................          unsigned int CMIE:1; 
....................          unsigned int OSCFIE:1; 
....................       }; 
....................    }; 
.................... } PIE2; 
.................... #byte PIE2 = 0xFA0 
....................  
.................... struct  { 
....................    unsigned int TMR1IP:1; 
....................    unsigned int TMR2IP:1; 
....................    unsigned int CCP1IP:1; 
....................    unsigned int SSPIP:1; 
....................    unsigned int TXIP:1; 
....................    unsigned int RCIP:1; 
....................    unsigned int ADIP:1; 
....................    unsigned int PSPIP:1; 
.................... } IPR1; 
.................... #byte IPR1 = 0xF9F 
....................  
.................... struct  { 
....................    unsigned int TMR1IF:1; 
....................    unsigned int TMR2IF:1; 
....................    unsigned int CCP1IF:1; 
....................    unsigned int SSPIF:1; 
....................    unsigned int TXIF:1; 
....................    unsigned int RCIF:1; 
....................    unsigned int ADIF:1; 
....................    unsigned int PSPIF:1; 
.................... } PIR1; 
.................... #byte PIR1 = 0xF9E 
....................  
.................... struct  { 
....................    unsigned int TMR1IE:1; 
....................    unsigned int TMR2IE:1; 
....................    unsigned int CCP1IE:1; 
....................    unsigned int SSPIE:1; 
....................    unsigned int TXIE:1; 
....................    unsigned int RCIE:1; 
....................    unsigned int ADIE:1; 
....................    unsigned int PSPIE:1; 
.................... } PIE1; 
.................... #byte PIE1 = 0xF9D 
....................  
.................... struct  { 
....................    unsigned int TUN:5; 
....................    unsigned int :1; 
....................    unsigned int PLLEN:1; 
....................    unsigned int INTSRC:1; 
.................... } OSCTUNE; 
.................... #byte OSCTUNE = 0xF9B 
....................  
.................... struct  { 
....................    unsigned int TRISE0:1; 
....................    unsigned int TRISE1:1; 
....................    unsigned int TRISE2:1; 
....................    unsigned int TRISE3:1; 
....................    unsigned int TRISE4:1; 
....................    unsigned int TRISE5:1; 
....................    unsigned int TRISE6:1; 
....................    unsigned int TRISE7:1; 
.................... } TRISE; 
.................... #byte TRISE = 0xF96 
....................  
.................... struct  { 
....................    unsigned int TRISD0:1; 
....................    unsigned int TRISD1:1; 
....................    unsigned int TRISD2:1; 
....................    unsigned int TRISD3:1; 
....................    unsigned int TRISD4:1; 
....................    unsigned int TRISD5:1; 
....................    unsigned int TRISD6:1; 
....................    unsigned int TRISD7:1; 
.................... } TRISD; 
.................... #byte TRISD = 0xF95 
....................  
.................... struct  { 
....................    unsigned int TRISC0:1; 
....................    unsigned int TRISC1:1; 
....................    unsigned int TRISC2:1; 
....................    unsigned int TRISC3:1; 
....................    unsigned int TRISC4:1; 
....................    unsigned int TRISC5:1; 
....................    unsigned int TRISC6:1; 
....................    unsigned int TRISC7:1; 
.................... } TRISC; 
.................... #byte TRISC = 0xF94 
....................  
.................... struct  { 
....................    unsigned int TRISB0:1; 
....................    unsigned int TRISB1:1; 
....................    unsigned int TRISB2:1; 
....................    unsigned int TRISB3:1; 
....................    unsigned int TRISB4:1; 
....................    unsigned int TRISB5:1; 
....................    unsigned int TRISB6:1; 
....................    unsigned int TRISB7:1; 
.................... } TRISB; 
.................... #byte TRISB = 0xF93 
....................  
.................... struct  { 
....................    unsigned int TRISA0:1; 
....................    unsigned int TRISA1:1; 
....................    unsigned int TRISA2:1; 
....................    unsigned int TRISA3:1; 
....................    unsigned int TRISA4:1; 
....................    unsigned int TRISA5:1; 
....................    unsigned int TRISA6:1; 
....................    unsigned int TRISA7:1; 
.................... } TRISA; 
.................... #byte TRISA = 0xF92 
....................  
.................... struct  { 
....................    unsigned int LATE0:1; 
....................    unsigned int LATE1:1; 
....................    unsigned int LATE2:1; 
....................    unsigned int LATE3:1; 
....................    unsigned int LATE4:1; 
....................    unsigned int LATE5:1; 
....................    unsigned int LATE6:1; 
....................    unsigned int LATE7:1; 
.................... } LATE; 
.................... #byte LATE = 0xF8D 
....................  
.................... struct  { 
....................    unsigned int LATD0:1; 
....................    unsigned int LATD1:1; 
....................    unsigned int LATD2:1; 
....................    unsigned int LATD3:1; 
....................    unsigned int LATD4:1; 
....................    unsigned int LATD5:1; 
....................    unsigned int LATD6:1; 
....................    unsigned int LATD7:1; 
.................... } LATD; 
.................... #byte LATD = 0xF8C 
....................  
.................... struct  { 
....................    unsigned int LATC0:1; 
....................    unsigned int LATC1:1; 
....................    unsigned int LATC2:1; 
....................    unsigned int LATC3:1; 
....................    unsigned int LATC4:1; 
....................    unsigned int LATC5:1; 
....................    unsigned int LATC6:1; 
....................    unsigned int LATC7:1; 
.................... } LATC; 
.................... #byte LATC = 0xF8B 
....................  
.................... struct  { 
....................    unsigned int LATB0:1; 
....................    unsigned int LATB1:1; 
....................    unsigned int LATB2:1; 
....................    unsigned int LATB3:1; 
....................    unsigned int LATB4:1; 
....................    unsigned int LATB5:1; 
....................    unsigned int LATB6:1; 
....................    unsigned int LATB7:1; 
.................... } LATB; 
.................... #byte LATB = 0xF8A 
....................  
.................... struct  { 
....................    unsigned int LATA0:1; 
....................    unsigned int LATA1:1; 
....................    unsigned int LATA2:1; 
....................    unsigned int LATA3:1; 
....................    unsigned int LATA4:1; 
....................    unsigned int LATA5:1; 
....................    unsigned int LATA6:1; 
....................    unsigned int LATA7:1; 
.................... } LATA; 
.................... #byte LATA = 0xF89 
....................  
.................... struct  { 
....................    unsigned int RE0:1; 
....................    unsigned int RE1:1; 
....................    unsigned int RE2:1; 
....................    unsigned int RE3:1; 
....................    unsigned int RE4:1; 
....................    unsigned int RE5:1; 
....................    unsigned int RE6:1; 
....................    unsigned int RE7:1; 
.................... } PORTE; 
.................... #byte PORTE = 0xF84 
....................  
.................... struct  { 
....................    unsigned int RD0:1; 
....................    unsigned int RD1:1; 
....................    unsigned int RD2:1; 
....................    unsigned int RD3:1; 
....................    unsigned int RD4:1; 
....................    unsigned int RD5:1; 
....................    unsigned int RD6:1; 
....................    unsigned int RD7:1; 
.................... } PORTD; 
.................... #byte PORTD = 0xF83 
....................  
.................... struct  { 
....................    unsigned int RC0:1; 
....................    unsigned int RC1:1; 
....................    unsigned int RC2:1; 
....................    unsigned int RC3:1; 
....................    unsigned int RC4:1; 
....................    unsigned int RC5:1; 
....................    unsigned int RC6:1; 
....................    unsigned int RC7:1; 
.................... } PORTC; 
.................... #byte PORTC = 0xF82 
....................  
.................... struct  { 
....................    unsigned int RB0:1; 
....................    unsigned int RB1:1; 
....................    unsigned int RB2:1; 
....................    unsigned int RB3:1; 
....................    unsigned int RB4:1; 
....................    unsigned int RB5:1; 
....................    unsigned int RB6:1; 
....................    unsigned int RB7:1; 
.................... } PORTB; 
.................... #byte PORTB = 0xF81 
....................  
.................... struct  { 
....................    unsigned int RA0:1; 
....................    unsigned int RA1:1; 
....................    unsigned int RA2:1; 
....................    unsigned int RA3:1; 
....................    unsigned int RA4:1; 
....................    unsigned int RA5:1; 
....................    unsigned int RA6:1; 
....................    unsigned int RA7:1; 
.................... } PORTA; 
.................... #byte PORTA = 0xF80 
....................  
....................  
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D3 
.................... #define LCD_DATA5 PIN_D4 
.................... #define LCD_DATA6 PIN_D5 
.................... #define LCD_DATA7 PIN_D6 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0254:  BSF    F95.3
....................    output_float(LCD_DATA5); 
0256:  BSF    F95.4
....................    output_float(LCD_DATA6); 
0258:  BSF    F95.5
....................    output_float(LCD_DATA7); 
025A:  BSF    F95.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
025C:  BSF    F8C.1
025E:  BCF    F95.1
....................    delay_cycles(1); 
0260:  NOP   
....................    lcd_output_enable(1); 
0262:  BSF    F8C.2
0264:  BCF    F95.2
....................    delay_cycles(1); 
0266:  NOP   
....................    high = lcd_read_nibble(); 
0268:  RCALL  01FE
026A:  MOVFF  01,262
....................        
....................    lcd_output_enable(0); 
026E:  BCF    F8C.2
0270:  BCF    F95.2
....................    delay_cycles(1); 
0272:  NOP   
....................    lcd_output_enable(1); 
0274:  BSF    F8C.2
0276:  BCF    F95.2
....................    delay_us(1); 
0278:  NOP   
....................    low = lcd_read_nibble(); 
027A:  RCALL  01FE
027C:  MOVFF  01,261
....................        
....................    lcd_output_enable(0); 
0280:  BCF    F8C.2
0282:  BCF    F95.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0284:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
0286:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
0288:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
028A:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
028C:  MOVLB  2
028E:  SWAPF  x62,W
0290:  MOVWF  00
0292:  MOVLW  F0
0294:  ANDWF  00,F
0296:  MOVF   00,W
0298:  IORWF  x61,W
029A:  MOVWF  01
029C:  MOVLB  0
029E:  GOTO   02AE (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
01FE:  MOVLB  2
0200:  CLRF   x63
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0202:  BSF    F95.3
0204:  MOVLW  00
0206:  BTFSC  F83.3
0208:  MOVLW  01
020A:  IORWF  x63,F
....................    n |= input(LCD_DATA5) << 1; 
020C:  BSF    F95.4
020E:  MOVLW  00
0210:  BTFSC  F83.4
0212:  MOVLW  01
0214:  MOVWF  00
0216:  BCF    FD8.0
0218:  RLCF   00,F
021A:  MOVF   00,W
021C:  IORWF  x63,F
....................    n |= input(LCD_DATA6) << 2; 
021E:  BSF    F95.5
0220:  MOVLW  00
0222:  BTFSC  F83.5
0224:  MOVLW  01
0226:  MOVWF  00
0228:  RLCF   00,F
022A:  RLCF   00,F
022C:  MOVLW  FC
022E:  ANDWF  00,F
0230:  MOVF   00,W
0232:  IORWF  x63,F
....................    n |= input(LCD_DATA7) << 3; 
0234:  BSF    F95.6
0236:  MOVLW  00
0238:  BTFSC  F83.6
023A:  MOVLW  01
023C:  MOVWF  00
023E:  RLCF   00,F
0240:  RLCF   00,F
0242:  RLCF   00,F
0244:  MOVLW  F8
0246:  ANDWF  00,F
0248:  MOVF   00,W
024A:  IORWF  x63,F
....................     
....................    return(n); 
024C:  MOVFF  263,01
....................   #else 
0250:  MOVLB  0
0252:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
01BC:  MOVLB  2
01BE:  BTFSC  x62.0
01C0:  BRA    01C6
01C2:  BCF    F8C.3
01C4:  BRA    01C8
01C6:  BSF    F8C.3
01C8:  BCF    F95.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
01CA:  BTFSC  x62.1
01CC:  BRA    01D2
01CE:  BCF    F8C.4
01D0:  BRA    01D4
01D2:  BSF    F8C.4
01D4:  BCF    F95.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
01D6:  BTFSC  x62.2
01D8:  BRA    01DE
01DA:  BCF    F8C.5
01DC:  BRA    01E0
01DE:  BSF    F8C.5
01E0:  BCF    F95.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
01E2:  BTFSC  x62.3
01E4:  BRA    01EA
01E6:  BCF    F8C.6
01E8:  BRA    01EC
01EA:  BSF    F8C.6
01EC:  BCF    F95.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
01EE:  NOP   
....................    lcd_output_enable(1); 
01F0:  BSF    F8C.2
01F2:  BCF    F95.2
....................    delay_us(2); 
01F4:  BRA    01F6
....................    lcd_output_enable(0); 
01F6:  BCF    F8C.2
01F8:  BCF    F95.2
01FA:  MOVLB  0
01FC:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
02A2:  BCF    F95.2
....................    lcd_rs_tris(); 
02A4:  BCF    F95.0
....................    lcd_rw_tris(); 
02A6:  BCF    F95.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
02A8:  BCF    F8C.0
02AA:  BCF    F95.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
02AC:  BRA    0254
02AE:  MOVFF  01,261
02B2:  MOVLB  2
02B4:  BTFSS  01.7
02B6:  BRA    02BC
02B8:  MOVLB  0
02BA:  BRA    02AC
....................    lcd_output_rs(address); 
02BC:  MOVF   x5F,F
02BE:  BNZ   02C4
02C0:  BCF    F8C.0
02C2:  BRA    02C6
02C4:  BSF    F8C.0
02C6:  BCF    F95.0
....................    delay_cycles(1); 
02C8:  NOP   
....................    lcd_output_rw(0); 
02CA:  BCF    F8C.1
02CC:  BCF    F95.1
....................    delay_cycles(1); 
02CE:  NOP   
....................    lcd_output_enable(0); 
02D0:  BCF    F8C.2
02D2:  BCF    F95.2
....................    lcd_send_nibble(n >> 4); 
02D4:  SWAPF  x60,W
02D6:  MOVWF  x61
02D8:  MOVLW  0F
02DA:  ANDWF  x61,F
02DC:  MOVFF  261,262
02E0:  MOVLB  0
02E2:  RCALL  01BC
....................    lcd_send_nibble(n & 0xf); 
02E4:  MOVLB  2
02E6:  MOVF   x60,W
02E8:  ANDLW  0F
02EA:  MOVWF  x61
02EC:  MOVWF  x62
02EE:  MOVLB  0
02F0:  RCALL  01BC
02F2:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
02F4:  MOVLW  28
02F6:  MOVLB  2
02F8:  MOVWF  x4F
02FA:  MOVLW  0C
02FC:  MOVWF  x50
02FE:  MOVLW  01
0300:  MOVWF  x51
0302:  MOVLW  06
0304:  MOVWF  x52
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0306:  BCF    F8C.2
0308:  BCF    F95.2
....................    lcd_output_rs(0); 
030A:  BCF    F8C.0
030C:  BCF    F95.0
....................    lcd_output_rw(0); 
030E:  BCF    F8C.1
0310:  BCF    F95.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0312:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
0314:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
0316:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
0318:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
031A:  BCF    F95.2
....................    lcd_rs_tris(); 
031C:  BCF    F95.0
....................    lcd_rw_tris(); 
031E:  BCF    F95.1
....................  #endif 
....................      
....................    delay_ms(15); 
0320:  MOVLW  0F
0322:  MOVWF  x5B
0324:  MOVLB  0
0326:  RCALL  0192
....................    for(i=1;i<=3;++i) 
0328:  MOVLW  01
032A:  MOVLB  2
032C:  MOVWF  x4E
032E:  MOVF   x4E,W
0330:  SUBLW  03
0332:  BNC   034C
....................    { 
....................        lcd_send_nibble(3); 
0334:  MOVLW  03
0336:  MOVWF  x62
0338:  MOVLB  0
033A:  RCALL  01BC
....................        delay_ms(5); 
033C:  MOVLW  05
033E:  MOVLB  2
0340:  MOVWF  x5B
0342:  MOVLB  0
0344:  RCALL  0192
0346:  MOVLB  2
0348:  INCF   x4E,F
034A:  BRA    032E
....................    } 
....................     
....................    lcd_send_nibble(2); 
034C:  MOVLW  02
034E:  MOVWF  x62
0350:  MOVLB  0
0352:  RCALL  01BC
....................    delay_ms(5); 
0354:  MOVLW  05
0356:  MOVLB  2
0358:  MOVWF  x5B
035A:  MOVLB  0
035C:  RCALL  0192
....................    for(i=0;i<=3;++i) 
035E:  MOVLB  2
0360:  CLRF   x4E
0362:  MOVF   x4E,W
0364:  SUBLW  03
0366:  BNC   0386
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0368:  CLRF   03
036A:  MOVF   x4E,W
036C:  ADDLW  4F
036E:  MOVWF  FE9
0370:  MOVLW  02
0372:  ADDWFC 03,W
0374:  MOVWF  FEA
0376:  MOVFF  FEF,260
037A:  CLRF   x5F
037C:  MOVLB  0
037E:  RCALL  02A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0380:  MOVLB  2
0382:  INCF   x4E,F
0384:  BRA    0362
0386:  MOVLB  0
0388:  GOTO   5156 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
4460:  MOVLB  2
4462:  DECFSZ x5C,W
4464:  BRA    4468
4466:  BRA    446E
....................       address=LCD_LINE_TWO; 
4468:  MOVLW  40
446A:  MOVWF  x5D
446C:  BRA    4470
....................    else 
....................       address=0; 
446E:  CLRF   x5D
....................       
....................    address+=x-1; 
4470:  MOVLW  01
4472:  SUBWF  x5B,W
4474:  ADDWF  x5D,F
....................    lcd_send_byte(0,0x80|address); 
4476:  MOVF   x5D,W
4478:  IORLW  80
447A:  MOVWF  x5E
447C:  CLRF   x5F
447E:  MOVWF  x60
4480:  MOVLB  0
4482:  CALL   02A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
4486:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
4488:  MOVLB  2
448A:  MOVF   x5A,W
448C:  XORLW  07
448E:  MOVLB  0
4490:  BZ    44A0
4492:  XORLW  0B
4494:  BZ    44AE
4496:  XORLW  06
4498:  BZ    44CA
449A:  XORLW  02
449C:  BZ    44DA
449E:  BRA    44EA
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
44A0:  MOVLW  01
44A2:  MOVLB  2
44A4:  MOVWF  x5B
44A6:  MOVWF  x5C
44A8:  MOVLB  0
44AA:  RCALL  4460
44AC:  BRA    44FA
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
44AE:  MOVLB  2
44B0:  CLRF   x5F
44B2:  MOVLW  01
44B4:  MOVWF  x60
44B6:  MOVLB  0
44B8:  CALL   02A2
....................                      delay_ms(2); 
44BC:  MOVLW  02
44BE:  MOVLB  2
44C0:  MOVWF  x5B
44C2:  MOVLB  0
44C4:  CALL   0192
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
44C8:  BRA    44FA
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
44CA:  MOVLW  01
44CC:  MOVLB  2
44CE:  MOVWF  x5B
44D0:  MOVLW  02
44D2:  MOVWF  x5C
44D4:  MOVLB  0
44D6:  RCALL  4460
44D8:  BRA    44FA
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
44DA:  MOVLB  2
44DC:  CLRF   x5F
44DE:  MOVLW  10
44E0:  MOVWF  x60
44E2:  MOVLB  0
44E4:  CALL   02A2
44E8:  BRA    44FA
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
44EA:  MOVLW  01
44EC:  MOVLB  2
44EE:  MOVWF  x5F
44F0:  MOVFF  25A,260
44F4:  MOVLB  0
44F6:  CALL   02A2
....................      #endif 
....................    } 
44FA:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <ds1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_C1 
.................... #define RTC_IO   PIN_C2 
.................... #define RTC_RST  PIN_C0 
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(unsigned int8 cmd) { 
....................    unsigned int8 i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
038C:  MOVLB  2
038E:  CLRF   x58
0390:  MOVF   x58,W
0392:  SUBLW  07
0394:  BNC   03B0
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
0396:  BCF    FD8.0
0398:  RRCF   x57,F
039A:  BC    03A0
039C:  BCF    F8B.2
039E:  BRA    03A2
03A0:  BSF    F8B.2
03A2:  BCF    F94.2
....................       output_high(RTC_SCLK); 
03A4:  BCF    F94.1
03A6:  BSF    F8B.1
....................       output_low(RTC_SCLK); 
03A8:  BCF    F94.1
03AA:  BCF    F8B.1
03AC:  INCF   x58,F
03AE:  BRA    0390
....................    } 
03B0:  MOVLB  0
03B2:  RETURN 0
.................... } 
....................  
.................... void write_ds1302(unsigned int8 cmd, unsigned int8 data) { 
....................  
....................    output_high(RTC_RST); 
03B4:  BCF    F94.0
03B6:  BSF    F8B.0
....................    write_ds1302_byte(cmd); 
03B8:  MOVFF  255,257
03BC:  RCALL  038C
....................    write_ds1302_byte(data); 
03BE:  MOVFF  256,257
03C2:  RCALL  038C
....................    output_low(RTC_RST); 
03C4:  BCF    F94.0
03C6:  BCF    F8B.0
03C8:  RETURN 0
.................... } 
....................  
.................... unsigned int8 read_ds1302(unsigned int8 cmd) { 
....................    unsigned int8 i,data; 
....................  
....................    output_high(RTC_RST); 
03CA:  BCF    F94.0
03CC:  BSF    F8B.0
....................    write_ds1302_byte(cmd); 
03CE:  MOVFF  252,257
03D2:  RCALL  038C
....................     
....................    input(RTC_IO); 
03D4:  BSF    F94.2
....................    delay_us(1); 
03D6:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
03D8:  MOVLB  2
03DA:  CLRF   x53
03DC:  MOVF   x53,W
03DE:  SUBLW  07
03E0:  BNC   0400
....................       shift_right(&data,1,input(RTC_IO)); 
03E2:  BSF    F94.2
03E4:  BTFSC  F82.2
03E6:  BRA    03EC
03E8:  BCF    FD8.0
03EA:  BRA    03EE
03EC:  BSF    FD8.0
03EE:  RRCF   x54,F
....................       output_high(RTC_SCLK); 
03F0:  BCF    F94.1
03F2:  BSF    F8B.1
....................       delay_us(2); 
03F4:  BRA    03F6
....................       output_low(RTC_SCLK); 
03F6:  BCF    F94.1
03F8:  BCF    F8B.1
....................       delay_us(2); 
03FA:  BRA    03FC
03FC:  INCF   x53,F
03FE:  BRA    03DC
....................    } 
....................    output_low(RTC_RST); 
0400:  BCF    F94.0
0402:  BCF    F8B.0
....................  
....................    return(data); 
0404:  MOVFF  254,01
0408:  MOVLB  0
040A:  RETURN 0
.................... } 
....................  
.................... void rtc_init() { 
....................    unsigned int8 x; 
....................    output_low(RTC_RST); 
040C:  BCF    F94.0
040E:  BCF    F8B.0
....................    delay_us(2); 
0410:  BRA    0412
....................    output_low(RTC_SCLK); 
0412:  BCF    F94.1
0414:  BCF    F8B.1
....................    write_ds1302(0x8e,0); 
0416:  MOVLW  8E
0418:  MOVLB  2
041A:  MOVWF  x55
041C:  CLRF   x56
041E:  MOVLB  0
0420:  RCALL  03B4
....................    write_ds1302(0x90,0xa4); 
0422:  MOVLW  90
0424:  MOVLB  2
0426:  MOVWF  x55
0428:  MOVLW  A4
042A:  MOVWF  x56
042C:  MOVLB  0
042E:  RCALL  03B4
....................    x=read_ds1302(0x81); 
0430:  MOVLW  81
0432:  MOVLB  2
0434:  MOVWF  x52
0436:  MOVLB  0
0438:  RCALL  03CA
043A:  MOVFF  01,24E
....................    if((x & 0x80)!=0) 
043E:  MOVLB  2
0440:  MOVF   x4E,W
0442:  ANDLW  80
0444:  BZ    0452
....................      write_ds1302(0x80,0); 
0446:  MOVLW  80
0448:  MOVWF  x55
044A:  CLRF   x56
044C:  MOVLB  0
044E:  RCALL  03B4
0450:  MOVLB  2
0452:  MOVLB  0
0454:  GOTO   516A (RETURN)
.................... } 
....................  
.................... unsigned int8 get_bcd(unsigned int8 data) 
.................... { 
....................    unsigned int8 nibh; 
....................    unsigned int8 nibl; 
....................  
....................    nibh=data/10; 
*
38A8:  MOVFF  254,257
38AC:  MOVLW  0A
38AE:  MOVLB  2
38B0:  MOVWF  x58
38B2:  MOVLB  0
38B4:  RCALL  387C
38B6:  MOVFF  01,255
....................    nibl=data-(nibh*10); 
38BA:  MOVLB  2
38BC:  MOVF   x55,W
38BE:  MULLW  0A
38C0:  MOVF   FF3,W
38C2:  SUBWF  x54,W
38C4:  MOVWF  x56
....................  
....................    return((nibh<<4)|nibl); 
38C6:  SWAPF  x55,W
38C8:  MOVWF  00
38CA:  MOVLW  F0
38CC:  ANDWF  00,F
38CE:  MOVF   00,W
38D0:  IORWF  x56,W
38D2:  MOVWF  01
38D4:  MOVLB  0
38D6:  RETURN 0
.................... } 
....................                                           
.................... unsigned int8 rm_bcd(unsigned int8 data) 
.................... {                                                          
....................    unsigned int8 i;                 
....................  
....................    i=data;                      
*
3994:  MOVFF  253,254
....................    data=(i>>4)*10; 
3998:  MOVLB  2
399A:  SWAPF  x54,W
399C:  MOVWF  00
399E:  MOVLW  0F
39A0:  ANDWF  00,F
39A2:  MOVF   00,W
39A4:  MULLW  0A
39A6:  MOVFF  FF3,253
....................    data=data+(i & 0x0F);        
39AA:  MOVF   x54,W
39AC:  ANDLW  0F
39AE:  ADDWF  x53,F
....................  
....................    return data; 
39B0:  MOVFF  253,01
39B4:  MOVLB  0
39B6:  RETURN 0
.................... } 
....................  
.................... void rtc_set_datetime(unsigned int8 day, unsigned int8 mth, unsigned int8 year, unsigned int8 dow, unsigned int8 hr, unsigned int8 min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
38D8:  MOVFF  24E,254
38DC:  RCALL  38A8
38DE:  MOVFF  01,254
38E2:  MOVLW  86
38E4:  MOVLB  2
38E6:  MOVWF  x55
38E8:  MOVFF  01,256
38EC:  MOVLB  0
38EE:  CALL   03B4
....................    write_ds1302(0x88,get_bcd(mth)); 
38F2:  MOVFF  24F,254
38F6:  RCALL  38A8
38F8:  MOVFF  01,254
38FC:  MOVLW  88
38FE:  MOVLB  2
3900:  MOVWF  x55
3902:  MOVFF  01,256
3906:  MOVLB  0
3908:  CALL   03B4
....................    write_ds1302(0x8c,get_bcd(year)); 
390C:  MOVFF  250,254
3910:  RCALL  38A8
3912:  MOVFF  01,254
3916:  MOVLW  8C
3918:  MOVLB  2
391A:  MOVWF  x55
391C:  MOVFF  01,256
3920:  MOVLB  0
3922:  CALL   03B4
....................    write_ds1302(0x8a,get_bcd(dow)); 
3926:  MOVFF  251,254
392A:  RCALL  38A8
392C:  MOVFF  01,254
3930:  MOVLW  8A
3932:  MOVLB  2
3934:  MOVWF  x55
3936:  MOVFF  01,256
393A:  MOVLB  0
393C:  CALL   03B4
....................    write_ds1302(0x84,get_bcd(hr)); 
3940:  MOVFF  252,254
3944:  RCALL  38A8
3946:  MOVFF  01,254
394A:  MOVLW  84
394C:  MOVLB  2
394E:  MOVWF  x55
3950:  MOVFF  01,256
3954:  MOVLB  0
3956:  CALL   03B4
....................    write_ds1302(0x82,get_bcd(min)); 
395A:  MOVFF  253,254
395E:  RCALL  38A8
3960:  MOVFF  01,254
3964:  MOVLW  82
3966:  MOVLB  2
3968:  MOVWF  x55
396A:  MOVFF  01,256
396E:  MOVLB  0
3970:  CALL   03B4
....................    write_ds1302(0x80,get_bcd(0)); 
3974:  MOVLB  2
3976:  CLRF   x54
3978:  MOVLB  0
397A:  RCALL  38A8
397C:  MOVFF  01,254
3980:  MOVLW  80
3982:  MOVLB  2
3984:  MOVWF  x55
3986:  MOVFF  01,256
398A:  MOVLB  0
398C:  CALL   03B4
3990:  GOTO   523E (RETURN)
.................... }                                       
....................  
.................... void rtc_get_date(unsigned int8 &day, unsigned int8 &mth, unsigned int8 &year, unsigned int8 &dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
5412:  MOVLW  87
5414:  MOVLB  2
5416:  MOVWF  x52
5418:  MOVLB  0
541A:  CALL   03CA
541E:  MOVFF  01,24E
5422:  MOVFF  01,253
5426:  CALL   3994
542A:  MOVFF  01,245
*
54DE:  MOVLW  87
54E0:  MOVLB  2
54E2:  MOVWF  x52
54E4:  MOVLB  0
54E6:  CALL   03CA
54EA:  MOVFF  01,24E
54EE:  MOVFF  01,253
54F2:  CALL   3994
54F6:  MOVFF  01,245
*
5958:  MOVLW  87
595A:  MOVLB  2
595C:  MOVWF  x52
595E:  MOVLB  0
5960:  CALL   03CA
5964:  MOVFF  01,24E
5968:  MOVFF  01,253
596C:  CALL   3994
5970:  MOVFF  01,245
*
5E0C:  MOVLW  87
5E0E:  MOVLB  2
5E10:  MOVWF  x52
5E12:  MOVLB  0
5E14:  CALL   03CA
5E18:  MOVFF  01,24E
5E1C:  MOVFF  01,253
5E20:  CALL   3994
5E24:  MOVFF  01,245
*
62C0:  MOVLW  87
62C2:  MOVLB  2
62C4:  MOVWF  x52
62C6:  MOVLB  0
62C8:  CALL   03CA
62CC:  MOVFF  01,24E
62D0:  MOVFF  01,253
62D4:  CALL   3994
62D8:  MOVFF  01,245
*
6774:  MOVLW  87
6776:  MOVLB  2
6778:  MOVWF  x52
677A:  MOVLB  0
677C:  CALL   03CA
6780:  MOVFF  01,24E
6784:  MOVFF  01,253
6788:  CALL   3994
678C:  MOVFF  01,245
*
6C28:  MOVLW  87
6C2A:  MOVLB  2
6C2C:  MOVWF  x52
6C2E:  MOVLB  0
6C30:  CALL   03CA
6C34:  MOVFF  01,24E
6C38:  MOVFF  01,253
6C3C:  CALL   3994
6C40:  MOVFF  01,245
*
70DA:  MOVLW  87
70DC:  MOVLB  2
70DE:  MOVWF  x52
70E0:  MOVLB  0
70E2:  CALL   03CA
70E6:  MOVFF  01,24E
70EA:  MOVFF  01,253
70EE:  CALL   3994
70F2:  MOVFF  01,245
....................    mth = rm_bcd(read_ds1302(0x89)); 
*
542E:  MOVLW  89
5430:  MOVLB  2
5432:  MOVWF  x52
5434:  MOVLB  0
5436:  CALL   03CA
543A:  MOVFF  01,24E
543E:  MOVFF  01,253
5442:  CALL   3994
5446:  MOVFF  01,246
*
54FA:  MOVLW  89
54FC:  MOVLB  2
54FE:  MOVWF  x52
5500:  MOVLB  0
5502:  CALL   03CA
5506:  MOVFF  01,24E
550A:  MOVFF  01,253
550E:  CALL   3994
5512:  MOVFF  01,246
*
5974:  MOVLW  89
5976:  MOVLB  2
5978:  MOVWF  x52
597A:  MOVLB  0
597C:  CALL   03CA
5980:  MOVFF  01,24E
5984:  MOVFF  01,253
5988:  CALL   3994
598C:  MOVFF  01,246
*
5E28:  MOVLW  89
5E2A:  MOVLB  2
5E2C:  MOVWF  x52
5E2E:  MOVLB  0
5E30:  CALL   03CA
5E34:  MOVFF  01,24E
5E38:  MOVFF  01,253
5E3C:  CALL   3994
5E40:  MOVFF  01,246
*
62DC:  MOVLW  89
62DE:  MOVLB  2
62E0:  MOVWF  x52
62E2:  MOVLB  0
62E4:  CALL   03CA
62E8:  MOVFF  01,24E
62EC:  MOVFF  01,253
62F0:  CALL   3994
62F4:  MOVFF  01,246
*
6790:  MOVLW  89
6792:  MOVLB  2
6794:  MOVWF  x52
6796:  MOVLB  0
6798:  CALL   03CA
679C:  MOVFF  01,24E
67A0:  MOVFF  01,253
67A4:  CALL   3994
67A8:  MOVFF  01,246
*
6C44:  MOVLW  89
6C46:  MOVLB  2
6C48:  MOVWF  x52
6C4A:  MOVLB  0
6C4C:  CALL   03CA
6C50:  MOVFF  01,24E
6C54:  MOVFF  01,253
6C58:  CALL   3994
6C5C:  MOVFF  01,246
*
70F6:  MOVLW  89
70F8:  MOVLB  2
70FA:  MOVWF  x52
70FC:  MOVLB  0
70FE:  CALL   03CA
7102:  MOVFF  01,24E
7106:  MOVFF  01,253
710A:  CALL   3994
710E:  MOVFF  01,246
....................    year = rm_bcd(read_ds1302(0x8d)); 
*
544A:  MOVLW  8D
544C:  MOVLB  2
544E:  MOVWF  x52
5450:  MOVLB  0
5452:  CALL   03CA
5456:  MOVFF  01,24E
545A:  MOVFF  01,253
545E:  CALL   3994
5462:  MOVFF  01,247
*
5516:  MOVLW  8D
5518:  MOVLB  2
551A:  MOVWF  x52
551C:  MOVLB  0
551E:  CALL   03CA
5522:  MOVFF  01,24E
5526:  MOVFF  01,253
552A:  CALL   3994
552E:  MOVFF  01,247
*
5990:  MOVLW  8D
5992:  MOVLB  2
5994:  MOVWF  x52
5996:  MOVLB  0
5998:  CALL   03CA
599C:  MOVFF  01,24E
59A0:  MOVFF  01,253
59A4:  CALL   3994
59A8:  MOVFF  01,247
*
5E44:  MOVLW  8D
5E46:  MOVLB  2
5E48:  MOVWF  x52
5E4A:  MOVLB  0
5E4C:  CALL   03CA
5E50:  MOVFF  01,24E
5E54:  MOVFF  01,253
5E58:  CALL   3994
5E5C:  MOVFF  01,247
*
62F8:  MOVLW  8D
62FA:  MOVLB  2
62FC:  MOVWF  x52
62FE:  MOVLB  0
6300:  CALL   03CA
6304:  MOVFF  01,24E
6308:  MOVFF  01,253
630C:  CALL   3994
6310:  MOVFF  01,247
*
67AC:  MOVLW  8D
67AE:  MOVLB  2
67B0:  MOVWF  x52
67B2:  MOVLB  0
67B4:  CALL   03CA
67B8:  MOVFF  01,24E
67BC:  MOVFF  01,253
67C0:  CALL   3994
67C4:  MOVFF  01,247
*
6C60:  MOVLW  8D
6C62:  MOVLB  2
6C64:  MOVWF  x52
6C66:  MOVLB  0
6C68:  CALL   03CA
6C6C:  MOVFF  01,24E
6C70:  MOVFF  01,253
6C74:  CALL   3994
6C78:  MOVFF  01,247
*
7112:  MOVLW  8D
7114:  MOVLB  2
7116:  MOVWF  x52
7118:  MOVLB  0
711A:  CALL   03CA
711E:  MOVFF  01,24E
7122:  MOVFF  01,253
7126:  CALL   3994
712A:  MOVFF  01,247
....................    dow = rm_bcd(read_ds1302(0x8b)); 
*
5466:  MOVLW  8B
5468:  MOVLB  2
546A:  MOVWF  x52
546C:  MOVLB  0
546E:  CALL   03CA
5472:  MOVFF  01,24E
5476:  MOVFF  01,253
547A:  CALL   3994
547E:  MOVFF  01,248
*
5532:  MOVLW  8B
5534:  MOVLB  2
5536:  MOVWF  x52
5538:  MOVLB  0
553A:  CALL   03CA
553E:  MOVFF  01,24E
5542:  MOVFF  01,253
5546:  CALL   3994
554A:  MOVFF  01,248
*
59AC:  MOVLW  8B
59AE:  MOVLB  2
59B0:  MOVWF  x52
59B2:  MOVLB  0
59B4:  CALL   03CA
59B8:  MOVFF  01,24E
59BC:  MOVFF  01,253
59C0:  CALL   3994
59C4:  MOVFF  01,248
*
5E60:  MOVLW  8B
5E62:  MOVLB  2
5E64:  MOVWF  x52
5E66:  MOVLB  0
5E68:  CALL   03CA
5E6C:  MOVFF  01,24E
5E70:  MOVFF  01,253
5E74:  CALL   3994
5E78:  MOVFF  01,248
*
6314:  MOVLW  8B
6316:  MOVLB  2
6318:  MOVWF  x52
631A:  MOVLB  0
631C:  CALL   03CA
6320:  MOVFF  01,24E
6324:  MOVFF  01,253
6328:  CALL   3994
632C:  MOVFF  01,248
*
67C8:  MOVLW  8B
67CA:  MOVLB  2
67CC:  MOVWF  x52
67CE:  MOVLB  0
67D0:  CALL   03CA
67D4:  MOVFF  01,24E
67D8:  MOVFF  01,253
67DC:  CALL   3994
67E0:  MOVFF  01,248
*
6C7C:  MOVLW  8B
6C7E:  MOVLB  2
6C80:  MOVWF  x52
6C82:  MOVLB  0
6C84:  CALL   03CA
6C88:  MOVFF  01,24E
6C8C:  MOVFF  01,253
6C90:  CALL   3994
6C94:  MOVFF  01,248
*
712E:  MOVLW  8B
7130:  MOVLB  2
7132:  MOVWF  x52
7134:  MOVLB  0
7136:  CALL   03CA
713A:  MOVFF  01,24E
713E:  MOVFF  01,253
7142:  CALL   3994
7146:  MOVFF  01,248
.................... } 
....................  
.................... void rtc_get_time(unsigned int8 &hr, unsigned int8 &min, unsigned int8 &sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
53BE:  MOVLW  85
53C0:  MOVLB  2
53C2:  MOVWF  x52
53C4:  MOVLB  0
53C6:  CALL   03CA
53CA:  MOVFF  01,24E
53CE:  MOVFF  01,253
53D2:  CALL   3994
53D6:  MOVFF  01,244
*
548C:  MOVLW  85
548E:  MOVWF  x52
5490:  MOVLB  0
5492:  CALL   03CA
5496:  MOVFF  01,24E
549A:  MOVFF  01,253
549E:  CALL   3994
54A2:  MOVFF  01,244
*
5906:  MOVLW  85
5908:  MOVWF  x52
590A:  MOVLB  0
590C:  CALL   03CA
5910:  MOVFF  01,24E
5914:  MOVFF  01,253
5918:  CALL   3994
591C:  MOVFF  01,244
*
5DBA:  MOVLW  85
5DBC:  MOVWF  x52
5DBE:  MOVLB  0
5DC0:  CALL   03CA
5DC4:  MOVFF  01,24E
5DC8:  MOVFF  01,253
5DCC:  CALL   3994
5DD0:  MOVFF  01,244
*
626E:  MOVLW  85
6270:  MOVWF  x52
6272:  MOVLB  0
6274:  CALL   03CA
6278:  MOVFF  01,24E
627C:  MOVFF  01,253
6280:  CALL   3994
6284:  MOVFF  01,244
*
6722:  MOVLW  85
6724:  MOVWF  x52
6726:  MOVLB  0
6728:  CALL   03CA
672C:  MOVFF  01,24E
6730:  MOVFF  01,253
6734:  CALL   3994
6738:  MOVFF  01,244
*
6BD6:  MOVLW  85
6BD8:  MOVWF  x52
6BDA:  MOVLB  0
6BDC:  CALL   03CA
6BE0:  MOVFF  01,24E
6BE4:  MOVFF  01,253
6BE8:  CALL   3994
6BEC:  MOVFF  01,244
*
7088:  MOVLW  85
708A:  MOVWF  x52
708C:  MOVLB  0
708E:  CALL   03CA
7092:  MOVFF  01,24E
7096:  MOVFF  01,253
709A:  CALL   3994
709E:  MOVFF  01,244
....................    min = rm_bcd(read_ds1302(0x83)); 
*
53DA:  MOVLW  83
53DC:  MOVLB  2
53DE:  MOVWF  x52
53E0:  MOVLB  0
53E2:  CALL   03CA
53E6:  MOVFF  01,24E
53EA:  MOVFF  01,253
53EE:  CALL   3994
53F2:  MOVFF  01,243
*
54A6:  MOVLW  83
54A8:  MOVLB  2
54AA:  MOVWF  x52
54AC:  MOVLB  0
54AE:  CALL   03CA
54B2:  MOVFF  01,24E
54B6:  MOVFF  01,253
54BA:  CALL   3994
54BE:  MOVFF  01,243
*
5920:  MOVLW  83
5922:  MOVLB  2
5924:  MOVWF  x52
5926:  MOVLB  0
5928:  CALL   03CA
592C:  MOVFF  01,24E
5930:  MOVFF  01,253
5934:  CALL   3994
5938:  MOVFF  01,243
*
5DD4:  MOVLW  83
5DD6:  MOVLB  2
5DD8:  MOVWF  x52
5DDA:  MOVLB  0
5DDC:  CALL   03CA
5DE0:  MOVFF  01,24E
5DE4:  MOVFF  01,253
5DE8:  CALL   3994
5DEC:  MOVFF  01,243
*
6288:  MOVLW  83
628A:  MOVLB  2
628C:  MOVWF  x52
628E:  MOVLB  0
6290:  CALL   03CA
6294:  MOVFF  01,24E
6298:  MOVFF  01,253
629C:  CALL   3994
62A0:  MOVFF  01,243
*
673C:  MOVLW  83
673E:  MOVLB  2
6740:  MOVWF  x52
6742:  MOVLB  0
6744:  CALL   03CA
6748:  MOVFF  01,24E
674C:  MOVFF  01,253
6750:  CALL   3994
6754:  MOVFF  01,243
*
6BF0:  MOVLW  83
6BF2:  MOVLB  2
6BF4:  MOVWF  x52
6BF6:  MOVLB  0
6BF8:  CALL   03CA
6BFC:  MOVFF  01,24E
6C00:  MOVFF  01,253
6C04:  CALL   3994
6C08:  MOVFF  01,243
*
70A2:  MOVLW  83
70A4:  MOVLB  2
70A6:  MOVWF  x52
70A8:  MOVLB  0
70AA:  CALL   03CA
70AE:  MOVFF  01,24E
70B2:  MOVFF  01,253
70B6:  CALL   3994
70BA:  MOVFF  01,243
....................    sec = rm_bcd(read_ds1302(0x81)); 
*
53F6:  MOVLW  81
53F8:  MOVLB  2
53FA:  MOVWF  x52
53FC:  MOVLB  0
53FE:  CALL   03CA
5402:  MOVFF  01,24E
5406:  MOVFF  01,253
540A:  CALL   3994
540E:  MOVFF  01,242
*
54C2:  MOVLW  81
54C4:  MOVLB  2
54C6:  MOVWF  x52
54C8:  MOVLB  0
54CA:  CALL   03CA
54CE:  MOVFF  01,24E
54D2:  MOVFF  01,253
54D6:  CALL   3994
54DA:  MOVFF  01,242
*
593C:  MOVLW  81
593E:  MOVLB  2
5940:  MOVWF  x52
5942:  MOVLB  0
5944:  CALL   03CA
5948:  MOVFF  01,24E
594C:  MOVFF  01,253
5950:  CALL   3994
5954:  MOVFF  01,242
*
5DF0:  MOVLW  81
5DF2:  MOVLB  2
5DF4:  MOVWF  x52
5DF6:  MOVLB  0
5DF8:  CALL   03CA
5DFC:  MOVFF  01,24E
5E00:  MOVFF  01,253
5E04:  CALL   3994
5E08:  MOVFF  01,242
*
62A4:  MOVLW  81
62A6:  MOVLB  2
62A8:  MOVWF  x52
62AA:  MOVLB  0
62AC:  CALL   03CA
62B0:  MOVFF  01,24E
62B4:  MOVFF  01,253
62B8:  CALL   3994
62BC:  MOVFF  01,242
*
6758:  MOVLW  81
675A:  MOVLB  2
675C:  MOVWF  x52
675E:  MOVLB  0
6760:  CALL   03CA
6764:  MOVFF  01,24E
6768:  MOVFF  01,253
676C:  CALL   3994
6770:  MOVFF  01,242
*
6C0C:  MOVLW  81
6C0E:  MOVLB  2
6C10:  MOVWF  x52
6C12:  MOVLB  0
6C14:  CALL   03CA
6C18:  MOVFF  01,24E
6C1C:  MOVFF  01,253
6C20:  CALL   3994
6C24:  MOVFF  01,242
*
70BE:  MOVLW  81
70C0:  MOVLB  2
70C2:  MOVWF  x52
70C4:  MOVLB  0
70C6:  CALL   03CA
70CA:  MOVFF  01,24E
70CE:  MOVFF  01,253
70D2:  CALL   3994
70D6:  MOVFF  01,242
.................... } 
....................  
.................... void rtc_write_nvr(unsigned int8 address, unsigned int8 data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... unsigned int8 rtc_read_nvr(unsigned int8 address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7, parity=N, stop=1) 
.................... #use i2c (master,sda=pin_c4,scl=pin_c3,slow=100000) 
*
0458:  BCF    FC6.7
045A:  BCF    F9E.3
045C:  MOVFF  251,FC9
0460:  MOVLW  02
0462:  BTFSC  FC6.7
0464:  BRA    0470
0466:  BTFSS  F9E.3
0468:  BRA    0466
046A:  MOVLW  00
046C:  BTFSC  FC5.6
046E:  MOVLW  01
0470:  MOVWF  01
0472:  RETURN 0
*
04A0:  BCF    FC6.6
04A2:  BSF    FC5.3
04A4:  BTFSC  FC5.3
04A6:  BRA    04A4
04A8:  BTFSC  00.0
04AA:  BCF    FC5.5
04AC:  BTFSS  00.0
04AE:  BSF    FC5.5
04B0:  BSF    FC5.4
04B2:  BTFSC  FC5.4
04B4:  BRA    04B2
04B6:  MOVFF  FC9,01
04BA:  GOTO   04EE (RETURN)
.................... #include<input.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                             input.c                               //// 
.................... ////                                                                   //// 
.................... //// Routines for reading user input over an RS232 stream.  User input //// 
.................... //// is in ASCII form and converted to requested binary or float       //// 
.................... //// format.                                                           //// 
.................... ////                                                                   //// 
.................... //// If STREAM_SERIAL_INPUT is defined, these routines will read from  //// 
.................... //// that serial stream.  If not, uses the last #use rs232().          //// 
.................... ////                                                                   //// 
.................... //// Some of these routines are not available unless you #include      //// 
.................... //// string.h and stdlib.h                                             //// 
.................... ////                                                                   //// 
.................... ////  int8 gethex() - read 2 char hex value from serial                //// 
.................... ////                                                                   //// 
.................... ////  get_string(s, max) - read max chars from serial and save to s    //// 
.................... ////                                                                   //// 
.................... ////  get_stringEdit(s, max) - similar to get_string(), but first it   //// 
.................... ////     displays current string in s, allowing you to edit it.        //// 
.................... ////                                                                   //// 
.................... ////  int8 = get_Int8() -                                              //// 
.................... ////  int16 = get_Int16() -                                            //// 
.................... ////  int32 = get_Int32() -                                            //// 
.................... ////  float = get_float() -                                            //// 
.................... ////     Read value from serial.                                       //// 
.................... ////                                                                   //// 
.................... ////  int8 = get_Int8Edit(old) -                                       //// 
.................... ////  int16 = get_Int16Edit(old) -                                     //// 
.................... ////  int32 = get_Int32Edit(old) -                                     //// 
.................... ////  float = get_floatEdit(old) -                                     //// 
.................... ////     Similar to get_Int*() routines documented above, but first    //// 
.................... ////     it displays old value allowing you to edit it.                //// 
.................... ////                                                                   //// 
.................... ////  int = get_int() -                                                //// 
.................... ////  long = get_long() -                                              //// 
.................... ////     Simlar to get_Int*() documented above, but return 'int' and   //// 
.................... ////     'long' datatypes.  The size of these datatypes depends on     //// 
.................... ////     the PIC architecture and compiler configuration.              //// 
.................... ////                                                                   //// 
.................... ////  int = get_intEdit(old) -                                         //// 
.................... ////  long = get_longEdit(old) -                                       //// 
.................... ////     Similar to get_int() and get_long() documented above,         //// 
.................... ////     but first it displays old value allowing you to edit it.      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __INPUT_C__ 
.................... #define __INPUT_C__ 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #if defined(STREAM_SERIAL_INPUT) 
....................    #define InputKbhit()    kbhit(STREAM_SERIAL_INPUT) 
....................    #define InputPutc(c)    fputc(c, STREAM_SERIAL_INPUT) 
....................    #define InputGetc()     fgetc(STREAM_SERIAL_INPUT) 
.................... #else 
....................    #define InputKbhit()    kbhit() 
....................    #define InputPutc(c)    putc(c) 
....................    #define InputGetc()     getc() 
.................... #endif 
....................  
.................... unsigned int8 gethex1() { 
....................    char digit; 
....................  
....................    digit = InputGetc(); 
....................  
....................    InputPutc(digit); 
....................  
....................    if(digit<='9') 
....................      return(digit-'0'); 
....................    else 
....................      return((toupper(digit)-'A')+10); 
.................... } 
....................  
.................... unsigned int8 gethex() { 
....................    unsigned int8 lo,hi; 
....................  
....................    hi = gethex1(); 
....................    lo = gethex1(); 
....................    if(lo==0xdd) 
....................      return(hi); 
....................    else 
....................      return( hi*16+lo ); 
.................... } 
....................  
.................... void get_string(char* s, unsigned int8 max) { 
....................    unsigned int8 len; 
....................    char c; 
....................  
....................    max-=2; 
....................    len=0; 
....................    do { 
....................      c=InputGetc(); 
....................      if(c==8) {  // Backspace 
....................         if(len>0) { 
....................           len--; 
....................           InputPutc(c); 
....................           InputPutc(' '); 
....................           InputPutc(c); 
....................         } 
....................      } else if ((c>=' ')&&(c<='~')) 
....................        if(len<=max) { 
....................          s[len++]=c; 
....................          InputPutc(c); 
....................        } 
....................    } while(c!=13); 
....................    s[len]=0; 
.................... } 
....................  
.................... #ifdef _STRING 
.................... void get_stringEdit(char* s, unsigned int8 max) { 
....................    unsigned int8 len; 
....................    char c; 
....................  
....................    len = strlen(s); 
....................  
....................    if (len) 
....................    { 
....................      #if defined(STREAM_SERIAL_INPUT) 
....................       fprintf(STREAM_SERIAL_INPUT, "%s", s); 
....................      #else 
....................       printf("%s", s); 
....................      #endif 
....................    } 
....................  
....................    max-=2; 
....................  
....................    do { 
....................      c=InputGetc(); 
....................      if(c==8) {  // Backspace 
....................         if(len>0) { 
....................           len--; 
....................           InputPutc(c); 
....................           InputPutc(' '); 
....................           InputPutc(c); 
....................         } 
....................      } else if ((c>=' ')&&(c<='~')) 
....................        if(len<=max) { 
....................          s[len++]=c; 
....................          InputPutc(c); 
....................        } 
....................    } while(c!=13); 
....................    s[len]=0; 
.................... } 
.................... #endif 
....................  
.................... // stdlib.h is required for the ato_ conversions 
.................... // in the following functions 
.................... #ifdef _STDLIB 
.................... signed int8 get_Int8(void) 
.................... { 
....................   char s[5]; 
....................   signed int8 i; 
....................  
....................   get_string(s, sizeof(s)); 
....................  
....................   i=atoi(s); 
....................   return(i); 
.................... } 
....................  
.................... #ifdef _STRING 
.................... signed int8 get_Int8Edit(signed int8 old) 
.................... { 
....................   char s[5]; 
....................   signed int8 i; 
....................  
....................   sprintf(s, "%d", old); 
....................   get_stringEdit(s, sizeof(s)); 
....................  
....................   i=atoi(s); 
....................   return(i); 
.................... } 
.................... #endif 
....................  
.................... signed int16 get_Int16(void) 
.................... { 
....................   char s[7]; 
....................   signed int16 l; 
....................  
....................   get_string(s, sizeof(s)); 
....................   l=atol(s); 
....................   return(l); 
.................... } 
....................  
.................... #ifdef _STRING 
.................... signed int16 get_Int16Edit(signed int16 old) 
.................... { 
....................   char s[7]; 
....................   signed int16 l; 
....................  
....................   sprintf(s, "%ld", old); 
....................  
....................   get_stringEdit(s, sizeof(s)); 
....................   l=atol(s); 
....................   return(l); 
.................... } 
.................... #endif 
....................  
.................... signed int32 get_Int32(void) 
.................... { 
....................   char s[12]; 
....................   signed int32 l; 
....................  
....................   get_string(s, sizeof(s)); 
....................   l=atoi32(s); 
....................   return(l); 
.................... } 
....................  
.................... #ifdef _STRING 
.................... signed int32 get_Int32Edit(signed int32 old) 
.................... { 
....................   char s[12]; 
....................   signed int32 l; 
....................  
....................   sprintf(s, "%ld", old); 
....................  
....................   get_stringEdit(s, sizeof(s)); 
....................   l=atoi32(s); 
....................   return(l); 
.................... } 
.................... #endif 
....................  
.................... float get_float() { 
....................   char s[20]; 
....................   float f; 
....................  
....................   get_string(s, 20); 
....................   f = atof(s); 
....................   return(f); 
.................... } 
....................  
.................... #ifdef _STRING 
.................... float get_floatEdit(float old) { 
....................   char s[20]; 
....................   float f; 
....................  
....................   sprintf(s, "%f", old); 
....................  
....................   get_string(s, 20); 
....................   f = atof(s); 
....................   return(f); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................    #define get_int()       get_Int16() 
....................    #define get_intEdit()   get_Int16Edit() 
....................    #define get_long()      get_Int32() 
....................    #define get_longEdit()  get_Int32Edit() 
.................... #else 
....................    #define get_int()       get_Int8() 
....................    #define get_intEdit()   get_Int8Edit() 
....................    #define get_long()      get_Int16() 
....................    #define get_longEdit()  get_Int16Edit() 
.................... #endif 
....................  
.................... #endif   //_STDLIB 
....................  
.................... #endif   //__INPUT_C__ 
....................  
.................... #include <2402.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a MicroChip 24LC02B configured for a x8 org         //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);  Read the byte d from the address a     //// 
.................... ////                                                                   //// 
.................... ////   b = ext_eeprom_ready();  Returns TRUE if the eeprom is ready    //// 
.................... ////                            to receive opcodes                     //// 
.................... ////                                                                   //// 
.................... ////   The main program may define EEPROM_SDA                          //// 
.................... ////   and EEPROM_SCL to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... ////                            Pin Layout                             //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////   |                                                         |     //// 
.................... ////   | 1: NC   Not Connected | 8: VCC   +5V                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 2: NC   Not Connected | 7: WP    GND                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 3: NC   Not Connected | 6: SCL   EEPROM_SCL and Pull-Up |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 4: VSS  GND           | 5: SDA   EEPROM_SDA and Pull-Up |     //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
....................  
.................... //#use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS BYTE 
.................... #define EEPROM_SIZE    256 
....................  
.................... void init_ext_eeprom() { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
.................... } 
....................  
.................... BOOLEAN ext_eeprom_ready() { 
....................    int1 ack; 
....................    i2c_start();            // If the write command is acknowledged, 
*
0474:  BSF    FC5.0
0476:  BTFSC  FC5.0
0478:  BRA    0476
....................    ack = i2c_write(0xa0);  // then the device is ready. 
047A:  MOVLW  A0
047C:  MOVLB  2
047E:  MOVWF  x51
0480:  MOVLB  0
0482:  RCALL  0458
0484:  MOVF   01,W
0486:  MOVLB  2
0488:  BCF    x50.0
048A:  BTFSC  01.0
048C:  BSF    x50.0
....................    i2c_stop(); 
048E:  BSF    FC5.2
0490:  BTFSC  FC5.2
0492:  BRA    0490
....................    return !ack; 
0494:  MOVLW  00
0496:  BTFSS  x50.0
0498:  MOVLW  01
049A:  MOVWF  01
049C:  MOVLB  0
049E:  RETURN 0
.................... } 
....................  
.................... void write_ext_eeprom(BYTE address, BYTE data) { 
....................    while(!ext_eeprom_ready()); 
*
4862:  CALL   0474
4866:  MOVF   01,F
4868:  BZ    4862
....................    i2c_start(); 
486A:  BSF    FC5.0
486C:  BTFSC  FC5.0
486E:  BRA    486C
....................    i2c_write(0xa0); 
4870:  MOVLW  A0
4872:  MOVLB  2
4874:  MOVWF  x51
4876:  MOVLB  0
4878:  CALL   0458
....................    i2c_write(address); 
487C:  MOVFF  24E,251
4880:  CALL   0458
....................    i2c_write(data); 
4884:  MOVFF  24F,251
4888:  CALL   0458
....................    i2c_stop(); 
488C:  BSF    FC5.2
488E:  BTFSC  FC5.2
4890:  BRA    488E
4892:  RETURN 0
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(BYTE address) { 
....................    BYTE data; 
....................  
....................    while(!ext_eeprom_ready()); 
*
04BE:  RCALL  0474
04C0:  MOVF   01,F
04C2:  BZ    04BE
....................    i2c_start(); 
04C4:  BSF    FC5.0
04C6:  BTFSC  FC5.0
04C8:  BRA    04C6
....................    i2c_write(0xa0); 
04CA:  MOVLW  A0
04CC:  MOVLB  2
04CE:  MOVWF  x51
04D0:  MOVLB  0
04D2:  RCALL  0458
....................    i2c_write(address); 
04D4:  MOVFF  24E,251
04D8:  RCALL  0458
....................    i2c_start(); 
04DA:  BSF    FC5.1
04DC:  BTFSC  FC5.1
04DE:  BRA    04DC
....................    i2c_write(0xa1); 
04E0:  MOVLW  A1
04E2:  MOVLB  2
04E4:  MOVWF  x51
04E6:  MOVLB  0
04E8:  RCALL  0458
....................    data=i2c_read(0); 
04EA:  CLRF   00
04EC:  BRA    04A0
04EE:  MOVFF  01,24F
....................    i2c_stop(); 
04F2:  BSF    FC5.2
04F4:  BTFSC  FC5.2
04F6:  BRA    04F4
....................    return(data); 
04F8:  MOVLB  2
04FA:  MOVFF  24F,01
04FE:  MOVLB  0
0500:  RETURN 0
.................... } 
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... char sifre[131]={}; 
....................  
.................... const float KARTUS =169043.48 ;// KARTUS OMRU sn cinsinden -- 2817.4 dk ya ESITTIR 
....................  
.................... int kesme=0; 
....................  
.................... int32 i=0; 
.................... int degisken2=0,degisken3=0,degisken4=0,degisken5=0,degisken6=0,degisken7=0,degisken8=0; 
.................... int coz,flag,key=3; 
.................... int h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13,h14,h15,h16,h17,h18,h19,h20,h21,h22,h23,h24,h25,h26,h27,h28,h29,h30,h31; 
.................... int h32,h33,h34,h35,h36,h37,h38,h39,h40,h41,h42,h43,h44,h45,h46,h47,h48,h49,h50,h51,h52,h53,h54,h55,h56,h57,h58,h59,h60,h61,h62; 
.................... int h63,h64,h65,h66,h67,h68,h69,h70,h71,h72,h73,h74,h75,h76,h77,h78,h79,h80,h81,h82,h83,h84,h85,h86,h87,h88,h89; 
.................... int h90,h91,h92,h93,h94,h95,h96,h97,h98,h99,h100,h101,h102,h103,h104,h105,h106,h107,h108,h109,h110,h111,h112,h113; 
.................... int h114,h115,h116,h117,h118,h119,h120,h121,h122,h123,h124,h125,h126,h127,h128,h129,h130; 
.................... int ptesibassaat1,ptesibasdk1,ptesibitsaat1,ptesibitdk1,ptesibassaat2,ptesibasdk2,ptesibitsaat2,ptesibitdk2; 
.................... int salibassaat1,salibasdk1,salibitsaat1,salibitdk1,salibassaat2,salibasdk2,salibitsaat2,salibitdk2; 
.................... int carbassaat1,carbasdk1,carbitsaat1,carbitdk1,carbassaat2,carbasdk2,carbitsaat2,carbitdk2; 
.................... int perbassaat1,perbasdk1,perbitsaat1,perbitdk1,perbassaat2,perbasdk2,perbitsaat2,perbitdk2; 
.................... int cumabassaat1,cumabasdk1,cumabitsaat1,cumabitdk1,cumabassaat2,cumabasdk2,cumabitsaat2,cumabitdk2; 
.................... int ctesibassaat1,ctesibasdk1,ctesibitsaat1,ctesibitdk1,ctesibassaat2,ctesibasdk2,ctesibitsaat2,ctesibitdk2; 
.................... int pazarbassaat1,pazarbasdk1,pazarbitsaat1,pazarbitdk1,pazarbassaat2,pazarbasdk2,pazarbitsaat2,pazarbitdk2,bugunsaat,bugundk,day; 
.................... void gunal(void);void bugun (void); 
.................... int sifrecoz(char c); 
.................... void saatcevir(void); 
.................... void tanimla(void); 
.................... void pazartesi1(void);void sali1(void);void carsamba1(void);void persembe1(void); 
.................... void cuma1(void);void cumartesi1(void);void pazar1(void); 
.................... void pazartesi2(void);void sali2(void);void carsamba2(void);void persembe2(void); 
.................... void cuma2(void);void cumartesi2(void);void pazar2(void); 
.................... void ortalama(void); 
.................... void gunkontrol(void); 
.................... void toplama(void); 
.................... void calistir(void); 
.................... void sifirla(int gn); 
.................... int farkal(int dk); 
.................... void bekleme(void); 
.................... void calis(void); 
.................... void ata(int t); 
.................... void eeprom(); 
.................... void pazartesi_test(); 
.................... void sali_test(); 
.................... void carsamba_test(); 
.................... void persembe_test(); 
.................... void cuma_test(); 
.................... void cumartesi_test(); 
.................... void pazar_test(); 
.................... signed int32 ptesisaat,ptesidk,salisaat,salidk,carsaat,cardk,persaat,perdk,cumasaat,cumadk,ctesisaat,ctesidk,pazarsaat,pazardk; 
.................... signed int32 ptesisaat2,ptesidk2,salisaat2,salidk2,carsaat2,cardk2,persaat2,perdk2,cumasaat2,cumadk2,ctesisaat2,ctesidk2,pazarsaat2,pazardk2; 
.................... signed int32 toplamsn,toplamdk; 
.................... signed int32 ptesitoplamdk,salitoplamdk,cartoplamdk,pertoplamdk,cumatoplamdk,ctesitoplamdk,pazartoplamdk ; 
.................... signed int32 ptesitoplamdk2,salitoplamdk2,cartoplamdk2,pertoplamdk2,cumatoplamdk2,ctesitoplamdk2,pazartoplamdk2; 
.................... float tetik,bekle,oran,pasifsn; 
.................... unsigned int32 sn1,sn3; 
.................... unsigned int32 sayi=0; 
.................... //unsigned int32 sn2,sn4,sayi; 
.................... int zet=20; 
.................... void run1(void); void run2(void); 
.................... int16 s1,s2,s3,s4,s5; 
.................... int1 eeprom_hazir; 
.................... int eeprom_test; 
....................  
....................  
.................... byte saniye,dakika,saat,gun,ay,yil,haftanin_gunu; 
.................... byte degisken=0; 
....................  
.................... unsigned int son,anliktmr; 
.................... #define settmr 7 
....................  
.................... #int_timer0 
.................... void timer0_kesmesi() 
.................... {  
....................   if(sayi==0) 
*
00BA:  MOVLB  2
00BC:  MOVF   x31,F
00BE:  BNZ   00CE
00C0:  MOVF   x32,F
00C2:  BNZ   00CE
00C4:  MOVF   x33,F
00C6:  BNZ   00CE
00C8:  MOVF   x34,F
00CA:  BNZ   00CE
....................   { 
....................     output_high(pin_b0); 
00CC:  BSF    F8A.0
....................   } 
....................    
....................   sayi++; 
00CE:  MOVLW  01
00D0:  ADDWF  x31,F
00D2:  BTFSC  FD8.0
00D4:  INCF   x32,F
00D6:  BTFSC  FD8.2
00D8:  INCF   x33,F
00DA:  BTFSC  FD8.2
00DC:  INCF   x34,F
....................    
....................   if(sayi==sn3) 
00DE:  MOVF   x2D,W
00E0:  SUBWF  x31,W
00E2:  BNZ   00F8
00E4:  MOVF   x2E,W
00E6:  SUBWF  x32,W
00E8:  BNZ   00F8
00EA:  MOVF   x2F,W
00EC:  SUBWF  x33,W
00EE:  BNZ   00F8
00F0:  MOVF   x30,W
00F2:  SUBWF  x34,W
00F4:  BNZ   00F8
....................   { 
....................     output_low(pin_b0); 
00F6:  BCF    F8A.0
....................   } 
....................    
....................   if(sayi==120000) 
00F8:  MOVF   x31,W
00FA:  SUBLW  C0
00FC:  BNZ   0114
00FE:  MOVF   x32,W
0100:  SUBLW  D4
0102:  BNZ   0114
0104:  DECFSZ x33,W
0106:  BRA    0114
0108:  MOVF   x34,F
010A:  BNZ   0114
....................   { 
....................     sayi=0; 
010C:  CLRF   x34
010E:  CLRF   x33
0110:  CLRF   x32
0112:  CLRF   x31
....................   } 
....................    
....................   anliktmr=get_timer0(); 
0114:  MOVF   FD6,W
0116:  MOVWF  x4B
....................   son=anliktmr+settmr;  
0118:  MOVLW  07
011A:  ADDWF  x4B,W
011C:  MOVWF  x4A
....................   set_timer0(son);  
011E:  CLRF   FD7
0120:  MOVFF  24A,FD6
.................... } 
....................  
0124:  BCF    FF2.2
0126:  MOVLB  0
0128:  GOTO   006C
.................... #int_rda 
.................... void serihaberlesme() 
.................... {   
....................    key=0; 
012C:  CLRF   xAA
....................    sifre[i]=getc(); 
012E:  MOVLW  19
0130:  ADDWF  x9D,W
0132:  MOVWF  FE9
0134:  MOVLW  00
0136:  ADDWFC x9E,W
0138:  MOVWF  FEA
013A:  BTFSS  F9E.5
013C:  BRA    013A
013E:  MOVFF  FAE,FEF
....................    i++; 
0142:  MOVLW  01
0144:  ADDWF  x9D,F
0146:  BTFSC  FD8.0
0148:  INCF   x9E,F
014A:  BTFSC  FD8.2
014C:  INCF   x9F,F
014E:  BTFSC  FD8.2
0150:  INCF   xA0,F
....................    if(i==131) 
0152:  MOVF   x9D,W
0154:  SUBLW  83
0156:  BNZ   017E
0158:  MOVF   x9E,F
015A:  BNZ   017E
015C:  MOVF   x9F,F
015E:  BNZ   017E
0160:  MOVF   xA0,F
0162:  BNZ   017E
....................    {   
....................       i=0;    
0164:  CLRF   xA0
0166:  CLRF   x9F
0168:  CLRF   x9E
016A:  CLRF   x9D
....................       zet=2; 
016C:  MOVLW  02
016E:  MOVLB  2
0170:  MOVWF  x35
....................       kesme=1; 
0172:  MOVLW  01
0174:  MOVLB  0
0176:  MOVWF  x9C
....................       key=1;  
0178:  MOVWF  xAA
....................       clear_interrupt(INT_RDA); 
017A:  MOVF   FAE,W
....................       disable_interrupts(int_rda);  
017C:  BCF    F9D.5
....................    } 
017E:  BCF    F9E.5
0180:  GOTO   006C
.................... } 
....................  
....................  
.................... void main() 
*
5086:  CLRF   FF8
5088:  BCF    FD0.7
508A:  BSF    07.7
508C:  MOVLW  60
508E:  MOVWF  FD3
5090:  CLRF   F9B
5092:  MOVF   FD3,W
5094:  BCF    FB8.3
5096:  MOVLW  19
5098:  MOVWF  FAF
509A:  MOVLW  A6
509C:  MOVWF  FAC
509E:  MOVLW  90
50A0:  MOVWF  FAB
50A2:  NOP   
50A4:  NOP   
50A6:  BSF    F94.3
50A8:  BSF    F94.4
50AA:  MOVLW  09
50AC:  MOVWF  FC8
50AE:  MOVLW  28
50B0:  MOVWF  FC6
50B2:  BSF    FC7.7
50B4:  BCF    FC7.6
50B6:  CLRF   x9C
50B8:  CLRF   xA0
50BA:  CLRF   x9F
50BC:  CLRF   x9E
50BE:  CLRF   x9D
50C0:  CLRF   xA1
50C2:  CLRF   xA2
50C4:  CLRF   xA3
50C6:  CLRF   xA4
50C8:  CLRF   xA5
50CA:  CLRF   xA6
50CC:  CLRF   xA7
50CE:  MOVLW  03
50D0:  MOVWF  xAA
50D2:  MOVLB  2
50D4:  CLRF   x34
50D6:  CLRF   x33
50D8:  CLRF   x32
50DA:  CLRF   x31
50DC:  MOVLW  14
50DE:  MOVWF  x35
50E0:  CLRF   x49
50E2:  CLRF   x4D
50E4:  CLRF   x4C
50E6:  MOVF   FC1,W
50E8:  ANDLW  C0
50EA:  IORLW  0F
50EC:  MOVWF  FC1
50EE:  MOVLW  07
50F0:  MOVWF  FB4
50F2:  BRA    50FA
50F4:  DATA 83,40
50F6:  DATA 19,00
50F8:  DATA 00,00
50FA:  MOVLW  00
50FC:  MOVWF  FF8
50FE:  MOVLW  50
5100:  MOVWF  FF7
5102:  MOVLW  F4
5104:  MOVWF  FF6
5106:  TBLRD*+
5108:  MOVF   FF5,W
510A:  MOVWF  00
510C:  XORLW  00
510E:  BZ    5136
5110:  TBLRD*+
5112:  MOVF   FF5,W
5114:  MOVWF  01
5116:  BTFSC  FE8.7
5118:  BRA    5124
511A:  ANDLW  0F
511C:  MOVWF  FEA
511E:  TBLRD*+
5120:  MOVFF  FF5,FE9
5124:  BTFSC  01.6
5126:  TBLRD*+
5128:  BTFSS  01.6
512A:  TBLRD*+
512C:  MOVFF  FF5,FEE
5130:  DCFSNZ 00,F
5132:  BRA    5106
5134:  BRA    5128
5136:  CLRF   FF8
.................... { 
.................... // setup_psp(PSP_DISABLED); 
.................... setup_oscillator(OSC_4MHZ); 
5138:  MOVLW  60
513A:  MOVWF  FD3
513C:  CLRF   F9B
513E:  MOVF   FD3,W
.................... setup_adc_ports(NO_ANALOGS); 
5140:  MOVF   FC1,W
5142:  ANDLW  C0
5144:  IORLW  0F
5146:  MOVWF  FC1
.................... setup_adc(ADC_OFF); 
5148:  BCF    FC2.0
.................... setup_CCP1(CCP_OFF); 
514A:  MOVLW  F0
514C:  ANDWF  FBD,F
.................... setup_CCP2(CCP_OFF); 
514E:  ANDWF  FBA,F
.................... lcd_init();   
5150:  MOVLB  0
5152:  GOTO   02F4
.................... enable_interrupts(GLOBAL); 
5156:  MOVLW  C0
5158:  IORWF  FF2,F
.................... enable_interrupts(int_rda); 
515A:  BSF    F9D.5
.................... set_tris_d(0x00); 
515C:  MOVLW  00
515E:  MOVWF  F95
.................... output_d(0x00); 
5160:  CLRF   F8C
.................... set_tris_b(0x00); 
5162:  MOVWF  F93
.................... output_b(0x00); 
5164:  CLRF   F8A
.................... rtc_init(); 
5166:  GOTO   040C
.................... setup_timer_0(RTCC_INTERNAL | RTCC_DIV_4 | RTCC_8_BIT); 
516A:  MOVLW  C1
516C:  MOVWF  FD5
.................... set_timer0(13); 
516E:  CLRF   FD7
5170:  MOVLW  0D
5172:  MOVWF  FD6
....................      
.................... baslangic:   
.................... bit_clear(eeprom_test,0); 
5174:  MOVLB  2
5176:  BCF    x41.0
.................... //disable_interrupts(int_timer0); 
.................... INTCON.T0IE=0; 
5178:  BCF    FF2.5
.................... output_high(pin_b0); 
517A:  BSF    F8A.0
.................... delay_ms(500); 
517C:  MOVLW  02
517E:  MOVWF  x4E
5180:  MOVLW  FA
5182:  MOVWF  x5B
5184:  MOVLB  0
5186:  CALL   0192
518A:  MOVLB  2
518C:  DECFSZ x4E,F
518E:  BRA    5180
.................... output_low(pin_b0); 
5190:  BCF    F8A.0
.................... degisken=read_ext_eeprom(171); 
5192:  MOVLW  AB
5194:  MOVWF  x4E
5196:  MOVLB  0
5198:  CALL   04BE
519C:  MOVFF  01,249
.................... delay_ms(20); 
51A0:  MOVLW  14
51A2:  MOVLB  2
51A4:  MOVWF  x5B
51A6:  MOVLB  0
51A8:  CALL   0192
....................     
.................... while(read_ext_eeprom(171)<32) 
51AC:  MOVLW  AB
51AE:  MOVLB  2
51B0:  MOVWF  x4E
51B2:  MOVLB  0
51B4:  CALL   04BE
51B8:  MOVF   01,W
51BA:  SUBLW  1F
51BC:  BTFSS  FD8.0
51BE:  GOTO   753A
.................... {     
....................    enable_interrupts(int_rda); 
51C2:  BSF    F9D.5
....................     
.................... if(key==1) 
51C4:  DECFSZ xAA,W
51C6:  BRA    53B4
.................... {  
....................    tanimla(); 
51C8:  GOTO   05A8
....................    pazartesi1();  
51CC:  GOTO   0CFC
....................    pazartesi2(); 
51D0:  GOTO   0DE0
....................    sali1(); 
51D4:  GOTO   0EC4
....................    sali2(); 
51D8:  GOTO   0FA8
....................    carsamba1(); 
51DC:  GOTO   108C
....................    carsamba2(); 
51E0:  GOTO   1170
....................    persembe1(); 
51E4:  GOTO   1254
....................    persembe2(); 
51E8:  GOTO   1338
....................    cuma1(); 
51EC:  GOTO   141C
....................    cuma2(); 
51F0:  GOTO   1500
....................    cumartesi1(); 
51F4:  GOTO   15E0
....................    cumartesi2(); 
51F8:  GOTO   16BE
....................    pazar1(); 
51FC:  GOTO   179C
....................    pazar2(); 
5200:  GOTO   187A
....................    toplama();  //yorum satýrýna alýnabilir nusrette deðil fatihte yorum satýrýndaydý.        
5204:  CALL   24EE
....................    //set_timer0(13);  //yoruma alýnabilir 
....................    sayi=0; 
5208:  MOVLB  2
520A:  CLRF   x34
520C:  CLRF   x33
520E:  CLRF   x32
5210:  CLRF   x31
....................  
....................    if(zet==2) 
5212:  MOVF   x35,W
5214:  SUBLW  02
5216:  BTFSS  FD8.2
5218:  BRA    53AE
....................    {   
....................    bugun(); 
521A:  MOVLB  0
521C:  GOTO   385C
....................    rtc_set_datetime(1,1,22,day,bugunsaat,bugundk); 
5220:  MOVLW  01
5222:  MOVLB  2
5224:  MOVWF  x4E
5226:  MOVWF  x4F
5228:  MOVLW  16
522A:  MOVWF  x50
522C:  MOVFF  168,251
5230:  MOVFF  166,252
5234:  MOVFF  167,253
5238:  MOVLB  0
523A:  GOTO   38D8
....................                
....................    write_eeprom(80,0);//kesme yapýldýgýna dair ROM a deger yazýldý  
523E:  MOVF   FF2,W
5240:  MOVWF  00
5242:  BCF    FF2.7
5244:  MOVLW  50
5246:  MOVWF  FA9
5248:  CLRF   FA8
524A:  BCF    FA6.6
524C:  BCF    FA6.7
524E:  BSF    FA6.2
5250:  MOVLB  F
5252:  MOVLW  55
5254:  MOVWF  FA7
5256:  MOVLW  AA
5258:  MOVWF  FA7
525A:  BSF    FA6.1
525C:  BTFSC  FA6.1
525E:  BRA    525C
5260:  BCF    FA6.2
5262:  MOVF   00,W
5264:  IORWF  FF2,F
....................    delay_ms(15); 
5266:  MOVLW  0F
5268:  MOVLB  2
526A:  MOVWF  x5B
526C:  MOVLB  0
526E:  CALL   0192
....................    write_eeprom(81,0);//kesme yapýldýgýna dair ROM a deger yazýldý  
5272:  MOVF   FF2,W
5274:  MOVWF  00
5276:  BCF    FF2.7
5278:  MOVLW  51
527A:  MOVWF  FA9
527C:  CLRF   FA8
527E:  BCF    FA6.6
5280:  BCF    FA6.7
5282:  BSF    FA6.2
5284:  MOVLB  F
5286:  MOVLW  55
5288:  MOVWF  FA7
528A:  MOVLW  AA
528C:  MOVWF  FA7
528E:  BSF    FA6.1
5290:  BTFSC  FA6.1
5292:  BRA    5290
5294:  BCF    FA6.2
5296:  MOVF   00,W
5298:  IORWF  FF2,F
....................    delay_ms(15); 
529A:  MOVLW  0F
529C:  MOVLB  2
529E:  MOVWF  x5B
52A0:  MOVLB  0
52A2:  CALL   0192
....................    write_eeprom(82,0);//kesme yapýldýgýna dair ROM a deger yazýldý  
52A6:  MOVF   FF2,W
52A8:  MOVWF  00
52AA:  BCF    FF2.7
52AC:  MOVLW  52
52AE:  MOVWF  FA9
52B0:  CLRF   FA8
52B2:  BCF    FA6.6
52B4:  BCF    FA6.7
52B6:  BSF    FA6.2
52B8:  MOVLB  F
52BA:  MOVLW  55
52BC:  MOVWF  FA7
52BE:  MOVLW  AA
52C0:  MOVWF  FA7
52C2:  BSF    FA6.1
52C4:  BTFSC  FA6.1
52C6:  BRA    52C4
52C8:  BCF    FA6.2
52CA:  MOVF   00,W
52CC:  IORWF  FF2,F
....................    delay_ms(15); 
52CE:  MOVLW  0F
52D0:  MOVLB  2
52D2:  MOVWF  x5B
52D4:  MOVLB  0
52D6:  CALL   0192
....................    write_eeprom(83,0);//kesme yapýldýgýna dair ROM a deger yazýldý  
52DA:  MOVF   FF2,W
52DC:  MOVWF  00
52DE:  BCF    FF2.7
52E0:  MOVLW  53
52E2:  MOVWF  FA9
52E4:  CLRF   FA8
52E6:  BCF    FA6.6
52E8:  BCF    FA6.7
52EA:  BSF    FA6.2
52EC:  MOVLB  F
52EE:  MOVLW  55
52F0:  MOVWF  FA7
52F2:  MOVLW  AA
52F4:  MOVWF  FA7
52F6:  BSF    FA6.1
52F8:  BTFSC  FA6.1
52FA:  BRA    52F8
52FC:  BCF    FA6.2
52FE:  MOVF   00,W
5300:  IORWF  FF2,F
....................    delay_ms(15); 
5302:  MOVLW  0F
5304:  MOVLB  2
5306:  MOVWF  x5B
5308:  MOVLB  0
530A:  CALL   0192
....................    write_eeprom(84,0);//kesme yapýldýgýna dair ROM a deger yazýldý  
530E:  MOVF   FF2,W
5310:  MOVWF  00
5312:  BCF    FF2.7
5314:  MOVLW  54
5316:  MOVWF  FA9
5318:  CLRF   FA8
531A:  BCF    FA6.6
531C:  BCF    FA6.7
531E:  BSF    FA6.2
5320:  MOVLB  F
5322:  MOVLW  55
5324:  MOVWF  FA7
5326:  MOVLW  AA
5328:  MOVWF  FA7
532A:  BSF    FA6.1
532C:  BTFSC  FA6.1
532E:  BRA    532C
5330:  BCF    FA6.2
5332:  MOVF   00,W
5334:  IORWF  FF2,F
....................    delay_ms(15); 
5336:  MOVLW  0F
5338:  MOVLB  2
533A:  MOVWF  x5B
533C:  MOVLB  0
533E:  CALL   0192
....................    write_eeprom(85,0);//kesme yapýldýgýna dair ROM a deger yazýldý  
5342:  MOVF   FF2,W
5344:  MOVWF  00
5346:  BCF    FF2.7
5348:  MOVLW  55
534A:  MOVWF  FA9
534C:  CLRF   FA8
534E:  BCF    FA6.6
5350:  BCF    FA6.7
5352:  BSF    FA6.2
5354:  MOVLB  F
5356:  MOVWF  FA7
5358:  MOVLW  AA
535A:  MOVWF  FA7
535C:  BSF    FA6.1
535E:  BTFSC  FA6.1
5360:  BRA    535E
5362:  BCF    FA6.2
5364:  MOVF   00,W
5366:  IORWF  FF2,F
....................    delay_ms(15); 
5368:  MOVLW  0F
536A:  MOVLB  2
536C:  MOVWF  x5B
536E:  MOVLB  0
5370:  CALL   0192
....................    write_eeprom(86,0);//kesme yapýldýgýna dair ROM a deger yazýldý 
5374:  MOVF   FF2,W
5376:  MOVWF  00
5378:  BCF    FF2.7
537A:  MOVLW  56
537C:  MOVWF  FA9
537E:  CLRF   FA8
5380:  BCF    FA6.6
5382:  BCF    FA6.7
5384:  BSF    FA6.2
5386:  MOVLB  F
5388:  MOVLW  55
538A:  MOVWF  FA7
538C:  MOVLW  AA
538E:  MOVWF  FA7
5390:  BSF    FA6.1
5392:  BTFSC  FA6.1
5394:  BRA    5392
5396:  BCF    FA6.2
5398:  MOVF   00,W
539A:  IORWF  FF2,F
....................    delay_ms(15); 
539C:  MOVLW  0F
539E:  MOVLB  2
53A0:  MOVWF  x5B
53A2:  MOVLB  0
53A4:  CALL   0192
....................    zet=10; 
53A8:  MOVLW  0A
53AA:  MOVLB  2
53AC:  MOVWF  x35
....................    }           
....................    key=3; 
53AE:  MOVLW  03
53B0:  MOVLB  0
53B2:  MOVWF  xAA
.................... } 
....................        
....................    while(key==3) 
53B4:  MOVF   xAA,W
53B6:  SUBLW  03
53B8:  BTFSS  FD8.2
53BA:  GOTO   7536
....................    {         
....................       rtc_get_time(saat,dakika,saniye); 
....................       rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................       toplama(); 
*
5482:  CALL   24EE
....................  
.................... //******************************************************* PAZARTESI CALISMA SARTI **********************************************************         
....................       if(haftanin_gunu==1) 
5486:  MOVLB  2
5488:  DECFSZ x48,W
548A:  BRA    58FE
....................       {  
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu);  
....................          delay_ms(30);     
*
554E:  MOVLW  1E
5550:  MOVLB  2
5552:  MOVWF  x5B
5554:  MOVLB  0
5556:  CALL   0192
....................          ata(1);//S1-S2-S3-S4-S5 hesaplanýr 
555A:  MOVLW  01
555C:  MOVLB  2
555E:  MOVWF  x4E
5560:  MOVLB  0
5562:  CALL   39DA
....................  
....................          flag=INTCON.T0IE; 
5566:  CLRF   xA9
5568:  BTFSC  FF2.5
556A:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
556C:  MOVLW  0C
556E:  MOVLB  2
5570:  MOVWF  x5A
5572:  MOVLB  0
5574:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
5578:  MOVLW  01
557A:  MOVLB  2
557C:  MOVWF  x5B
557E:  MOVWF  x5C
5580:  MOVLB  0
5582:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
5586:  MOVLW  10
5588:  MOVWF  FE9
558A:  MOVFF  237,24F
558E:  MOVFF  236,24E
5592:  CALL   44FC
5596:  MOVLW  20
5598:  MOVLB  2
559A:  MOVWF  x5A
559C:  MOVLB  0
559E:  CALL   4488
55A2:  MOVLW  10
55A4:  MOVWF  FE9
55A6:  MOVFF  23B,24F
55AA:  MOVFF  23A,24E
55AE:  CALL   44FC
55B2:  MOVLW  20
55B4:  MOVLB  2
55B6:  MOVWF  x5A
55B8:  MOVLB  0
55BA:  CALL   4488
55BE:  MOVLW  10
55C0:  MOVWF  FE9
55C2:  MOVFF  239,24F
55C6:  MOVFF  238,24E
55CA:  CALL   44FC
55CE:  MOVLW  20
55D0:  MOVLB  2
55D2:  MOVWF  x5A
55D4:  MOVLB  0
55D6:  CALL   4488
55DA:  MOVFF  248,24E
55DE:  MOVLW  18
55E0:  MOVLB  2
55E2:  MOVWF  x4F
55E4:  MOVLB  0
55E6:  CALL   45FA
55EA:  MOVLW  20
55EC:  MOVLB  2
55EE:  MOVWF  x5A
55F0:  MOVLB  0
55F2:  CALL   4488
55F6:  MOVFF  A9,24E
55FA:  MOVLW  18
55FC:  MOVLB  2
55FE:  MOVWF  x4F
5600:  MOVLB  0
5602:  CALL   45FA
....................          lcd_gotoxy(1,2); 
5606:  MOVLW  01
5608:  MOVLB  2
560A:  MOVWF  x5B
560C:  MOVLW  02
560E:  MOVWF  x5C
5610:  MOVLB  0
5612:  CALL   4460
....................          printf(lcd_putc,"%ld %ld",sn1,sn3); 
5616:  MOVLW  41
5618:  MOVWF  FE9
561A:  MOVFF  22C,251
561E:  MOVFF  22B,250
5622:  MOVFF  22A,24F
5626:  MOVFF  229,24E
562A:  CALL   474E
562E:  MOVLW  20
5630:  MOVLB  2
5632:  MOVWF  x5A
5634:  MOVLB  0
5636:  CALL   4488
563A:  MOVLW  41
563C:  MOVWF  FE9
563E:  MOVFF  230,251
5642:  MOVFF  22F,250
5646:  MOVFF  22E,24F
564A:  MOVFF  22D,24E
564E:  CALL   474E
....................          delay_ms(100); 
5652:  MOVLW  64
5654:  MOVLB  2
5656:  MOVWF  x5B
5658:  MOVLB  0
565A:  CALL   0192
....................  
....................          if(read_eeprom(0)==1 && read_eeprom(1)==0)   //PAZARTESI 1 ACIK-PAZARTESI 2 KAPALI ********************************************* 
565E:  MOVFF  FF2,24E
5662:  BCF    FF2.7
5664:  CLRF   FA9
5666:  BCF    FA6.6
5668:  BCF    FA6.7
566A:  BSF    FA6.0
566C:  MOVF   FA8,W
566E:  MOVLB  2
5670:  BTFSC  x4E.7
5672:  BSF    FF2.7
5674:  SUBLW  01
5676:  BNZ   5706
5678:  MOVFF  FF2,24F
567C:  BCF    FF2.7
567E:  MOVLW  01
5680:  MOVWF  FA9
5682:  BCF    FA6.6
5684:  BCF    FA6.7
5686:  BSF    FA6.0
5688:  MOVF   FA8,W
568A:  BTFSC  x4F.7
568C:  BSF    FF2.7
568E:  XORLW  00
5690:  BNZ   5706
....................          {      
....................             pazartesi_test();      
5692:  MOVLB  0
5694:  CALL   4A66
....................             if(bit_test(eeprom_test,1)==1) 
5698:  MOVLB  2
569A:  BTFSS  x41.1
569C:  BRA    56A2
....................             { 
....................                bit_clear(eeprom_test,1); 
569E:  BCF    x41.1
....................                goto baslangic; 
56A0:  BRA    5176
....................             } 
....................                      
....................             if(((s1) <= (s3)) && ((s3) < (s2))) 
56A2:  MOVF   x37,W
56A4:  SUBWF  x3B,W
56A6:  BNC   56E4
56A8:  BNZ   56B0
56AA:  MOVF   x36,W
56AC:  SUBWF  x3A,W
56AE:  BNC   56E4
56B0:  MOVF   x3B,W
56B2:  SUBWF  x39,W
56B4:  BNC   56E4
56B6:  BNZ   56BE
56B8:  MOVF   x38,W
56BA:  SUBWF  x3A,W
56BC:  BC    56E4
....................             {                       
....................                eeprom(); 
56BE:  MOVLB  0
56C0:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
56C4:  MOVLB  2
56C6:  BTFSS  x41.0
56C8:  BRA    56CE
....................                { 
....................                   bit_clear(eeprom_test,0); 
56CA:  BCF    x41.0
....................                   goto baslangic; 
56CC:  BRA    5176
....................                } 
....................                       
....................                calistir();   
56CE:  MOVLB  0
56D0:  CALL   4B8E
....................  
....................                if(kesme==1) 
56D4:  DECFSZ x9C,W
56D6:  BRA    56E0
....................                {  
....................                   kesme=0; 
56D8:  CLRF   x9C
....................                   key=1; 
56DA:  MOVLW  01
56DC:  MOVWF  xAA
....................                   goto baslangic;     
56DE:  BRA    5174
....................                } 
....................             }  
56E0:  BRA    56F6
56E2:  MOVLB  2
....................             else 
....................             { 
....................                //disable_interrupts(int_timer0); 
....................                if(INTCON.T0IE==1) 
56E4:  BTFSS  FF2.5
56E6:  BRA    56F4
....................                { 
....................                   INTCON.T0IE=0; 
56E8:  BCF    FF2.5
....................                   output_low(pin_b0); 
56EA:  BCF    F8A.0
....................                   sayi=0; 
56EC:  CLRF   x34
56EE:  CLRF   x33
56F0:  CLRF   x32
56F2:  CLRF   x31
56F4:  MOVLB  0
....................                } 
....................                //set_timer0(13); 
....................             } 
....................         
....................             if(kesme==1) 
56F6:  DECFSZ x9C,W
56F8:  BRA    5702
....................             {  
....................                kesme=0; 
56FA:  CLRF   x9C
....................                key=1; 
56FC:  MOVLW  01
56FE:  MOVWF  xAA
....................                goto baslangic; 
5700:  BRA    5174
....................             }    
....................          } 
5702:  BRA    58F6
5704:  MOVLB  2
....................            
....................          else if(read_eeprom(0)==0 && read_eeprom(1)==1)   //PAZARTESI 1 KAPALI - PAZARTESI 2 ACIK*******************************************  
5706:  MOVFF  FF2,24E
570A:  BCF    FF2.7
570C:  CLRF   FA9
570E:  BCF    FA6.6
5710:  BCF    FA6.7
5712:  BSF    FA6.0
5714:  MOVF   FA8,W
5716:  BTFSC  x4E.7
5718:  BSF    FF2.7
571A:  XORLW  00
571C:  BNZ   57AC
571E:  MOVFF  FF2,24F
5722:  BCF    FF2.7
5724:  MOVLW  01
5726:  MOVWF  FA9
5728:  BCF    FA6.6
572A:  BCF    FA6.7
572C:  BSF    FA6.0
572E:  MOVF   FA8,W
5730:  BTFSC  x4F.7
5732:  BSF    FF2.7
5734:  SUBLW  01
5736:  BNZ   57AC
....................          { 
....................             pazartesi_test(); 
5738:  MOVLB  0
573A:  CALL   4A66
....................                    
....................             if(bit_test(eeprom_test,1)==1) 
573E:  MOVLB  2
5740:  BTFSS  x41.1
5742:  BRA    5748
....................             { 
....................                bit_clear(eeprom_test,1); 
5744:  BCF    x41.1
....................                goto baslangic; 
5746:  BRA    5176
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
5748:  MOVF   x3D,W
574A:  SUBWF  x3B,W
574C:  BNC   578A
574E:  BNZ   5756
5750:  MOVF   x3C,W
5752:  SUBWF  x3A,W
5754:  BNC   578A
5756:  MOVF   x3B,W
5758:  SUBWF  x3F,W
575A:  BNC   578A
575C:  BNZ   5764
575E:  MOVF   x3E,W
5760:  SUBWF  x3A,W
5762:  BC    578A
....................             {     
....................                eeprom(); 
5764:  MOVLB  0
5766:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
576A:  MOVLB  2
576C:  BTFSS  x41.0
576E:  BRA    5774
....................                { 
....................                   bit_clear(eeprom_test,0); 
5770:  BCF    x41.0
....................                   goto baslangic; 
5772:  BRA    5176
....................                } 
....................                calistir();    
5774:  MOVLB  0
5776:  CALL   4B8E
....................                if(kesme==1) 
577A:  DECFSZ x9C,W
577C:  BRA    5786
....................                {  
....................                   kesme=0; 
577E:  CLRF   x9C
....................                   key=1; 
5780:  MOVLW  01
5782:  MOVWF  xAA
....................                   goto baslangic; 
5784:  BRA    5174
....................                } 
....................             } 
5786:  BRA    579C
5788:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
578A:  BTFSS  FF2.5
578C:  BRA    579A
....................                { 
....................                   INTCON.T0IE=0; 
578E:  BCF    FF2.5
....................                   output_low(pin_b0); 
5790:  BCF    F8A.0
....................                   sayi=0; 
5792:  CLRF   x34
5794:  CLRF   x33
5796:  CLRF   x32
5798:  CLRF   x31
579A:  MOVLB  0
....................                } 
....................                //set_timer0(13); 
....................             } 
....................       
....................             if(kesme==1) 
579C:  DECFSZ x9C,W
579E:  BRA    57A8
....................             {  
....................                kesme=0; 
57A0:  CLRF   x9C
....................                key=1; 
57A2:  MOVLW  01
57A4:  MOVWF  xAA
....................                goto baslangic; 
57A6:  BRA    5174
....................             } 
....................          } 
57A8:  BRA    58F6
57AA:  MOVLB  2
....................           
....................          else if(read_eeprom(0)==1 && read_eeprom(1)==1)   //PAZARTESI 1 ACIK - PAZARTESI 2 ACIK **************************************************** 
57AC:  MOVFF  FF2,24E
57B0:  BCF    FF2.7
57B2:  CLRF   FA9
57B4:  BCF    FA6.6
57B6:  BCF    FA6.7
57B8:  BSF    FA6.0
57BA:  MOVF   FA8,W
57BC:  BTFSC  x4E.7
57BE:  BSF    FF2.7
57C0:  SUBLW  01
57C2:  BTFSS  FD8.2
57C4:  BRA    58F8
57C6:  MOVFF  FF2,24F
57CA:  BCF    FF2.7
57CC:  MOVLW  01
57CE:  MOVWF  FA9
57D0:  BCF    FA6.6
57D2:  BCF    FA6.7
57D4:  BSF    FA6.0
57D6:  MOVF   FA8,W
57D8:  BTFSC  x4F.7
57DA:  BSF    FF2.7
57DC:  SUBLW  01
57DE:  BTFSS  FD8.2
57E0:  BRA    58F8
....................          { 
....................             pazartesi_test(); 
57E2:  MOVLB  0
57E4:  CALL   4A66
....................                    
....................             if(bit_test(eeprom_test,1)==1) 
57E8:  MOVLB  2
57EA:  BTFSS  x41.1
57EC:  BRA    57F2
....................             { 
....................                bit_clear(eeprom_test,1); 
57EE:  BCF    x41.1
....................                goto baslangic; 
57F0:  BRA    5176
....................             } 
....................                    
....................             if(((s1) <= (s3) && (s3) <= (s2))) 
57F2:  MOVF   x37,W
57F4:  SUBWF  x3B,W
57F6:  BNC   5832
57F8:  BNZ   5800
57FA:  MOVF   x36,W
57FC:  SUBWF  x3A,W
57FE:  BNC   5832
5800:  MOVF   x3B,W
5802:  SUBWF  x39,W
5804:  BNC   5832
5806:  BNZ   580E
5808:  MOVF   x3A,W
580A:  SUBWF  x38,W
580C:  BNC   5832
....................             { 
....................                eeprom(); 
580E:  MOVLB  0
5810:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
5814:  MOVLB  2
5816:  BTFSS  x41.0
5818:  BRA    581E
....................                { 
....................                   bit_clear(eeprom_test,0); 
581A:  BCF    x41.0
....................                   goto baslangic; 
581C:  BRA    5176
....................                } 
....................                calistir(); 
581E:  MOVLB  0
5820:  CALL   4B8E
....................                if(kesme==1) 
5824:  DECFSZ x9C,W
5826:  BRA    5830
....................                {  
....................                   kesme=0; 
5828:  CLRF   x9C
....................                   key=1; 
582A:  MOVLW  01
582C:  MOVWF  xAA
....................                   goto baslangic; 
582E:  BRA    5174
5830:  MOVLB  2
....................                }     
....................             } 
....................                    
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
5832:  MOVF   x37,W
5834:  SUBWF  x3B,W
5836:  BNC   586C
5838:  BNZ   5840
583A:  MOVF   x3A,W
583C:  SUBWF  x36,W
583E:  BC    586C
5840:  MOVF   x39,W
5842:  SUBWF  x3B,W
5844:  BNC   586C
5846:  BNZ   584E
5848:  MOVF   x3A,W
584A:  SUBWF  x38,W
584C:  BC    586C
584E:  MOVF   x3B,W
5850:  SUBWF  x3D,W
5852:  BNC   586C
5854:  BNZ   585C
5856:  MOVF   x3C,W
5858:  SUBWF  x3A,W
585A:  BC    586C
....................             { 
....................                if(INTCON.T0IE==1) 
585C:  BTFSS  FF2.5
585E:  BRA    586C
....................                { 
....................                   INTCON.T0IE=0; 
5860:  BCF    FF2.5
....................                   output_low(pin_b0); 
5862:  BCF    F8A.0
....................                   sayi=0; 
5864:  CLRF   x34
5866:  CLRF   x33
5868:  CLRF   x32
586A:  CLRF   x31
....................                } 
....................                //set_timer0(13); 
....................             }        
....................             if(kesme==1) 
586C:  MOVLB  0
586E:  DECFSZ x9C,W
5870:  BRA    587A
....................             {  
....................                kesme=0; 
5872:  CLRF   x9C
....................                key=1; 
5874:  MOVLW  01
5876:  MOVWF  xAA
....................                goto baslangic; 
5878:  BRA    5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) <= (s5))) 
587A:  MOVLB  2
587C:  MOVF   x3D,W
587E:  SUBWF  x3B,W
5880:  BNC   58BC
5882:  BNZ   588A
5884:  MOVF   x3C,W
5886:  SUBWF  x3A,W
5888:  BNC   58BC
588A:  MOVF   x3B,W
588C:  SUBWF  x3F,W
588E:  BNC   58BC
5890:  BNZ   5898
5892:  MOVF   x3A,W
5894:  SUBWF  x3E,W
5896:  BNC   58BC
....................             {  
....................                eeprom(); 
5898:  MOVLB  0
589A:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
589E:  MOVLB  2
58A0:  BTFSS  x41.0
58A2:  BRA    58A8
....................                { 
....................                   bit_clear(eeprom_test,0); 
58A4:  BCF    x41.0
....................                   goto baslangic; 
58A6:  BRA    5176
....................                } 
....................                calistir(); 
58A8:  MOVLB  0
58AA:  CALL   4B8E
....................                if(kesme==1) 
58AE:  DECFSZ x9C,W
58B0:  BRA    58BA
....................                {  
....................                   kesme=0; 
58B2:  CLRF   x9C
....................                   key=1; 
58B4:  MOVLW  01
58B6:  MOVWF  xAA
....................                   goto baslangic; 
58B8:  BRA    5174
58BA:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
58BC:  MOVF   x3D,W
58BE:  SUBWF  x3B,W
58C0:  BNC   58E8
58C2:  BNZ   58CA
58C4:  MOVF   x3A,W
58C6:  SUBWF  x3C,W
58C8:  BC    58E8
58CA:  MOVF   x3F,W
58CC:  SUBWF  x3B,W
58CE:  BNC   58E8
58D0:  BNZ   58D8
58D2:  MOVF   x3A,W
58D4:  SUBWF  x3E,W
58D6:  BC    58E8
....................             { 
....................                if(INTCON.T0IE==1) 
58D8:  BTFSS  FF2.5
58DA:  BRA    58E8
....................                { 
....................                   INTCON.T0IE=0; 
58DC:  BCF    FF2.5
....................                   output_low(pin_b0); 
58DE:  BCF    F8A.0
....................                   sayi=0; 
58E0:  CLRF   x34
58E2:  CLRF   x33
58E4:  CLRF   x32
58E6:  CLRF   x31
....................                } 
....................                //set_timer0(13); 
....................             } 
....................                    
....................             if(kesme==1) 
58E8:  MOVLB  0
58EA:  DECFSZ x9C,W
58EC:  BRA    58F6
....................             {  
....................                kesme=0; 
58EE:  CLRF   x9C
....................                key=1; 
58F0:  MOVLW  01
58F2:  MOVWF  xAA
....................                goto baslangic; 
58F4:  BRA    5174
58F6:  MOVLB  2
....................             } 
....................          }    
....................             output_low(pin_b6); 
58F8:  BCF    F8A.6
....................       } 
58FA:  GOTO   7530
....................    
.................... //******************************************************* SALI CALISMA SARTI *****************************************************************           
....................       else if(haftanin_gunu==2) 
58FE:  MOVF   x48,W
5900:  SUBLW  02
5902:  BTFSS  FD8.2
5904:  BRA    5DB2
....................       {   
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................          delay_ms(30); 
*
59C8:  MOVLW  1E
59CA:  MOVLB  2
59CC:  MOVWF  x5B
59CE:  MOVLB  0
59D0:  CALL   0192
....................           
....................          ata(2); 
59D4:  MOVLW  02
59D6:  MOVLB  2
59D8:  MOVWF  x4E
59DA:  MOVLB  0
59DC:  CALL   39DA
....................              
....................          flag=INTCON.T0IE; 
59E0:  CLRF   xA9
59E2:  BTFSC  FF2.5
59E4:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
59E6:  MOVLW  0C
59E8:  MOVLB  2
59EA:  MOVWF  x5A
59EC:  MOVLB  0
59EE:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
59F2:  MOVLW  01
59F4:  MOVLB  2
59F6:  MOVWF  x5B
59F8:  MOVWF  x5C
59FA:  MOVLB  0
59FC:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
5A00:  MOVLW  10
5A02:  MOVWF  FE9
5A04:  MOVFF  237,24F
5A08:  MOVFF  236,24E
5A0C:  CALL   44FC
5A10:  MOVLW  20
5A12:  MOVLB  2
5A14:  MOVWF  x5A
5A16:  MOVLB  0
5A18:  CALL   4488
5A1C:  MOVLW  10
5A1E:  MOVWF  FE9
5A20:  MOVFF  23B,24F
5A24:  MOVFF  23A,24E
5A28:  CALL   44FC
5A2C:  MOVLW  20
5A2E:  MOVLB  2
5A30:  MOVWF  x5A
5A32:  MOVLB  0
5A34:  CALL   4488
5A38:  MOVLW  10
5A3A:  MOVWF  FE9
5A3C:  MOVFF  239,24F
5A40:  MOVFF  238,24E
5A44:  CALL   44FC
5A48:  MOVLW  20
5A4A:  MOVLB  2
5A4C:  MOVWF  x5A
5A4E:  MOVLB  0
5A50:  CALL   4488
5A54:  MOVFF  248,24E
5A58:  MOVLW  18
5A5A:  MOVLB  2
5A5C:  MOVWF  x4F
5A5E:  MOVLB  0
5A60:  CALL   45FA
5A64:  MOVLW  20
5A66:  MOVLB  2
5A68:  MOVWF  x5A
5A6A:  MOVLB  0
5A6C:  CALL   4488
5A70:  MOVFF  A9,24E
5A74:  MOVLW  18
5A76:  MOVLB  2
5A78:  MOVWF  x4F
5A7A:  MOVLB  0
5A7C:  CALL   45FA
....................          lcd_gotoxy(1,2); 
5A80:  MOVLW  01
5A82:  MOVLB  2
5A84:  MOVWF  x5B
5A86:  MOVLW  02
5A88:  MOVWF  x5C
5A8A:  MOVLB  0
5A8C:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld ",s4,s3,s5); 
5A90:  MOVLW  10
5A92:  MOVWF  FE9
5A94:  MOVFF  23D,24F
5A98:  MOVFF  23C,24E
5A9C:  CALL   44FC
5AA0:  MOVLW  20
5AA2:  MOVLB  2
5AA4:  MOVWF  x5A
5AA6:  MOVLB  0
5AA8:  CALL   4488
5AAC:  MOVLW  10
5AAE:  MOVWF  FE9
5AB0:  MOVFF  23B,24F
5AB4:  MOVFF  23A,24E
5AB8:  CALL   44FC
5ABC:  MOVLW  20
5ABE:  MOVLB  2
5AC0:  MOVWF  x5A
5AC2:  MOVLB  0
5AC4:  CALL   4488
5AC8:  MOVLW  10
5ACA:  MOVWF  FE9
5ACC:  MOVFF  23F,24F
5AD0:  MOVFF  23E,24E
5AD4:  CALL   44FC
5AD8:  MOVLW  20
5ADA:  MOVLB  2
5ADC:  MOVWF  x5A
5ADE:  MOVLB  0
5AE0:  CALL   4488
....................          delay_ms(100); 
5AE4:  MOVLW  64
5AE6:  MOVLB  2
5AE8:  MOVWF  x5B
5AEA:  MOVLB  0
5AEC:  CALL   0192
....................                
....................              
....................          if(read_eeprom(2)==1 && read_eeprom(3)==0)   //SALI 1 ACIK - SALI 2 KAPALI ******************************************************* 
5AF0:  MOVFF  FF2,24E
5AF4:  BCF    FF2.7
5AF6:  MOVLW  02
5AF8:  MOVWF  FA9
5AFA:  BCF    FA6.6
5AFC:  BCF    FA6.7
5AFE:  BSF    FA6.0
5B00:  MOVF   FA8,W
5B02:  MOVLB  2
5B04:  BTFSC  x4E.7
5B06:  BSF    FF2.7
5B08:  SUBLW  01
5B0A:  BNZ   5BA2
5B0C:  MOVFF  FF2,24F
5B10:  BCF    FF2.7
5B12:  MOVLW  03
5B14:  MOVWF  FA9
5B16:  BCF    FA6.6
5B18:  BCF    FA6.7
5B1A:  BSF    FA6.0
5B1C:  MOVF   FA8,W
5B1E:  BTFSC  x4F.7
5B20:  BSF    FF2.7
5B22:  XORLW  00
5B24:  BNZ   5BA2
....................          {      
....................             sali_test(); 
5B26:  MOVLB  0
5B28:  CALL   4BA0
....................              
....................             if(bit_test(eeprom_test,2)==1) 
5B2C:  MOVLB  2
5B2E:  BTFSS  x41.2
5B30:  BRA    5B38
....................             { 
....................                 bit_clear(eeprom_test,2); 
5B32:  BCF    x41.2
....................                 goto baslangic; 
5B34:  GOTO   5176
....................             } 
....................                   
....................                 
....................             if(((s1) <= (s3)) && ((s3) <= (s2))) 
5B38:  MOVF   x37,W
5B3A:  SUBWF  x3B,W
5B3C:  BNC   5B7E
5B3E:  BNZ   5B46
5B40:  MOVF   x36,W
5B42:  SUBWF  x3A,W
5B44:  BNC   5B7E
5B46:  MOVF   x3B,W
5B48:  SUBWF  x39,W
5B4A:  BNC   5B7E
5B4C:  BNZ   5B54
5B4E:  MOVF   x3A,W
5B50:  SUBWF  x38,W
5B52:  BNC   5B7E
....................             {  
....................                eeprom(); 
5B54:  MOVLB  0
5B56:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
5B5A:  MOVLB  2
5B5C:  BTFSS  x41.0
5B5E:  BRA    5B66
....................                { 
....................                   bit_clear(eeprom_test,0); 
5B60:  BCF    x41.0
....................                   goto baslangic; 
5B62:  GOTO   5176
....................                } 
....................                calistir(); 
5B66:  MOVLB  0
5B68:  CALL   4B8E
....................                if(kesme==1) 
5B6C:  DECFSZ x9C,W
5B6E:  BRA    5B7A
....................                {  
....................                   kesme=0; 
5B70:  CLRF   x9C
....................                   key=1; 
5B72:  MOVLW  01
5B74:  MOVWF  xAA
....................                   goto baslangic; 
5B76:  GOTO   5174
....................                } 
....................             } 
5B7A:  BRA    5B90
5B7C:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
5B7E:  BTFSS  FF2.5
5B80:  BRA    5B8E
....................                { 
....................                   INTCON.T0IE=0; 
5B82:  BCF    FF2.5
....................                   output_low(pin_b0); 
5B84:  BCF    F8A.0
....................                   sayi=0; 
5B86:  CLRF   x34
5B88:  CLRF   x33
5B8A:  CLRF   x32
5B8C:  CLRF   x31
5B8E:  MOVLB  0
....................                } 
....................                //set_timer0(13); 
....................             } 
....................                    
....................             if(kesme==1) 
5B90:  DECFSZ x9C,W
5B92:  BRA    5B9E
....................             {  
....................                kesme=0; 
5B94:  CLRF   x9C
....................                key=1; 
5B96:  MOVLW  01
5B98:  MOVWF  xAA
....................                goto baslangic; 
5B9A:  GOTO   5174
....................             }         
....................          } 
5B9E:  BRA    5DAC
5BA0:  MOVLB  2
....................              
....................          else if(read_eeprom(2)==0 && read_eeprom(3)==1)   //SALI 2 ACIK - SALI 1 KAPALI ******************************************************** 
5BA2:  MOVFF  FF2,24E
5BA6:  BCF    FF2.7
5BA8:  MOVLW  02
5BAA:  MOVWF  FA9
5BAC:  BCF    FA6.6
5BAE:  BCF    FA6.7
5BB0:  BSF    FA6.0
5BB2:  MOVF   FA8,W
5BB4:  BTFSC  x4E.7
5BB6:  BSF    FF2.7
5BB8:  XORLW  00
5BBA:  BNZ   5C52
5BBC:  MOVFF  FF2,24F
5BC0:  BCF    FF2.7
5BC2:  MOVLW  03
5BC4:  MOVWF  FA9
5BC6:  BCF    FA6.6
5BC8:  BCF    FA6.7
5BCA:  BSF    FA6.0
5BCC:  MOVF   FA8,W
5BCE:  BTFSC  x4F.7
5BD0:  BSF    FF2.7
5BD2:  SUBLW  01
5BD4:  BNZ   5C52
....................          { 
....................             sali_test(); 
5BD6:  MOVLB  0
5BD8:  CALL   4BA0
....................                 
....................             if(bit_test(eeprom_test,2)==1) 
5BDC:  MOVLB  2
5BDE:  BTFSS  x41.2
5BE0:  BRA    5BE8
....................             { 
....................                bit_clear(eeprom_test,2); 
5BE2:  BCF    x41.2
....................                 goto baslangic; 
5BE4:  GOTO   5176
....................             } 
....................  
....................             if(((s4) <= (s3) && (s3) < (s5))) 
5BE8:  MOVF   x3D,W
5BEA:  SUBWF  x3B,W
5BEC:  BNC   5C2E
5BEE:  BNZ   5BF6
5BF0:  MOVF   x3C,W
5BF2:  SUBWF  x3A,W
5BF4:  BNC   5C2E
5BF6:  MOVF   x3B,W
5BF8:  SUBWF  x3F,W
5BFA:  BNC   5C2E
5BFC:  BNZ   5C04
5BFE:  MOVF   x3E,W
5C00:  SUBWF  x3A,W
5C02:  BC    5C2E
....................             {  
....................                eeprom(); 
5C04:  MOVLB  0
5C06:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
5C0A:  MOVLB  2
5C0C:  BTFSS  x41.0
5C0E:  BRA    5C16
....................                { 
....................                   bit_clear(eeprom_test,0); 
5C10:  BCF    x41.0
....................                   goto baslangic; 
5C12:  GOTO   5176
....................                } 
....................                calistir(); 
5C16:  MOVLB  0
5C18:  CALL   4B8E
....................                if(kesme==1) 
5C1C:  DECFSZ x9C,W
5C1E:  BRA    5C2A
....................                {  
....................                   kesme=0; 
5C20:  CLRF   x9C
....................                   key=1; 
5C22:  MOVLW  01
5C24:  MOVWF  xAA
....................                   goto baslangic; 
5C26:  GOTO   5174
....................                } 
....................             } 
5C2A:  BRA    5C40
5C2C:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
5C2E:  BTFSS  FF2.5
5C30:  BRA    5C3E
....................                { 
....................                   INTCON.T0IE=0; 
5C32:  BCF    FF2.5
....................                   output_low(pin_b0); 
5C34:  BCF    F8A.0
....................                   sayi=0; 
5C36:  CLRF   x34
5C38:  CLRF   x33
5C3A:  CLRF   x32
5C3C:  CLRF   x31
5C3E:  MOVLB  0
....................                } 
....................                //set_timer0(13); 
....................             } 
....................  
....................             if(kesme==1) 
5C40:  DECFSZ x9C,W
5C42:  BRA    5C4E
....................             {  
....................                kesme=0; 
5C44:  CLRF   x9C
....................                key=1; 
5C46:  MOVLW  01
5C48:  MOVWF  xAA
....................                goto baslangic; 
5C4A:  GOTO   5174
....................             }       
....................          } 
5C4E:  BRA    5DAC
5C50:  MOVLB  2
....................           
....................          else if(read_eeprom(2)==1 && read_eeprom(3)==1)   //SALI 1 ACIK - SALI 2 ACIK ********************************************************* 
5C52:  MOVFF  FF2,24E
5C56:  BCF    FF2.7
5C58:  MOVLW  02
5C5A:  MOVWF  FA9
5C5C:  BCF    FA6.6
5C5E:  BCF    FA6.7
5C60:  BSF    FA6.0
5C62:  MOVF   FA8,W
5C64:  BTFSC  x4E.7
5C66:  BSF    FF2.7
5C68:  SUBLW  01
5C6A:  BTFSS  FD8.2
5C6C:  BRA    5DAE
5C6E:  MOVFF  FF2,24F
5C72:  BCF    FF2.7
5C74:  MOVLW  03
5C76:  MOVWF  FA9
5C78:  BCF    FA6.6
5C7A:  BCF    FA6.7
5C7C:  BSF    FA6.0
5C7E:  MOVF   FA8,W
5C80:  BTFSC  x4F.7
5C82:  BSF    FF2.7
5C84:  SUBLW  01
5C86:  BTFSS  FD8.2
5C88:  BRA    5DAE
....................          { 
....................             sali_test(); 
5C8A:  MOVLB  0
5C8C:  CALL   4BA0
....................              
....................             if(bit_test(eeprom_test,2)==1) 
5C90:  MOVLB  2
5C92:  BTFSS  x41.2
5C94:  BRA    5C9C
....................             { 
....................                 bit_clear(eeprom_test,2); 
5C96:  BCF    x41.2
....................                 goto baslangic; 
5C98:  GOTO   5176
....................             } 
....................             if(((s1) <= (s3) && (s3) <= (s2))) 
5C9C:  MOVF   x37,W
5C9E:  SUBWF  x3B,W
5CA0:  BNC   5CE0
5CA2:  BNZ   5CAA
5CA4:  MOVF   x36,W
5CA6:  SUBWF  x3A,W
5CA8:  BNC   5CE0
5CAA:  MOVF   x3B,W
5CAC:  SUBWF  x39,W
5CAE:  BNC   5CE0
5CB0:  BNZ   5CB8
5CB2:  MOVF   x3A,W
5CB4:  SUBWF  x38,W
5CB6:  BNC   5CE0
....................             { 
....................                eeprom(); 
5CB8:  MOVLB  0
5CBA:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
5CBE:  MOVLB  2
5CC0:  BTFSS  x41.0
5CC2:  BRA    5CCA
....................                { 
....................                   bit_clear(eeprom_test,0); 
5CC4:  BCF    x41.0
....................                   goto baslangic; 
5CC6:  GOTO   5176
....................                } 
....................                calistir(); 
5CCA:  MOVLB  0
5CCC:  CALL   4B8E
....................                if(kesme==1) 
5CD0:  DECFSZ x9C,W
5CD2:  BRA    5CDE
....................                {  
....................                   kesme=0; 
5CD4:  CLRF   x9C
....................                   key=1; 
5CD6:  MOVLW  01
5CD8:  MOVWF  xAA
....................                   goto baslangic; 
5CDA:  GOTO   5174
5CDE:  MOVLB  2
....................                }   
....................             } 
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
5CE0:  MOVF   x37,W
5CE2:  SUBWF  x3B,W
5CE4:  BNC   5D1A
5CE6:  BNZ   5CEE
5CE8:  MOVF   x3A,W
5CEA:  SUBWF  x36,W
5CEC:  BC    5D1A
5CEE:  MOVF   x39,W
5CF0:  SUBWF  x3B,W
5CF2:  BNC   5D1A
5CF4:  BNZ   5CFC
5CF6:  MOVF   x3A,W
5CF8:  SUBWF  x38,W
5CFA:  BC    5D1A
5CFC:  MOVF   x3B,W
5CFE:  SUBWF  x3D,W
5D00:  BNC   5D1A
5D02:  BNZ   5D0A
5D04:  MOVF   x3C,W
5D06:  SUBWF  x3A,W
5D08:  BC    5D1A
....................             { 
....................                if(INTCON.T0IE==1) 
5D0A:  BTFSS  FF2.5
5D0C:  BRA    5D1A
....................                { 
....................                   INTCON.T0IE=0; 
5D0E:  BCF    FF2.5
....................                   output_low(pin_b0); 
5D10:  BCF    F8A.0
....................                   sayi=0; 
5D12:  CLRF   x34
5D14:  CLRF   x33
5D16:  CLRF   x32
5D18:  CLRF   x31
....................                } 
....................                //set_timer0(13); 
....................             } 
....................  
....................             if(kesme==1) 
5D1A:  MOVLB  0
5D1C:  DECFSZ x9C,W
5D1E:  BRA    5D2A
....................             {  
....................                kesme=0; 
5D20:  CLRF   x9C
....................                key=1; 
5D22:  MOVLW  01
5D24:  MOVWF  xAA
....................                goto baslangic; 
5D26:  GOTO   5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
5D2A:  MOVLB  2
5D2C:  MOVF   x3D,W
5D2E:  SUBWF  x3B,W
5D30:  BNC   5D70
5D32:  BNZ   5D3A
5D34:  MOVF   x3C,W
5D36:  SUBWF  x3A,W
5D38:  BNC   5D70
5D3A:  MOVF   x3B,W
5D3C:  SUBWF  x3F,W
5D3E:  BNC   5D70
5D40:  BNZ   5D48
5D42:  MOVF   x3E,W
5D44:  SUBWF  x3A,W
5D46:  BC    5D70
....................             { 
....................                eeprom(); 
5D48:  MOVLB  0
5D4A:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
5D4E:  MOVLB  2
5D50:  BTFSS  x41.0
5D52:  BRA    5D5A
....................                { 
....................                   bit_clear(eeprom_test,0); 
5D54:  BCF    x41.0
....................                   goto baslangic; 
5D56:  GOTO   5176
....................                } 
....................                calistir(); 
5D5A:  MOVLB  0
5D5C:  CALL   4B8E
....................                if(kesme==1)     
5D60:  DECFSZ x9C,W
5D62:  BRA    5D6E
....................                {  
....................                   kesme=0; 
5D64:  CLRF   x9C
....................                   goto baslangic; 
5D66:  GOTO   5174
....................                   key=1; 
5D6A:  MOVLW  01
5D6C:  MOVWF  xAA
5D6E:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
5D70:  MOVF   x3D,W
5D72:  SUBWF  x3B,W
5D74:  BNC   5D9C
5D76:  BNZ   5D7E
5D78:  MOVF   x3A,W
5D7A:  SUBWF  x3C,W
5D7C:  BC    5D9C
5D7E:  MOVF   x3F,W
5D80:  SUBWF  x3B,W
5D82:  BNC   5D9C
5D84:  BNZ   5D8C
5D86:  MOVF   x3A,W
5D88:  SUBWF  x3E,W
5D8A:  BC    5D9C
....................             { 
....................                if(INTCON.T0IE==1) 
5D8C:  BTFSS  FF2.5
5D8E:  BRA    5D9C
....................                { 
....................                   INTCON.T0IE=0; 
5D90:  BCF    FF2.5
....................                   output_low(pin_b0); 
5D92:  BCF    F8A.0
....................                   sayi=0; 
5D94:  CLRF   x34
5D96:  CLRF   x33
5D98:  CLRF   x32
5D9A:  CLRF   x31
....................                } 
....................                //set_timer0(13); 
....................             } 
....................  
....................             if(kesme==1) 
5D9C:  MOVLB  0
5D9E:  DECFSZ x9C,W
5DA0:  BRA    5DAC
....................             {  
....................                kesme=0; 
5DA2:  CLRF   x9C
....................                key=1; 
5DA4:  MOVLW  01
5DA6:  MOVWF  xAA
....................                goto baslangic; 
5DA8:  GOTO   5174
5DAC:  MOVLB  2
....................             } 
....................          } 
....................       } 
5DAE:  GOTO   7530
....................       
.................... //******************************************************* CARSAMBA CALISMA SARTI **************************************************************           
....................       else if(haftanin_gunu==3) 
5DB2:  MOVF   x48,W
5DB4:  SUBLW  03
5DB6:  BTFSS  FD8.2
5DB8:  BRA    6266
....................       {  
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................          delay_ms(30);   
*
5E7C:  MOVLW  1E
5E7E:  MOVLB  2
5E80:  MOVWF  x5B
5E82:  MOVLB  0
5E84:  CALL   0192
....................          ata(3); 
5E88:  MOVLW  03
5E8A:  MOVLB  2
5E8C:  MOVWF  x4E
5E8E:  MOVLB  0
5E90:  CALL   39DA
....................              
....................          flag=INTCON.T0IE; 
5E94:  CLRF   xA9
5E96:  BTFSC  FF2.5
5E98:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
5E9A:  MOVLW  0C
5E9C:  MOVLB  2
5E9E:  MOVWF  x5A
5EA0:  MOVLB  0
5EA2:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
5EA6:  MOVLW  01
5EA8:  MOVLB  2
5EAA:  MOVWF  x5B
5EAC:  MOVWF  x5C
5EAE:  MOVLB  0
5EB0:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
5EB4:  MOVLW  10
5EB6:  MOVWF  FE9
5EB8:  MOVFF  237,24F
5EBC:  MOVFF  236,24E
5EC0:  CALL   44FC
5EC4:  MOVLW  20
5EC6:  MOVLB  2
5EC8:  MOVWF  x5A
5ECA:  MOVLB  0
5ECC:  CALL   4488
5ED0:  MOVLW  10
5ED2:  MOVWF  FE9
5ED4:  MOVFF  23B,24F
5ED8:  MOVFF  23A,24E
5EDC:  CALL   44FC
5EE0:  MOVLW  20
5EE2:  MOVLB  2
5EE4:  MOVWF  x5A
5EE6:  MOVLB  0
5EE8:  CALL   4488
5EEC:  MOVLW  10
5EEE:  MOVWF  FE9
5EF0:  MOVFF  239,24F
5EF4:  MOVFF  238,24E
5EF8:  CALL   44FC
5EFC:  MOVLW  20
5EFE:  MOVLB  2
5F00:  MOVWF  x5A
5F02:  MOVLB  0
5F04:  CALL   4488
5F08:  MOVFF  248,24E
5F0C:  MOVLW  18
5F0E:  MOVLB  2
5F10:  MOVWF  x4F
5F12:  MOVLB  0
5F14:  CALL   45FA
5F18:  MOVLW  20
5F1A:  MOVLB  2
5F1C:  MOVWF  x5A
5F1E:  MOVLB  0
5F20:  CALL   4488
5F24:  MOVFF  A9,24E
5F28:  MOVLW  18
5F2A:  MOVLB  2
5F2C:  MOVWF  x4F
5F2E:  MOVLB  0
5F30:  CALL   45FA
....................          lcd_gotoxy(1,2); 
5F34:  MOVLW  01
5F36:  MOVLB  2
5F38:  MOVWF  x5B
5F3A:  MOVLW  02
5F3C:  MOVWF  x5C
5F3E:  MOVLB  0
5F40:  CALL   4460
....................          printf(lcd_putc,"%02d:%02d:%02d ",saat,dakika,saniye); 
5F44:  MOVFF  244,24E
5F48:  MOVLW  01
5F4A:  MOVLB  2
5F4C:  MOVWF  x4F
5F4E:  MOVLB  0
5F50:  CALL   4C50
5F54:  MOVLW  3A
5F56:  MOVLB  2
5F58:  MOVWF  x5A
5F5A:  MOVLB  0
5F5C:  CALL   4488
5F60:  MOVFF  243,24E
5F64:  MOVLW  01
5F66:  MOVLB  2
5F68:  MOVWF  x4F
5F6A:  MOVLB  0
5F6C:  CALL   4C50
5F70:  MOVLW  3A
5F72:  MOVLB  2
5F74:  MOVWF  x5A
5F76:  MOVLB  0
5F78:  CALL   4488
5F7C:  MOVFF  242,24E
5F80:  MOVLW  01
5F82:  MOVLB  2
5F84:  MOVWF  x4F
5F86:  MOVLB  0
5F88:  CALL   4C50
5F8C:  MOVLW  20
5F8E:  MOVLB  2
5F90:  MOVWF  x5A
5F92:  MOVLB  0
5F94:  CALL   4488
....................          delay_ms(100); 
5F98:  MOVLW  64
5F9A:  MOVLB  2
5F9C:  MOVWF  x5B
5F9E:  MOVLB  0
5FA0:  CALL   0192
....................              
....................              
....................          if(read_eeprom(4)==1 && read_eeprom(5)==0)   //CARSAMBA 1 ACIK - CARSAMBA 2 KAPALI ************************************************* 
5FA4:  MOVFF  FF2,24E
5FA8:  BCF    FF2.7
5FAA:  MOVLW  04
5FAC:  MOVWF  FA9
5FAE:  BCF    FA6.6
5FB0:  BCF    FA6.7
5FB2:  BSF    FA6.0
5FB4:  MOVF   FA8,W
5FB6:  MOVLB  2
5FB8:  BTFSC  x4E.7
5FBA:  BSF    FF2.7
5FBC:  SUBLW  01
5FBE:  BNZ   6056
5FC0:  MOVFF  FF2,24F
5FC4:  BCF    FF2.7
5FC6:  MOVLW  05
5FC8:  MOVWF  FA9
5FCA:  BCF    FA6.6
5FCC:  BCF    FA6.7
5FCE:  BSF    FA6.0
5FD0:  MOVF   FA8,W
5FD2:  BTFSC  x4F.7
5FD4:  BSF    FF2.7
5FD6:  XORLW  00
5FD8:  BNZ   6056
....................          {   
....................             carsamba_test(); 
5FDA:  MOVLB  0
5FDC:  CALL   4D18
....................                    
....................             if(bit_test(eeprom_test,3)==1) 
5FE0:  MOVLB  2
5FE2:  BTFSS  x41.3
5FE4:  BRA    5FEC
....................             { 
....................                bit_clear(eeprom_test,3); 
5FE6:  BCF    x41.3
....................                goto baslangic; 
5FE8:  GOTO   5176
....................             } 
....................                   
....................             if(((s1) <= (s3)) && ((s3) < (s2))) 
5FEC:  MOVF   x37,W
5FEE:  SUBWF  x3B,W
5FF0:  BNC   6032
5FF2:  BNZ   5FFA
5FF4:  MOVF   x36,W
5FF6:  SUBWF  x3A,W
5FF8:  BNC   6032
5FFA:  MOVF   x3B,W
5FFC:  SUBWF  x39,W
5FFE:  BNC   6032
6000:  BNZ   6008
6002:  MOVF   x38,W
6004:  SUBWF  x3A,W
6006:  BC    6032
....................             {   
....................                eeprom(); 
6008:  MOVLB  0
600A:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
600E:  MOVLB  2
6010:  BTFSS  x41.0
6012:  BRA    601A
....................                { 
....................                   bit_clear(eeprom_test,0); 
6014:  BCF    x41.0
....................                   goto baslangic; 
6016:  GOTO   5176
....................                } 
....................                calistir(); 
601A:  MOVLB  0
601C:  CALL   4B8E
....................                if(kesme==1) 
6020:  DECFSZ x9C,W
6022:  BRA    602E
....................                {  
....................                   kesme=0; 
6024:  CLRF   x9C
....................                   key=1; 
6026:  MOVLW  01
6028:  MOVWF  xAA
....................                   goto baslangic; 
602A:  GOTO   5174
....................                } 
....................             }  
602E:  BRA    6044
6030:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
6032:  BTFSS  FF2.5
6034:  BRA    6042
....................                { 
....................                   INTCON.T0IE=0; 
6036:  BCF    FF2.5
....................                   output_low(pin_b0); 
6038:  BCF    F8A.0
....................                   sayi=0; 
603A:  CLRF   x34
603C:  CLRF   x33
603E:  CLRF   x32
6040:  CLRF   x31
6042:  MOVLB  0
....................                } 
....................                //set_timer0(13); 
....................             } 
....................                    
....................             if(kesme==1) 
6044:  DECFSZ x9C,W
6046:  BRA    6052
....................             {  
....................                kesme=0; 
6048:  CLRF   x9C
....................                key=1; 
604A:  MOVLW  01
604C:  MOVWF  xAA
....................                goto baslangic; 
604E:  GOTO   5174
....................             } 
....................          } 
6052:  BRA    6260
6054:  MOVLB  2
....................              
....................          else if(read_eeprom(4)==0 && read_eeprom(5)==1)   //CARSAMBA 2 ACIK - CARSAMBA 1 KAPALI ************************************************* 
6056:  MOVFF  FF2,24E
605A:  BCF    FF2.7
605C:  MOVLW  04
605E:  MOVWF  FA9
6060:  BCF    FA6.6
6062:  BCF    FA6.7
6064:  BSF    FA6.0
6066:  MOVF   FA8,W
6068:  BTFSC  x4E.7
606A:  BSF    FF2.7
606C:  XORLW  00
606E:  BNZ   6106
6070:  MOVFF  FF2,24F
6074:  BCF    FF2.7
6076:  MOVLW  05
6078:  MOVWF  FA9
607A:  BCF    FA6.6
607C:  BCF    FA6.7
607E:  BSF    FA6.0
6080:  MOVF   FA8,W
6082:  BTFSC  x4F.7
6084:  BSF    FF2.7
6086:  SUBLW  01
6088:  BNZ   6106
....................          { 
....................             carsamba_test(); 
608A:  MOVLB  0
608C:  CALL   4D18
....................                    
....................             if(bit_test(eeprom_test,3)==1) 
6090:  MOVLB  2
6092:  BTFSS  x41.3
6094:  BRA    609C
....................             { 
....................                bit_clear(eeprom_test,3); 
6096:  BCF    x41.3
....................                goto baslangic; 
6098:  GOTO   5176
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
609C:  MOVF   x3D,W
609E:  SUBWF  x3B,W
60A0:  BNC   60E2
60A2:  BNZ   60AA
60A4:  MOVF   x3C,W
60A6:  SUBWF  x3A,W
60A8:  BNC   60E2
60AA:  MOVF   x3B,W
60AC:  SUBWF  x3F,W
60AE:  BNC   60E2
60B0:  BNZ   60B8
60B2:  MOVF   x3E,W
60B4:  SUBWF  x3A,W
60B6:  BC    60E2
....................             {   
....................                eeprom(); 
60B8:  MOVLB  0
60BA:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
60BE:  MOVLB  2
60C0:  BTFSS  x41.0
60C2:  BRA    60CA
....................                { 
....................                   bit_clear(eeprom_test,0); 
60C4:  BCF    x41.0
....................                   goto baslangic; 
60C6:  GOTO   5176
....................                } 
....................                calistir();                    
60CA:  MOVLB  0
60CC:  CALL   4B8E
....................                if(kesme==1) 
60D0:  DECFSZ x9C,W
60D2:  BRA    60DE
....................                {  
....................                   kesme=0; 
60D4:  CLRF   x9C
....................                   key=1; 
60D6:  MOVLW  01
60D8:  MOVWF  xAA
....................                   goto baslangic; 
60DA:  GOTO   5174
....................                } 
....................             } 
60DE:  BRA    60F4
60E0:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
60E2:  BTFSS  FF2.5
60E4:  BRA    60F2
....................                { 
....................                   INTCON.T0IE=0; 
60E6:  BCF    FF2.5
....................                   output_low(pin_b0); 
60E8:  BCF    F8A.0
....................                   sayi=0; 
60EA:  CLRF   x34
60EC:  CLRF   x33
60EE:  CLRF   x32
60F0:  CLRF   x31
60F2:  MOVLB  0
....................                } 
....................                //set_timer0(13); 
....................             } 
....................             if(kesme==1) 
60F4:  DECFSZ x9C,W
60F6:  BRA    6102
....................             {  
....................                kesme=0; 
60F8:  CLRF   x9C
....................                key=1; 
60FA:  MOVLW  01
60FC:  MOVWF  xAA
....................                goto baslangic; 
60FE:  GOTO   5174
....................             } 
....................          } 
6102:  BRA    6260
6104:  MOVLB  2
....................           
....................          else if(read_eeprom(4)==1 && read_eeprom(5)==1)   //CARSAMBA 1 ACIK - CARSAMBA 2 ACIK ************************************************* 
6106:  MOVFF  FF2,24E
610A:  BCF    FF2.7
610C:  MOVLW  04
610E:  MOVWF  FA9
6110:  BCF    FA6.6
6112:  BCF    FA6.7
6114:  BSF    FA6.0
6116:  MOVF   FA8,W
6118:  BTFSC  x4E.7
611A:  BSF    FF2.7
611C:  SUBLW  01
611E:  BTFSS  FD8.2
6120:  BRA    6262
6122:  MOVFF  FF2,24F
6126:  BCF    FF2.7
6128:  MOVLW  05
612A:  MOVWF  FA9
612C:  BCF    FA6.6
612E:  BCF    FA6.7
6130:  BSF    FA6.0
6132:  MOVF   FA8,W
6134:  BTFSC  x4F.7
6136:  BSF    FF2.7
6138:  SUBLW  01
613A:  BTFSS  FD8.2
613C:  BRA    6262
....................          { 
....................             carsamba_test(); 
613E:  MOVLB  0
6140:  CALL   4D18
....................                    
....................             if(bit_test(eeprom_test,3)==1) 
6144:  MOVLB  2
6146:  BTFSS  x41.3
6148:  BRA    6150
....................             { 
....................                bit_clear(eeprom_test,3); 
614A:  BCF    x41.3
....................                goto baslangic; 
614C:  GOTO   5176
....................             } 
....................  
....................             if(((s1) <= (s3) && (s3) < (s2))) 
6150:  MOVF   x37,W
6152:  SUBWF  x3B,W
6154:  BNC   6194
6156:  BNZ   615E
6158:  MOVF   x36,W
615A:  SUBWF  x3A,W
615C:  BNC   6194
615E:  MOVF   x3B,W
6160:  SUBWF  x39,W
6162:  BNC   6194
6164:  BNZ   616C
6166:  MOVF   x38,W
6168:  SUBWF  x3A,W
616A:  BC    6194
....................             {    
....................                eeprom(); 
616C:  MOVLB  0
616E:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6172:  MOVLB  2
6174:  BTFSS  x41.0
6176:  BRA    617E
....................                { 
....................                   bit_clear(eeprom_test,0); 
6178:  BCF    x41.0
....................                   goto baslangic; 
617A:  GOTO   5176
....................                } 
....................                calistir(); 
617E:  MOVLB  0
6180:  CALL   4B8E
....................                if(kesme==1) 
6184:  DECFSZ x9C,W
6186:  BRA    6192
....................                {  
....................                   kesme=0; 
6188:  CLRF   x9C
....................                   key=1; 
618A:  MOVLW  01
618C:  MOVWF  xAA
....................                   goto baslangic; 
618E:  GOTO   5174
6192:  MOVLB  2
....................                }   
....................             } 
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
6194:  MOVF   x37,W
6196:  SUBWF  x3B,W
6198:  BNC   61CE
619A:  BNZ   61A2
619C:  MOVF   x3A,W
619E:  SUBWF  x36,W
61A0:  BC    61CE
61A2:  MOVF   x39,W
61A4:  SUBWF  x3B,W
61A6:  BNC   61CE
61A8:  BNZ   61B0
61AA:  MOVF   x3A,W
61AC:  SUBWF  x38,W
61AE:  BC    61CE
61B0:  MOVF   x3B,W
61B2:  SUBWF  x3D,W
61B4:  BNC   61CE
61B6:  BNZ   61BE
61B8:  MOVF   x3C,W
61BA:  SUBWF  x3A,W
61BC:  BC    61CE
....................             { 
....................                if(INTCON.T0IE==1) 
61BE:  BTFSS  FF2.5
61C0:  BRA    61CE
....................                { 
....................                   INTCON.T0IE=0; 
61C2:  BCF    FF2.5
....................                   output_low(pin_b0); 
61C4:  BCF    F8A.0
....................                   sayi=0; 
61C6:  CLRF   x34
61C8:  CLRF   x33
61CA:  CLRF   x32
61CC:  CLRF   x31
....................                } 
....................                //set_timer0(13); 
....................             } 
....................  
....................             if(kesme==1) 
61CE:  MOVLB  0
61D0:  DECFSZ x9C,W
61D2:  BRA    61DE
....................             {  
....................                kesme=0; 
61D4:  CLRF   x9C
....................                key=1; 
61D6:  MOVLW  01
61D8:  MOVWF  xAA
....................                goto baslangic; 
61DA:  GOTO   5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
61DE:  MOVLB  2
61E0:  MOVF   x3D,W
61E2:  SUBWF  x3B,W
61E4:  BNC   6224
61E6:  BNZ   61EE
61E8:  MOVF   x3C,W
61EA:  SUBWF  x3A,W
61EC:  BNC   6224
61EE:  MOVF   x3B,W
61F0:  SUBWF  x3F,W
61F2:  BNC   6224
61F4:  BNZ   61FC
61F6:  MOVF   x3E,W
61F8:  SUBWF  x3A,W
61FA:  BC    6224
....................             {  
....................                eeprom(); 
61FC:  MOVLB  0
61FE:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6202:  MOVLB  2
6204:  BTFSS  x41.0
6206:  BRA    620E
....................                { 
....................                   bit_clear(eeprom_test,0); 
6208:  BCF    x41.0
....................                   goto baslangic; 
620A:  GOTO   5176
....................                } 
....................                calistir(); 
620E:  MOVLB  0
6210:  CALL   4B8E
....................                if(kesme==1) 
6214:  DECFSZ x9C,W
6216:  BRA    6222
....................                {  
....................                   kesme=0; 
6218:  CLRF   x9C
....................                   key=1; 
621A:  MOVLW  01
621C:  MOVWF  xAA
....................                   goto baslangic; 
621E:  GOTO   5174
6222:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
6224:  MOVF   x3D,W
6226:  SUBWF  x3B,W
6228:  BNC   6250
622A:  BNZ   6232
622C:  MOVF   x3A,W
622E:  SUBWF  x3C,W
6230:  BC    6250
6232:  MOVF   x3F,W
6234:  SUBWF  x3B,W
6236:  BNC   6250
6238:  BNZ   6240
623A:  MOVF   x3A,W
623C:  SUBWF  x3E,W
623E:  BC    6250
....................             { 
....................                if(INTCON.T0IE==1) 
6240:  BTFSS  FF2.5
6242:  BRA    6250
....................                { 
....................                   INTCON.T0IE=0; 
6244:  BCF    FF2.5
....................                   output_low(pin_b0); 
6246:  BCF    F8A.0
....................                   sayi=0; 
6248:  CLRF   x34
624A:  CLRF   x33
624C:  CLRF   x32
624E:  CLRF   x31
....................                } 
....................                //set_timer0(13); 
....................             } 
....................  
....................             if(kesme==1) 
6250:  MOVLB  0
6252:  DECFSZ x9C,W
6254:  BRA    6260
....................             {  
....................                kesme=0; 
6256:  CLRF   x9C
....................                key=1; 
6258:  MOVLW  01
625A:  MOVWF  xAA
....................                goto baslangic; 
625C:  GOTO   5174
6260:  MOVLB  2
....................             } 
....................          }     
....................       } 
6262:  GOTO   7530
.................... //******************************************************* PERSEMBE CALISMA SARTI ***************************************************************           
....................       else if(haftanin_gunu==4) 
6266:  MOVF   x48,W
6268:  SUBLW  04
626A:  BTFSS  FD8.2
626C:  BRA    671A
....................       {  
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................          delay_ms(30); 
*
6330:  MOVLW  1E
6332:  MOVLB  2
6334:  MOVWF  x5B
6336:  MOVLB  0
6338:  CALL   0192
....................          ata(4); 
633C:  MOVLW  04
633E:  MOVLB  2
6340:  MOVWF  x4E
6342:  MOVLB  0
6344:  CALL   39DA
....................              
....................          flag=INTCON.T0IE; 
6348:  CLRF   xA9
634A:  BTFSC  FF2.5
634C:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
634E:  MOVLW  0C
6350:  MOVLB  2
6352:  MOVWF  x5A
6354:  MOVLB  0
6356:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
635A:  MOVLW  01
635C:  MOVLB  2
635E:  MOVWF  x5B
6360:  MOVWF  x5C
6362:  MOVLB  0
6364:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
6368:  MOVLW  10
636A:  MOVWF  FE9
636C:  MOVFF  237,24F
6370:  MOVFF  236,24E
6374:  CALL   44FC
6378:  MOVLW  20
637A:  MOVLB  2
637C:  MOVWF  x5A
637E:  MOVLB  0
6380:  CALL   4488
6384:  MOVLW  10
6386:  MOVWF  FE9
6388:  MOVFF  23B,24F
638C:  MOVFF  23A,24E
6390:  CALL   44FC
6394:  MOVLW  20
6396:  MOVLB  2
6398:  MOVWF  x5A
639A:  MOVLB  0
639C:  CALL   4488
63A0:  MOVLW  10
63A2:  MOVWF  FE9
63A4:  MOVFF  239,24F
63A8:  MOVFF  238,24E
63AC:  CALL   44FC
63B0:  MOVLW  20
63B2:  MOVLB  2
63B4:  MOVWF  x5A
63B6:  MOVLB  0
63B8:  CALL   4488
63BC:  MOVFF  248,24E
63C0:  MOVLW  18
63C2:  MOVLB  2
63C4:  MOVWF  x4F
63C6:  MOVLB  0
63C8:  CALL   45FA
63CC:  MOVLW  20
63CE:  MOVLB  2
63D0:  MOVWF  x5A
63D2:  MOVLB  0
63D4:  CALL   4488
63D8:  MOVFF  A9,24E
63DC:  MOVLW  18
63DE:  MOVLB  2
63E0:  MOVWF  x4F
63E2:  MOVLB  0
63E4:  CALL   45FA
....................          lcd_gotoxy(1,2); 
63E8:  MOVLW  01
63EA:  MOVLB  2
63EC:  MOVWF  x5B
63EE:  MOVLW  02
63F0:  MOVWF  x5C
63F2:  MOVLB  0
63F4:  CALL   4460
....................          printf(lcd_putc,"%02d:%02d:%02d ",saat,dakika,saniye); 
63F8:  MOVFF  244,24E
63FC:  MOVLW  01
63FE:  MOVLB  2
6400:  MOVWF  x4F
6402:  MOVLB  0
6404:  CALL   4C50
6408:  MOVLW  3A
640A:  MOVLB  2
640C:  MOVWF  x5A
640E:  MOVLB  0
6410:  CALL   4488
6414:  MOVFF  243,24E
6418:  MOVLW  01
641A:  MOVLB  2
641C:  MOVWF  x4F
641E:  MOVLB  0
6420:  CALL   4C50
6424:  MOVLW  3A
6426:  MOVLB  2
6428:  MOVWF  x5A
642A:  MOVLB  0
642C:  CALL   4488
6430:  MOVFF  242,24E
6434:  MOVLW  01
6436:  MOVLB  2
6438:  MOVWF  x4F
643A:  MOVLB  0
643C:  CALL   4C50
6440:  MOVLW  20
6442:  MOVLB  2
6444:  MOVWF  x5A
6446:  MOVLB  0
6448:  CALL   4488
....................          delay_ms(100); 
644C:  MOVLW  64
644E:  MOVLB  2
6450:  MOVWF  x5B
6452:  MOVLB  0
6454:  CALL   0192
....................              
....................              
....................          if(read_eeprom(6)==1 && read_eeprom(7)==0)   //PERSEMBE 1 ACIK - PERSEMBE 2 KAPALI ************************************************* 
6458:  MOVFF  FF2,24E
645C:  BCF    FF2.7
645E:  MOVLW  06
6460:  MOVWF  FA9
6462:  BCF    FA6.6
6464:  BCF    FA6.7
6466:  BSF    FA6.0
6468:  MOVF   FA8,W
646A:  MOVLB  2
646C:  BTFSC  x4E.7
646E:  BSF    FF2.7
6470:  SUBLW  01
6472:  BNZ   650A
6474:  MOVFF  FF2,24F
6478:  BCF    FF2.7
647A:  MOVLW  07
647C:  MOVWF  FA9
647E:  BCF    FA6.6
6480:  BCF    FA6.7
6482:  BSF    FA6.0
6484:  MOVF   FA8,W
6486:  BTFSC  x4F.7
6488:  BSF    FF2.7
648A:  XORLW  00
648C:  BNZ   650A
....................          { 
....................             persembe_test(); 
648E:  MOVLB  0
6490:  CALL   4DC8
....................                     
....................             if(bit_test(eeprom_test,4)==1) 
6494:  MOVLB  2
6496:  BTFSS  x41.4
6498:  BRA    64A0
....................             { 
....................                bit_clear(eeprom_test,4); 
649A:  BCF    x41.4
....................                goto baslangic; 
649C:  GOTO   5176
....................             } 
....................              
....................             if(((s1) <= (s3)) && ((s3) < (s2))) 
64A0:  MOVF   x37,W
64A2:  SUBWF  x3B,W
64A4:  BNC   64E6
64A6:  BNZ   64AE
64A8:  MOVF   x36,W
64AA:  SUBWF  x3A,W
64AC:  BNC   64E6
64AE:  MOVF   x3B,W
64B0:  SUBWF  x39,W
64B2:  BNC   64E6
64B4:  BNZ   64BC
64B6:  MOVF   x38,W
64B8:  SUBWF  x3A,W
64BA:  BC    64E6
....................             {       
....................                eeprom(); 
64BC:  MOVLB  0
64BE:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
64C2:  MOVLB  2
64C4:  BTFSS  x41.0
64C6:  BRA    64CE
....................                { 
....................                   bit_clear(eeprom_test,0); 
64C8:  BCF    x41.0
....................                   goto baslangic; 
64CA:  GOTO   5176
....................                } 
....................                calistir(); 
64CE:  MOVLB  0
64D0:  CALL   4B8E
....................                if(kesme==1) 
64D4:  DECFSZ x9C,W
64D6:  BRA    64E2
....................                {  
....................                   kesme=0; 
64D8:  CLRF   x9C
....................                   key=1; 
64DA:  MOVLW  01
64DC:  MOVWF  xAA
....................                   goto baslangic; 
64DE:  GOTO   5174
....................                } 
....................             }  
64E2:  BRA    64F8
64E4:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
64E6:  BTFSS  FF2.5
64E8:  BRA    64F6
....................                { 
....................                   INTCON.T0IE=0; 
64EA:  BCF    FF2.5
....................                   output_low(pin_b0); 
64EC:  BCF    F8A.0
....................                   sayi=0; 
64EE:  CLRF   x34
64F0:  CLRF   x33
64F2:  CLRF   x32
64F4:  CLRF   x31
64F6:  MOVLB  0
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
64F8:  DECFSZ x9C,W
64FA:  BRA    6506
....................             {  
....................                kesme=0; 
64FC:  CLRF   x9C
....................                key=1; 
64FE:  MOVLW  01
6500:  MOVWF  xAA
....................                goto baslangic; 
6502:  GOTO   5174
....................             } 
....................          } 
6506:  BRA    6714
6508:  MOVLB  2
....................              
....................          else if(read_eeprom(6)==0 && read_eeprom(7)==1)   //PERSEMBE 2 ACIK - PERSEMBE 1 KAPALI ************************************************* 
650A:  MOVFF  FF2,24E
650E:  BCF    FF2.7
6510:  MOVLW  06
6512:  MOVWF  FA9
6514:  BCF    FA6.6
6516:  BCF    FA6.7
6518:  BSF    FA6.0
651A:  MOVF   FA8,W
651C:  BTFSC  x4E.7
651E:  BSF    FF2.7
6520:  XORLW  00
6522:  BNZ   65BA
6524:  MOVFF  FF2,24F
6528:  BCF    FF2.7
652A:  MOVLW  07
652C:  MOVWF  FA9
652E:  BCF    FA6.6
6530:  BCF    FA6.7
6532:  BSF    FA6.0
6534:  MOVF   FA8,W
6536:  BTFSC  x4F.7
6538:  BSF    FF2.7
653A:  SUBLW  01
653C:  BNZ   65BA
....................          { 
....................             persembe_test(); 
653E:  MOVLB  0
6540:  CALL   4DC8
....................                     
....................             if(bit_test(eeprom_test,4)==1) 
6544:  MOVLB  2
6546:  BTFSS  x41.4
6548:  BRA    6550
....................             { 
....................                bit_clear(eeprom_test,4); 
654A:  BCF    x41.4
....................                goto baslangic; 
654C:  GOTO   5176
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
6550:  MOVF   x3D,W
6552:  SUBWF  x3B,W
6554:  BNC   6596
6556:  BNZ   655E
6558:  MOVF   x3C,W
655A:  SUBWF  x3A,W
655C:  BNC   6596
655E:  MOVF   x3B,W
6560:  SUBWF  x3F,W
6562:  BNC   6596
6564:  BNZ   656C
6566:  MOVF   x3E,W
6568:  SUBWF  x3A,W
656A:  BC    6596
....................             {                    
....................                eeprom(); 
656C:  MOVLB  0
656E:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6572:  MOVLB  2
6574:  BTFSS  x41.0
6576:  BRA    657E
....................                { 
....................                   bit_clear(eeprom_test,0); 
6578:  BCF    x41.0
....................                   goto baslangic; 
657A:  GOTO   5176
....................                } 
....................                calistir();  
657E:  MOVLB  0
6580:  CALL   4B8E
....................                if(kesme==1) 
6584:  DECFSZ x9C,W
6586:  BRA    6592
....................                {  
....................                   kesme=0; 
6588:  CLRF   x9C
....................                   key=1; 
658A:  MOVLW  01
658C:  MOVWF  xAA
....................                   goto baslangic; 
658E:  GOTO   5174
....................                } 
....................             } 
6592:  BRA    65A8
6594:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
6596:  BTFSS  FF2.5
6598:  BRA    65A6
....................                { 
....................                   INTCON.T0IE=0; 
659A:  BCF    FF2.5
....................                   output_low(pin_b0); 
659C:  BCF    F8A.0
....................                   sayi=0; 
659E:  CLRF   x34
65A0:  CLRF   x33
65A2:  CLRF   x32
65A4:  CLRF   x31
65A6:  MOVLB  0
....................                } 
....................             } 
....................             if(kesme==1) 
65A8:  DECFSZ x9C,W
65AA:  BRA    65B6
....................             {  
....................                kesme=0; 
65AC:  CLRF   x9C
....................                key=1; 
65AE:  MOVLW  01
65B0:  MOVWF  xAA
....................                goto baslangic; 
65B2:  GOTO   5174
....................             } 
....................          } 
65B6:  BRA    6714
65B8:  MOVLB  2
....................           
....................          else if(read_eeprom(6)==1 && read_eeprom(7)==1)   //PERSEMBE 1 ACIK - PERSEMBE 2 ACIK ************************************************* 
65BA:  MOVFF  FF2,24E
65BE:  BCF    FF2.7
65C0:  MOVLW  06
65C2:  MOVWF  FA9
65C4:  BCF    FA6.6
65C6:  BCF    FA6.7
65C8:  BSF    FA6.0
65CA:  MOVF   FA8,W
65CC:  BTFSC  x4E.7
65CE:  BSF    FF2.7
65D0:  SUBLW  01
65D2:  BTFSS  FD8.2
65D4:  BRA    6716
65D6:  MOVFF  FF2,24F
65DA:  BCF    FF2.7
65DC:  MOVLW  07
65DE:  MOVWF  FA9
65E0:  BCF    FA6.6
65E2:  BCF    FA6.7
65E4:  BSF    FA6.0
65E6:  MOVF   FA8,W
65E8:  BTFSC  x4F.7
65EA:  BSF    FF2.7
65EC:  SUBLW  01
65EE:  BTFSS  FD8.2
65F0:  BRA    6716
....................          { 
....................             persembe_test(); 
65F2:  MOVLB  0
65F4:  CALL   4DC8
....................                     
....................             if(bit_test(eeprom_test,4)==1) 
65F8:  MOVLB  2
65FA:  BTFSS  x41.4
65FC:  BRA    6604
....................             { 
....................                bit_clear(eeprom_test,4); 
65FE:  BCF    x41.4
....................                goto baslangic; 
6600:  GOTO   5176
....................             } 
....................                    
....................             if(((s1) <= (s3) && (s3) < (s2))) 
6604:  MOVF   x37,W
6606:  SUBWF  x3B,W
6608:  BNC   6648
660A:  BNZ   6612
660C:  MOVF   x36,W
660E:  SUBWF  x3A,W
6610:  BNC   6648
6612:  MOVF   x3B,W
6614:  SUBWF  x39,W
6616:  BNC   6648
6618:  BNZ   6620
661A:  MOVF   x38,W
661C:  SUBWF  x3A,W
661E:  BC    6648
....................             {                  
....................                eeprom(); 
6620:  MOVLB  0
6622:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6626:  MOVLB  2
6628:  BTFSS  x41.0
662A:  BRA    6632
....................                { 
....................                   bit_clear(eeprom_test,0); 
662C:  BCF    x41.0
....................                   goto baslangic; 
662E:  GOTO   5176
....................                } 
....................                calistir(); 
6632:  MOVLB  0
6634:  CALL   4B8E
....................                if(kesme==1) 
6638:  DECFSZ x9C,W
663A:  BRA    6646
....................                {  
....................                   kesme=0; 
663C:  CLRF   x9C
....................                   key=1; 
663E:  MOVLW  01
6640:  MOVWF  xAA
....................                   goto baslangic; 
6642:  GOTO   5174
6646:  MOVLB  2
....................                }   
....................             } 
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
6648:  MOVF   x37,W
664A:  SUBWF  x3B,W
664C:  BNC   6682
664E:  BNZ   6656
6650:  MOVF   x3A,W
6652:  SUBWF  x36,W
6654:  BC    6682
6656:  MOVF   x39,W
6658:  SUBWF  x3B,W
665A:  BNC   6682
665C:  BNZ   6664
665E:  MOVF   x3A,W
6660:  SUBWF  x38,W
6662:  BC    6682
6664:  MOVF   x3B,W
6666:  SUBWF  x3D,W
6668:  BNC   6682
666A:  BNZ   6672
666C:  MOVF   x3C,W
666E:  SUBWF  x3A,W
6670:  BC    6682
....................             { 
....................                if(INTCON.T0IE==1) 
6672:  BTFSS  FF2.5
6674:  BRA    6682
....................                { 
....................                   INTCON.T0IE=0; 
6676:  BCF    FF2.5
....................                   output_low(pin_b0); 
6678:  BCF    F8A.0
....................                   sayi=0; 
667A:  CLRF   x34
667C:  CLRF   x33
667E:  CLRF   x32
6680:  CLRF   x31
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
6682:  MOVLB  0
6684:  DECFSZ x9C,W
6686:  BRA    6692
....................             {  
....................                kesme=0; 
6688:  CLRF   x9C
....................                key=1; 
668A:  MOVLW  01
668C:  MOVWF  xAA
....................                goto baslangic; 
668E:  GOTO   5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
6692:  MOVLB  2
6694:  MOVF   x3D,W
6696:  SUBWF  x3B,W
6698:  BNC   66D8
669A:  BNZ   66A2
669C:  MOVF   x3C,W
669E:  SUBWF  x3A,W
66A0:  BNC   66D8
66A2:  MOVF   x3B,W
66A4:  SUBWF  x3F,W
66A6:  BNC   66D8
66A8:  BNZ   66B0
66AA:  MOVF   x3E,W
66AC:  SUBWF  x3A,W
66AE:  BC    66D8
....................             { 
....................                eeprom(); 
66B0:  MOVLB  0
66B2:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
66B6:  MOVLB  2
66B8:  BTFSS  x41.0
66BA:  BRA    66C2
....................                { 
....................                   bit_clear(eeprom_test,0); 
66BC:  BCF    x41.0
....................                   goto baslangic; 
66BE:  GOTO   5176
....................                } 
....................                calistir(); 
66C2:  MOVLB  0
66C4:  CALL   4B8E
....................                if(kesme==1) 
66C8:  DECFSZ x9C,W
66CA:  BRA    66D6
....................                {  
....................                   kesme=0; 
66CC:  CLRF   x9C
....................                   key=1; 
66CE:  MOVLW  01
66D0:  MOVWF  xAA
....................                   goto baslangic; 
66D2:  GOTO   5174
66D6:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
66D8:  MOVF   x3D,W
66DA:  SUBWF  x3B,W
66DC:  BNC   6704
66DE:  BNZ   66E6
66E0:  MOVF   x3A,W
66E2:  SUBWF  x3C,W
66E4:  BC    6704
66E6:  MOVF   x3F,W
66E8:  SUBWF  x3B,W
66EA:  BNC   6704
66EC:  BNZ   66F4
66EE:  MOVF   x3A,W
66F0:  SUBWF  x3E,W
66F2:  BC    6704
....................             { 
....................                if(INTCON.T0IE==1) 
66F4:  BTFSS  FF2.5
66F6:  BRA    6704
....................                { 
....................                   INTCON.T0IE=0; 
66F8:  BCF    FF2.5
....................                   output_low(pin_b0); 
66FA:  BCF    F8A.0
....................                   sayi=0; 
66FC:  CLRF   x34
66FE:  CLRF   x33
6700:  CLRF   x32
6702:  CLRF   x31
....................                } 
....................             } 
....................             if(kesme==1) 
6704:  MOVLB  0
6706:  DECFSZ x9C,W
6708:  BRA    6714
....................             {  
....................                kesme=0; 
670A:  CLRF   x9C
....................                key=1; 
670C:  MOVLW  01
670E:  MOVWF  xAA
....................                goto baslangic; 
6710:  GOTO   5174
6714:  MOVLB  2
....................             } 
....................          }  
....................       }    
6716:  GOTO   7530
.................... //******************************************************* CUMA CALISMA SARTI ************************************************************        
....................       else if(haftanin_gunu==5) 
671A:  MOVF   x48,W
671C:  SUBLW  05
671E:  BTFSS  FD8.2
6720:  BRA    6BCE
....................       {   
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................          delay_ms(30);   
*
67E4:  MOVLW  1E
67E6:  MOVLB  2
67E8:  MOVWF  x5B
67EA:  MOVLB  0
67EC:  CALL   0192
....................          ata(5); 
67F0:  MOVLW  05
67F2:  MOVLB  2
67F4:  MOVWF  x4E
67F6:  MOVLB  0
67F8:  CALL   39DA
....................              
....................          flag=INTCON.T0IE; 
67FC:  CLRF   xA9
67FE:  BTFSC  FF2.5
6800:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
6802:  MOVLW  0C
6804:  MOVLB  2
6806:  MOVWF  x5A
6808:  MOVLB  0
680A:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
680E:  MOVLW  01
6810:  MOVLB  2
6812:  MOVWF  x5B
6814:  MOVWF  x5C
6816:  MOVLB  0
6818:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
681C:  MOVLW  10
681E:  MOVWF  FE9
6820:  MOVFF  237,24F
6824:  MOVFF  236,24E
6828:  CALL   44FC
682C:  MOVLW  20
682E:  MOVLB  2
6830:  MOVWF  x5A
6832:  MOVLB  0
6834:  CALL   4488
6838:  MOVLW  10
683A:  MOVWF  FE9
683C:  MOVFF  23B,24F
6840:  MOVFF  23A,24E
6844:  CALL   44FC
6848:  MOVLW  20
684A:  MOVLB  2
684C:  MOVWF  x5A
684E:  MOVLB  0
6850:  CALL   4488
6854:  MOVLW  10
6856:  MOVWF  FE9
6858:  MOVFF  239,24F
685C:  MOVFF  238,24E
6860:  CALL   44FC
6864:  MOVLW  20
6866:  MOVLB  2
6868:  MOVWF  x5A
686A:  MOVLB  0
686C:  CALL   4488
6870:  MOVFF  248,24E
6874:  MOVLW  18
6876:  MOVLB  2
6878:  MOVWF  x4F
687A:  MOVLB  0
687C:  CALL   45FA
6880:  MOVLW  20
6882:  MOVLB  2
6884:  MOVWF  x5A
6886:  MOVLB  0
6888:  CALL   4488
688C:  MOVFF  A9,24E
6890:  MOVLW  18
6892:  MOVLB  2
6894:  MOVWF  x4F
6896:  MOVLB  0
6898:  CALL   45FA
....................          lcd_gotoxy(1,2); 
689C:  MOVLW  01
689E:  MOVLB  2
68A0:  MOVWF  x5B
68A2:  MOVLW  02
68A4:  MOVWF  x5C
68A6:  MOVLB  0
68A8:  CALL   4460
....................          printf(lcd_putc,"%02d:%02d:%02d ",saat,dakika,saniye); 
68AC:  MOVFF  244,24E
68B0:  MOVLW  01
68B2:  MOVLB  2
68B4:  MOVWF  x4F
68B6:  MOVLB  0
68B8:  CALL   4C50
68BC:  MOVLW  3A
68BE:  MOVLB  2
68C0:  MOVWF  x5A
68C2:  MOVLB  0
68C4:  CALL   4488
68C8:  MOVFF  243,24E
68CC:  MOVLW  01
68CE:  MOVLB  2
68D0:  MOVWF  x4F
68D2:  MOVLB  0
68D4:  CALL   4C50
68D8:  MOVLW  3A
68DA:  MOVLB  2
68DC:  MOVWF  x5A
68DE:  MOVLB  0
68E0:  CALL   4488
68E4:  MOVFF  242,24E
68E8:  MOVLW  01
68EA:  MOVLB  2
68EC:  MOVWF  x4F
68EE:  MOVLB  0
68F0:  CALL   4C50
68F4:  MOVLW  20
68F6:  MOVLB  2
68F8:  MOVWF  x5A
68FA:  MOVLB  0
68FC:  CALL   4488
....................          delay_ms(100);             
6900:  MOVLW  64
6902:  MOVLB  2
6904:  MOVWF  x5B
6906:  MOVLB  0
6908:  CALL   0192
....................              
....................          if(read_eeprom(8)==1 && read_eeprom(9)==0)   //CUMA 1 ACIK - CUMA 2 KAPALI ************************************************* 
690C:  MOVFF  FF2,24E
6910:  BCF    FF2.7
6912:  MOVLW  08
6914:  MOVWF  FA9
6916:  BCF    FA6.6
6918:  BCF    FA6.7
691A:  BSF    FA6.0
691C:  MOVF   FA8,W
691E:  MOVLB  2
6920:  BTFSC  x4E.7
6922:  BSF    FF2.7
6924:  SUBLW  01
6926:  BNZ   69BE
6928:  MOVFF  FF2,24F
692C:  BCF    FF2.7
692E:  MOVLW  09
6930:  MOVWF  FA9
6932:  BCF    FA6.6
6934:  BCF    FA6.7
6936:  BSF    FA6.0
6938:  MOVF   FA8,W
693A:  BTFSC  x4F.7
693C:  BSF    FF2.7
693E:  XORLW  00
6940:  BNZ   69BE
....................          { 
....................             cuma_test(); 
6942:  MOVLB  0
6944:  CALL   4E78
....................             if(bit_test(eeprom_test,5)==1) 
6948:  MOVLB  2
694A:  BTFSS  x41.5
694C:  BRA    6954
....................             { 
....................                bit_clear(eeprom_test,5); 
694E:  BCF    x41.5
....................                goto baslangic; 
6950:  GOTO   5176
....................             } 
....................                            
....................             if(((s1) <= (s3)) && ((s3) < (s2))) 
6954:  MOVF   x37,W
6956:  SUBWF  x3B,W
6958:  BNC   699A
695A:  BNZ   6962
695C:  MOVF   x36,W
695E:  SUBWF  x3A,W
6960:  BNC   699A
6962:  MOVF   x3B,W
6964:  SUBWF  x39,W
6966:  BNC   699A
6968:  BNZ   6970
696A:  MOVF   x38,W
696C:  SUBWF  x3A,W
696E:  BC    699A
....................             {  
....................                eeprom(); 
6970:  MOVLB  0
6972:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6976:  MOVLB  2
6978:  BTFSS  x41.0
697A:  BRA    6982
....................                { 
....................                   bit_clear(eeprom_test,0); 
697C:  BCF    x41.0
....................                   goto baslangic; 
697E:  GOTO   5176
....................                } 
....................                calistir(); 
6982:  MOVLB  0
6984:  CALL   4B8E
....................                if(kesme==1) 
6988:  DECFSZ x9C,W
698A:  BRA    6996
....................                {  
....................                   kesme=0; 
698C:  CLRF   x9C
....................                   key=1; 
698E:  MOVLW  01
6990:  MOVWF  xAA
....................                   goto baslangic; 
6992:  GOTO   5174
....................                } 
....................             }  
6996:  BRA    69AC
6998:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
699A:  BTFSS  FF2.5
699C:  BRA    69AA
....................                { 
....................                   INTCON.T0IE=0; 
699E:  BCF    FF2.5
....................                   output_low(pin_b0); 
69A0:  BCF    F8A.0
....................                   sayi=0; 
69A2:  CLRF   x34
69A4:  CLRF   x33
69A6:  CLRF   x32
69A8:  CLRF   x31
69AA:  MOVLB  0
....................                } 
....................             } 
....................             if(kesme==1) 
69AC:  DECFSZ x9C,W
69AE:  BRA    69BA
....................             {  
....................                 kesme=0; 
69B0:  CLRF   x9C
....................                key=1; 
69B2:  MOVLW  01
69B4:  MOVWF  xAA
....................                goto baslangic; 
69B6:  GOTO   5174
....................             } 
....................          } 
69BA:  BRA    6BC8
69BC:  MOVLB  2
....................              
....................          else if(read_eeprom(8)==0 && read_eeprom(9)==1)   //CUMA 2 ACIK - CUMA 1 KAPALI ************************************************* 
69BE:  MOVFF  FF2,24E
69C2:  BCF    FF2.7
69C4:  MOVLW  08
69C6:  MOVWF  FA9
69C8:  BCF    FA6.6
69CA:  BCF    FA6.7
69CC:  BSF    FA6.0
69CE:  MOVF   FA8,W
69D0:  BTFSC  x4E.7
69D2:  BSF    FF2.7
69D4:  XORLW  00
69D6:  BNZ   6A6E
69D8:  MOVFF  FF2,24F
69DC:  BCF    FF2.7
69DE:  MOVLW  09
69E0:  MOVWF  FA9
69E2:  BCF    FA6.6
69E4:  BCF    FA6.7
69E6:  BSF    FA6.0
69E8:  MOVF   FA8,W
69EA:  BTFSC  x4F.7
69EC:  BSF    FF2.7
69EE:  SUBLW  01
69F0:  BNZ   6A6E
....................          { 
....................             cuma_test(); 
69F2:  MOVLB  0
69F4:  CALL   4E78
....................             if(bit_test(eeprom_test,5)==1) 
69F8:  MOVLB  2
69FA:  BTFSS  x41.5
69FC:  BRA    6A04
....................             { 
....................                    bit_clear(eeprom_test,5); 
69FE:  BCF    x41.5
....................                    goto baslangic; 
6A00:  GOTO   5176
....................             } 
....................  
....................             if(((s4) <= (s3) && (s3) < (s5))) 
6A04:  MOVF   x3D,W
6A06:  SUBWF  x3B,W
6A08:  BNC   6A4A
6A0A:  BNZ   6A12
6A0C:  MOVF   x3C,W
6A0E:  SUBWF  x3A,W
6A10:  BNC   6A4A
6A12:  MOVF   x3B,W
6A14:  SUBWF  x3F,W
6A16:  BNC   6A4A
6A18:  BNZ   6A20
6A1A:  MOVF   x3E,W
6A1C:  SUBWF  x3A,W
6A1E:  BC    6A4A
....................             {   
....................                eeprom(); 
6A20:  MOVLB  0
6A22:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6A26:  MOVLB  2
6A28:  BTFSS  x41.0
6A2A:  BRA    6A32
....................                { 
....................                   bit_clear(eeprom_test,0); 
6A2C:  BCF    x41.0
....................                   goto baslangic; 
6A2E:  GOTO   5176
....................                } 
....................                calistir(); 
6A32:  MOVLB  0
6A34:  CALL   4B8E
....................                if(kesme==1) 
6A38:  DECFSZ x9C,W
6A3A:  BRA    6A46
....................                {  
....................                   kesme=0; 
6A3C:  CLRF   x9C
....................                   key=1; 
6A3E:  MOVLW  01
6A40:  MOVWF  xAA
....................                   goto baslangic; 
6A42:  GOTO   5174
....................                } 
....................             } 
6A46:  BRA    6A5C
6A48:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
6A4A:  BTFSS  FF2.5
6A4C:  BRA    6A5A
....................                { 
....................                   INTCON.T0IE=0; 
6A4E:  BCF    FF2.5
....................                   output_low(pin_b0); 
6A50:  BCF    F8A.0
....................                   sayi=0; 
6A52:  CLRF   x34
6A54:  CLRF   x33
6A56:  CLRF   x32
6A58:  CLRF   x31
6A5A:  MOVLB  0
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
6A5C:  DECFSZ x9C,W
6A5E:  BRA    6A6A
....................             {  
....................                kesme=0; 
6A60:  CLRF   x9C
....................                key=1; 
6A62:  MOVLW  01
6A64:  MOVWF  xAA
....................                goto baslangic; 
6A66:  GOTO   5174
....................             } 
....................          } 
6A6A:  BRA    6BC8
6A6C:  MOVLB  2
....................           
....................          else if(read_eeprom(8)==1 && read_eeprom(9)==1)   //CUMA 1 ACIK - CUMA 2 ACIK ************************************************* 
6A6E:  MOVFF  FF2,24E
6A72:  BCF    FF2.7
6A74:  MOVLW  08
6A76:  MOVWF  FA9
6A78:  BCF    FA6.6
6A7A:  BCF    FA6.7
6A7C:  BSF    FA6.0
6A7E:  MOVF   FA8,W
6A80:  BTFSC  x4E.7
6A82:  BSF    FF2.7
6A84:  SUBLW  01
6A86:  BTFSS  FD8.2
6A88:  BRA    6BCA
6A8A:  MOVFF  FF2,24F
6A8E:  BCF    FF2.7
6A90:  MOVLW  09
6A92:  MOVWF  FA9
6A94:  BCF    FA6.6
6A96:  BCF    FA6.7
6A98:  BSF    FA6.0
6A9A:  MOVF   FA8,W
6A9C:  BTFSC  x4F.7
6A9E:  BSF    FF2.7
6AA0:  SUBLW  01
6AA2:  BTFSS  FD8.2
6AA4:  BRA    6BCA
....................          { 
....................             cuma_test(); 
6AA6:  MOVLB  0
6AA8:  CALL   4E78
....................                    
....................             if(bit_test(eeprom_test,5)==1) 
6AAC:  MOVLB  2
6AAE:  BTFSS  x41.5
6AB0:  BRA    6AB8
....................             { 
....................                bit_clear(eeprom_test,5); 
6AB2:  BCF    x41.5
....................                goto baslangic; 
6AB4:  GOTO   5176
....................             } 
....................  
....................             if(((s1) <= (s3) && (s3) < (s2))) 
6AB8:  MOVF   x37,W
6ABA:  SUBWF  x3B,W
6ABC:  BNC   6AFC
6ABE:  BNZ   6AC6
6AC0:  MOVF   x36,W
6AC2:  SUBWF  x3A,W
6AC4:  BNC   6AFC
6AC6:  MOVF   x3B,W
6AC8:  SUBWF  x39,W
6ACA:  BNC   6AFC
6ACC:  BNZ   6AD4
6ACE:  MOVF   x38,W
6AD0:  SUBWF  x3A,W
6AD2:  BC    6AFC
....................             { 
....................                eeprom(); 
6AD4:  MOVLB  0
6AD6:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6ADA:  MOVLB  2
6ADC:  BTFSS  x41.0
6ADE:  BRA    6AE6
....................                { 
....................                   bit_clear(eeprom_test,0); 
6AE0:  BCF    x41.0
....................                   goto baslangic; 
6AE2:  GOTO   5176
....................                } 
....................                calistir(); 
6AE6:  MOVLB  0
6AE8:  CALL   4B8E
....................                if(kesme==1) 
6AEC:  DECFSZ x9C,W
6AEE:  BRA    6AFA
....................                {  
....................                   kesme=0; 
6AF0:  CLRF   x9C
....................                   key=1; 
6AF2:  MOVLW  01
6AF4:  MOVWF  xAA
....................                   goto baslangic; 
6AF6:  GOTO   5174
6AFA:  MOVLB  2
....................                }   
....................             } 
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
6AFC:  MOVF   x37,W
6AFE:  SUBWF  x3B,W
6B00:  BNC   6B36
6B02:  BNZ   6B0A
6B04:  MOVF   x3A,W
6B06:  SUBWF  x36,W
6B08:  BC    6B36
6B0A:  MOVF   x39,W
6B0C:  SUBWF  x3B,W
6B0E:  BNC   6B36
6B10:  BNZ   6B18
6B12:  MOVF   x3A,W
6B14:  SUBWF  x38,W
6B16:  BC    6B36
6B18:  MOVF   x3B,W
6B1A:  SUBWF  x3D,W
6B1C:  BNC   6B36
6B1E:  BNZ   6B26
6B20:  MOVF   x3C,W
6B22:  SUBWF  x3A,W
6B24:  BC    6B36
....................             { 
....................                if(INTCON.T0IE==1) 
6B26:  BTFSS  FF2.5
6B28:  BRA    6B36
....................                { 
....................                   INTCON.T0IE=0; 
6B2A:  BCF    FF2.5
....................                   output_low(pin_b0); 
6B2C:  BCF    F8A.0
....................                   sayi=0; 
6B2E:  CLRF   x34
6B30:  CLRF   x33
6B32:  CLRF   x32
6B34:  CLRF   x31
....................                } 
....................             } 
....................             if(kesme==1) 
6B36:  MOVLB  0
6B38:  DECFSZ x9C,W
6B3A:  BRA    6B46
....................             {  
....................                kesme=0; 
6B3C:  CLRF   x9C
....................                key=1; 
6B3E:  MOVLW  01
6B40:  MOVWF  xAA
....................                goto baslangic; 
6B42:  GOTO   5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
6B46:  MOVLB  2
6B48:  MOVF   x3D,W
6B4A:  SUBWF  x3B,W
6B4C:  BNC   6B8C
6B4E:  BNZ   6B56
6B50:  MOVF   x3C,W
6B52:  SUBWF  x3A,W
6B54:  BNC   6B8C
6B56:  MOVF   x3B,W
6B58:  SUBWF  x3F,W
6B5A:  BNC   6B8C
6B5C:  BNZ   6B64
6B5E:  MOVF   x3E,W
6B60:  SUBWF  x3A,W
6B62:  BC    6B8C
....................             {   
....................                eeprom(); 
6B64:  MOVLB  0
6B66:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6B6A:  MOVLB  2
6B6C:  BTFSS  x41.0
6B6E:  BRA    6B76
....................                { 
....................                   bit_clear(eeprom_test,0); 
6B70:  BCF    x41.0
....................                   goto baslangic; 
6B72:  GOTO   5176
....................                } 
....................                calistir(); 
6B76:  MOVLB  0
6B78:  CALL   4B8E
....................                if(kesme==1)    
6B7C:  DECFSZ x9C,W
6B7E:  BRA    6B8A
....................                {  
....................                   kesme=0; 
6B80:  CLRF   x9C
....................                   key=1; 
6B82:  MOVLW  01
6B84:  MOVWF  xAA
....................                   goto baslangic; 
6B86:  GOTO   5174
6B8A:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
6B8C:  MOVF   x3D,W
6B8E:  SUBWF  x3B,W
6B90:  BNC   6BB8
6B92:  BNZ   6B9A
6B94:  MOVF   x3A,W
6B96:  SUBWF  x3C,W
6B98:  BC    6BB8
6B9A:  MOVF   x3F,W
6B9C:  SUBWF  x3B,W
6B9E:  BNC   6BB8
6BA0:  BNZ   6BA8
6BA2:  MOVF   x3A,W
6BA4:  SUBWF  x3E,W
6BA6:  BC    6BB8
....................             { 
....................                if(INTCON.T0IE==1) 
6BA8:  BTFSS  FF2.5
6BAA:  BRA    6BB8
....................                { 
....................                   INTCON.T0IE=0; 
6BAC:  BCF    FF2.5
....................                   output_low(pin_b0); 
6BAE:  BCF    F8A.0
....................                   sayi=0; 
6BB0:  CLRF   x34
6BB2:  CLRF   x33
6BB4:  CLRF   x32
6BB6:  CLRF   x31
....................                } 
....................             } 
....................             if(kesme==1) 
6BB8:  MOVLB  0
6BBA:  DECFSZ x9C,W
6BBC:  BRA    6BC8
....................             {  
....................                kesme=0; 
6BBE:  CLRF   x9C
....................                key=1; 
6BC0:  MOVLW  01
6BC2:  MOVWF  xAA
....................                goto baslangic; 
6BC4:  GOTO   5174
6BC8:  MOVLB  2
....................             } 
....................          } 
....................       }     
6BCA:  GOTO   7530
.................... //******************************************************* CUMARTESI CALISMA SARTI ****************************************************************         
....................       else if(haftanin_gunu==6) 
6BCE:  MOVF   x48,W
6BD0:  SUBLW  06
6BD2:  BTFSS  FD8.2
6BD4:  BRA    7080
....................       {  
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................          delay_ms(30);  
*
6C98:  MOVLW  1E
6C9A:  MOVLB  2
6C9C:  MOVWF  x5B
6C9E:  MOVLB  0
6CA0:  CALL   0192
....................          ata(6); 
6CA4:  MOVLW  06
6CA6:  MOVLB  2
6CA8:  MOVWF  x4E
6CAA:  MOVLB  0
6CAC:  CALL   39DA
....................           
....................          flag=INTCON.T0IE; 
6CB0:  CLRF   xA9
6CB2:  BTFSC  FF2.5
6CB4:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
6CB6:  MOVLW  0C
6CB8:  MOVLB  2
6CBA:  MOVWF  x5A
6CBC:  MOVLB  0
6CBE:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
6CC2:  MOVLW  01
6CC4:  MOVLB  2
6CC6:  MOVWF  x5B
6CC8:  MOVWF  x5C
6CCA:  MOVLB  0
6CCC:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
6CD0:  MOVLW  10
6CD2:  MOVWF  FE9
6CD4:  MOVFF  237,24F
6CD8:  MOVFF  236,24E
6CDC:  CALL   44FC
6CE0:  MOVLW  20
6CE2:  MOVLB  2
6CE4:  MOVWF  x5A
6CE6:  MOVLB  0
6CE8:  CALL   4488
6CEC:  MOVLW  10
6CEE:  MOVWF  FE9
6CF0:  MOVFF  23B,24F
6CF4:  MOVFF  23A,24E
6CF8:  CALL   44FC
6CFC:  MOVLW  20
6CFE:  MOVLB  2
6D00:  MOVWF  x5A
6D02:  MOVLB  0
6D04:  CALL   4488
6D08:  MOVLW  10
6D0A:  MOVWF  FE9
6D0C:  MOVFF  239,24F
6D10:  MOVFF  238,24E
6D14:  CALL   44FC
6D18:  MOVLW  20
6D1A:  MOVLB  2
6D1C:  MOVWF  x5A
6D1E:  MOVLB  0
6D20:  CALL   4488
6D24:  MOVFF  248,24E
6D28:  MOVLW  18
6D2A:  MOVLB  2
6D2C:  MOVWF  x4F
6D2E:  MOVLB  0
6D30:  CALL   45FA
6D34:  MOVLW  20
6D36:  MOVLB  2
6D38:  MOVWF  x5A
6D3A:  MOVLB  0
6D3C:  CALL   4488
6D40:  MOVFF  A9,24E
6D44:  MOVLW  18
6D46:  MOVLB  2
6D48:  MOVWF  x4F
6D4A:  MOVLB  0
6D4C:  CALL   45FA
....................          lcd_gotoxy(1,2); 
6D50:  MOVLW  01
6D52:  MOVLB  2
6D54:  MOVWF  x5B
6D56:  MOVLW  02
6D58:  MOVWF  x5C
6D5A:  MOVLB  0
6D5C:  CALL   4460
....................          printf(lcd_putc,"%02d:%02d:%02d ",saat,dakika,saniye); 
6D60:  MOVFF  244,24E
6D64:  MOVLW  01
6D66:  MOVLB  2
6D68:  MOVWF  x4F
6D6A:  MOVLB  0
6D6C:  CALL   4C50
6D70:  MOVLW  3A
6D72:  MOVLB  2
6D74:  MOVWF  x5A
6D76:  MOVLB  0
6D78:  CALL   4488
6D7C:  MOVFF  243,24E
6D80:  MOVLW  01
6D82:  MOVLB  2
6D84:  MOVWF  x4F
6D86:  MOVLB  0
6D88:  CALL   4C50
6D8C:  MOVLW  3A
6D8E:  MOVLB  2
6D90:  MOVWF  x5A
6D92:  MOVLB  0
6D94:  CALL   4488
6D98:  MOVFF  242,24E
6D9C:  MOVLW  01
6D9E:  MOVLB  2
6DA0:  MOVWF  x4F
6DA2:  MOVLB  0
6DA4:  CALL   4C50
6DA8:  MOVLW  20
6DAA:  MOVLB  2
6DAC:  MOVWF  x5A
6DAE:  MOVLB  0
6DB0:  CALL   4488
....................          delay_ms(100); 
6DB4:  MOVLW  64
6DB6:  MOVLB  2
6DB8:  MOVWF  x5B
6DBA:  MOVLB  0
6DBC:  CALL   0192
....................              
....................          if(read_eeprom(10)==1 && read_eeprom(11)==0)   //CUMARTESÝ 1 ACIK-CUMARTESÝ 2 KAPALI ************************************************* 
6DC0:  MOVFF  FF2,24E
6DC4:  BCF    FF2.7
6DC6:  MOVLW  0A
6DC8:  MOVWF  FA9
6DCA:  BCF    FA6.6
6DCC:  BCF    FA6.7
6DCE:  BSF    FA6.0
6DD0:  MOVF   FA8,W
6DD2:  MOVLB  2
6DD4:  BTFSC  x4E.7
6DD6:  BSF    FF2.7
6DD8:  SUBLW  01
6DDA:  BNZ   6E72
6DDC:  MOVFF  FF2,24F
6DE0:  BCF    FF2.7
6DE2:  MOVLW  0B
6DE4:  MOVWF  FA9
6DE6:  BCF    FA6.6
6DE8:  BCF    FA6.7
6DEA:  BSF    FA6.0
6DEC:  MOVF   FA8,W
6DEE:  BTFSC  x4F.7
6DF0:  BSF    FF2.7
6DF2:  XORLW  00
6DF4:  BNZ   6E72
....................          { 
....................             cumartesi_test(); 
6DF6:  MOVLB  0
6DF8:  CALL   4F28
....................                   
....................             if(bit_test(eeprom_test,6)==1) 
6DFC:  MOVLB  2
6DFE:  BTFSS  x41.6
6E00:  BRA    6E08
....................             { 
....................                bit_clear(eeprom_test,6); 
6E02:  BCF    x41.6
....................                goto baslangic; 
6E04:  GOTO   5176
....................             } 
....................              
....................             if(((s1) <= (s3)) && ((s3) < (s2))) 
6E08:  MOVF   x37,W
6E0A:  SUBWF  x3B,W
6E0C:  BNC   6E4E
6E0E:  BNZ   6E16
6E10:  MOVF   x36,W
6E12:  SUBWF  x3A,W
6E14:  BNC   6E4E
6E16:  MOVF   x3B,W
6E18:  SUBWF  x39,W
6E1A:  BNC   6E4E
6E1C:  BNZ   6E24
6E1E:  MOVF   x38,W
6E20:  SUBWF  x3A,W
6E22:  BC    6E4E
....................             {    
....................                eeprom(); 
6E24:  MOVLB  0
6E26:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6E2A:  MOVLB  2
6E2C:  BTFSS  x41.0
6E2E:  BRA    6E36
....................                { 
....................                   bit_clear(eeprom_test,0); 
6E30:  BCF    x41.0
....................                   goto baslangic; 
6E32:  GOTO   5176
....................                } 
....................                calistir(); 
6E36:  MOVLB  0
6E38:  CALL   4B8E
....................                if(kesme==1) 
6E3C:  DECFSZ x9C,W
6E3E:  BRA    6E4A
....................                {  
....................                   kesme=0; 
6E40:  CLRF   x9C
....................                   key=1; 
6E42:  MOVLW  01
6E44:  MOVWF  xAA
....................                   goto baslangic; 
6E46:  GOTO   5174
....................                } 
....................             }  
6E4A:  BRA    6E60
6E4C:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
6E4E:  BTFSS  FF2.5
6E50:  BRA    6E5E
....................                { 
....................                   INTCON.T0IE=0; 
6E52:  BCF    FF2.5
....................                   output_low(pin_b0); 
6E54:  BCF    F8A.0
....................                   sayi=0; 
6E56:  CLRF   x34
6E58:  CLRF   x33
6E5A:  CLRF   x32
6E5C:  CLRF   x31
6E5E:  MOVLB  0
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
6E60:  DECFSZ x9C,W
6E62:  BRA    6E6E
....................             {  
....................                kesme=0; 
6E64:  CLRF   x9C
....................                key=1; 
6E66:  MOVLW  01
6E68:  MOVWF  xAA
....................                goto baslangic; 
6E6A:  GOTO   5174
....................             } 
....................          } 
6E6E:  BRA    707C
6E70:  MOVLB  2
....................              
....................          else if(read_eeprom(10)==0 && read_eeprom(11)==1)   //CUMARTESÝ 2 ACIK-CUMARTESÝ 1 KAPALI ************************************************* 
6E72:  MOVFF  FF2,24E
6E76:  BCF    FF2.7
6E78:  MOVLW  0A
6E7A:  MOVWF  FA9
6E7C:  BCF    FA6.6
6E7E:  BCF    FA6.7
6E80:  BSF    FA6.0
6E82:  MOVF   FA8,W
6E84:  BTFSC  x4E.7
6E86:  BSF    FF2.7
6E88:  XORLW  00
6E8A:  BNZ   6F22
6E8C:  MOVFF  FF2,24F
6E90:  BCF    FF2.7
6E92:  MOVLW  0B
6E94:  MOVWF  FA9
6E96:  BCF    FA6.6
6E98:  BCF    FA6.7
6E9A:  BSF    FA6.0
6E9C:  MOVF   FA8,W
6E9E:  BTFSC  x4F.7
6EA0:  BSF    FF2.7
6EA2:  SUBLW  01
6EA4:  BNZ   6F22
....................          { 
....................             cumartesi_test(); 
6EA6:  MOVLB  0
6EA8:  CALL   4F28
....................                   
....................             if(bit_test(eeprom_test,6)==1) 
6EAC:  MOVLB  2
6EAE:  BTFSS  x41.6
6EB0:  BRA    6EB8
....................             { 
....................                bit_clear(eeprom_test,6); 
6EB2:  BCF    x41.6
....................                goto baslangic; 
6EB4:  GOTO   5176
....................             }   
....................             if(((s4) <= (s3) && (s3) < (s5))) 
6EB8:  MOVF   x3D,W
6EBA:  SUBWF  x3B,W
6EBC:  BNC   6EFE
6EBE:  BNZ   6EC6
6EC0:  MOVF   x3C,W
6EC2:  SUBWF  x3A,W
6EC4:  BNC   6EFE
6EC6:  MOVF   x3B,W
6EC8:  SUBWF  x3F,W
6ECA:  BNC   6EFE
6ECC:  BNZ   6ED4
6ECE:  MOVF   x3E,W
6ED0:  SUBWF  x3A,W
6ED2:  BC    6EFE
....................             {  
....................                eeprom(); 
6ED4:  MOVLB  0
6ED6:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6EDA:  MOVLB  2
6EDC:  BTFSS  x41.0
6EDE:  BRA    6EE6
....................                { 
....................                   bit_clear(eeprom_test,0); 
6EE0:  BCF    x41.0
....................                   goto baslangic; 
6EE2:  GOTO   5176
....................                } 
....................                calistir();             
6EE6:  MOVLB  0
6EE8:  CALL   4B8E
....................                if(kesme==1) 
6EEC:  DECFSZ x9C,W
6EEE:  BRA    6EFA
....................                {  
....................                   kesme=0; 
6EF0:  CLRF   x9C
....................                   key=1; 
6EF2:  MOVLW  01
6EF4:  MOVWF  xAA
....................                   goto baslangic; 
6EF6:  GOTO   5174
....................                } 
....................             } 
6EFA:  BRA    6F10
6EFC:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
6EFE:  BTFSS  FF2.5
6F00:  BRA    6F0E
....................                { 
....................                   INTCON.T0IE=0; 
6F02:  BCF    FF2.5
....................                   output_low(pin_b0); 
6F04:  BCF    F8A.0
....................                   sayi=0; 
6F06:  CLRF   x34
6F08:  CLRF   x33
6F0A:  CLRF   x32
6F0C:  CLRF   x31
6F0E:  MOVLB  0
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
6F10:  DECFSZ x9C,W
6F12:  BRA    6F1E
....................             {  
....................                kesme=0; 
6F14:  CLRF   x9C
....................                key=1; 
6F16:  MOVLW  01
6F18:  MOVWF  xAA
....................                goto baslangic; 
6F1A:  GOTO   5174
....................             } 
....................          } 
6F1E:  BRA    707C
6F20:  MOVLB  2
....................           
....................          else if(read_eeprom(10)==1 && read_eeprom(11)==1)   //CUMARTESÝ 1 ACIK-CUMARTESÝ 2 ACIK ************************************************* 
6F22:  MOVFF  FF2,24E
6F26:  BCF    FF2.7
6F28:  MOVLW  0A
6F2A:  MOVWF  FA9
6F2C:  BCF    FA6.6
6F2E:  BCF    FA6.7
6F30:  BSF    FA6.0
6F32:  MOVF   FA8,W
6F34:  BTFSC  x4E.7
6F36:  BSF    FF2.7
6F38:  SUBLW  01
6F3A:  BTFSS  FD8.2
6F3C:  BRA    707E
6F3E:  MOVFF  FF2,24F
6F42:  BCF    FF2.7
6F44:  MOVLW  0B
6F46:  MOVWF  FA9
6F48:  BCF    FA6.6
6F4A:  BCF    FA6.7
6F4C:  BSF    FA6.0
6F4E:  MOVF   FA8,W
6F50:  BTFSC  x4F.7
6F52:  BSF    FF2.7
6F54:  SUBLW  01
6F56:  BTFSS  FD8.2
6F58:  BRA    707E
....................          { 
....................             cumartesi_test(); 
6F5A:  MOVLB  0
6F5C:  CALL   4F28
....................                   
....................             if(bit_test(eeprom_test,6)==1) 
6F60:  MOVLB  2
6F62:  BTFSS  x41.6
6F64:  BRA    6F6C
....................             { 
....................                bit_clear(eeprom_test,6); 
6F66:  BCF    x41.6
....................                goto baslangic; 
6F68:  GOTO   5176
....................             } 
....................                    
....................             if(((s1) <= (s3) && (s3) < (s2))) 
6F6C:  MOVF   x37,W
6F6E:  SUBWF  x3B,W
6F70:  BNC   6FB0
6F72:  BNZ   6F7A
6F74:  MOVF   x36,W
6F76:  SUBWF  x3A,W
6F78:  BNC   6FB0
6F7A:  MOVF   x3B,W
6F7C:  SUBWF  x39,W
6F7E:  BNC   6FB0
6F80:  BNZ   6F88
6F82:  MOVF   x38,W
6F84:  SUBWF  x3A,W
6F86:  BC    6FB0
....................             { 
....................                eeprom(); 
6F88:  MOVLB  0
6F8A:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
6F8E:  MOVLB  2
6F90:  BTFSS  x41.0
6F92:  BRA    6F9A
....................                { 
....................                   bit_clear(eeprom_test,0); 
6F94:  BCF    x41.0
....................                   goto baslangic; 
6F96:  GOTO   5176
....................                } 
....................                calistir(); 
6F9A:  MOVLB  0
6F9C:  CALL   4B8E
....................                if(kesme==1) 
6FA0:  DECFSZ x9C,W
6FA2:  BRA    6FAE
....................                {  
....................                   kesme=0; 
6FA4:  CLRF   x9C
....................                   key=1; 
6FA6:  MOVLW  01
6FA8:  MOVWF  xAA
....................                   goto baslangic; 
6FAA:  GOTO   5174
6FAE:  MOVLB  2
....................                }   
....................             } 
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
6FB0:  MOVF   x37,W
6FB2:  SUBWF  x3B,W
6FB4:  BNC   6FEA
6FB6:  BNZ   6FBE
6FB8:  MOVF   x3A,W
6FBA:  SUBWF  x36,W
6FBC:  BC    6FEA
6FBE:  MOVF   x39,W
6FC0:  SUBWF  x3B,W
6FC2:  BNC   6FEA
6FC4:  BNZ   6FCC
6FC6:  MOVF   x3A,W
6FC8:  SUBWF  x38,W
6FCA:  BC    6FEA
6FCC:  MOVF   x3B,W
6FCE:  SUBWF  x3D,W
6FD0:  BNC   6FEA
6FD2:  BNZ   6FDA
6FD4:  MOVF   x3C,W
6FD6:  SUBWF  x3A,W
6FD8:  BC    6FEA
....................             { 
....................                if(INTCON.T0IE==1) 
6FDA:  BTFSS  FF2.5
6FDC:  BRA    6FEA
....................                { 
....................                   INTCON.T0IE=0; 
6FDE:  BCF    FF2.5
....................                   output_low(pin_b0); 
6FE0:  BCF    F8A.0
....................                   sayi=0; 
6FE2:  CLRF   x34
6FE4:  CLRF   x33
6FE6:  CLRF   x32
6FE8:  CLRF   x31
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
6FEA:  MOVLB  0
6FEC:  DECFSZ x9C,W
6FEE:  BRA    6FFA
....................             {  
....................                kesme=0; 
6FF0:  CLRF   x9C
....................                key=1; 
6FF2:  MOVLW  01
6FF4:  MOVWF  xAA
....................                goto baslangic; 
6FF6:  GOTO   5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
6FFA:  MOVLB  2
6FFC:  MOVF   x3D,W
6FFE:  SUBWF  x3B,W
7000:  BNC   7040
7002:  BNZ   700A
7004:  MOVF   x3C,W
7006:  SUBWF  x3A,W
7008:  BNC   7040
700A:  MOVF   x3B,W
700C:  SUBWF  x3F,W
700E:  BNC   7040
7010:  BNZ   7018
7012:  MOVF   x3E,W
7014:  SUBWF  x3A,W
7016:  BC    7040
....................             { 
....................                eeprom(); 
7018:  MOVLB  0
701A:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
701E:  MOVLB  2
7020:  BTFSS  x41.0
7022:  BRA    702A
....................                { 
....................                   bit_clear(eeprom_test,0); 
7024:  BCF    x41.0
....................                   goto baslangic; 
7026:  GOTO   5176
....................                } 
....................                calistir(); 
702A:  MOVLB  0
702C:  CALL   4B8E
....................                if(kesme==1) 
7030:  DECFSZ x9C,W
7032:  BRA    703E
....................                {  
....................                   kesme=0; 
7034:  CLRF   x9C
....................                   key=1; 
7036:  MOVLW  01
7038:  MOVWF  xAA
....................                   goto baslangic; 
703A:  GOTO   5174
703E:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
7040:  MOVF   x3D,W
7042:  SUBWF  x3B,W
7044:  BNC   706C
7046:  BNZ   704E
7048:  MOVF   x3A,W
704A:  SUBWF  x3C,W
704C:  BC    706C
704E:  MOVF   x3F,W
7050:  SUBWF  x3B,W
7052:  BNC   706C
7054:  BNZ   705C
7056:  MOVF   x3A,W
7058:  SUBWF  x3E,W
705A:  BC    706C
....................             { 
....................                if(INTCON.T0IE==1) 
705C:  BTFSS  FF2.5
705E:  BRA    706C
....................                { 
....................                   INTCON.T0IE=0; 
7060:  BCF    FF2.5
....................                   output_low(pin_b0); 
7062:  BCF    F8A.0
....................                   sayi=0; 
7064:  CLRF   x34
7066:  CLRF   x33
7068:  CLRF   x32
706A:  CLRF   x31
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
706C:  MOVLB  0
706E:  DECFSZ x9C,W
7070:  BRA    707C
....................             {  
....................                kesme=0; 
7072:  CLRF   x9C
....................                key=1; 
7074:  MOVLW  01
7076:  MOVWF  xAA
....................                goto baslangic; 
7078:  GOTO   5174
707C:  MOVLB  2
....................             } 
....................          } 
....................       }     
707E:  BRA    7530
.................... //******************************************************* PAZAR CALISMA SARTI *********************************************************** 
....................       else if(haftanin_gunu==7) 
7080:  MOVF   x48,W
7082:  SUBLW  07
7084:  BTFSS  FD8.2
7086:  BRA    7530
....................       {  
....................          rtc_get_time(saat,dakika,saniye); 
....................          rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................          delay_ms(30); 
*
714A:  MOVLW  1E
714C:  MOVLB  2
714E:  MOVWF  x5B
7150:  MOVLB  0
7152:  CALL   0192
....................              
....................          ata(7); 
7156:  MOVLW  07
7158:  MOVLB  2
715A:  MOVWF  x4E
715C:  MOVLB  0
715E:  CALL   39DA
....................              
....................          flag=INTCON.T0IE; 
7162:  CLRF   xA9
7164:  BTFSC  FF2.5
7166:  INCF   xA9,F
....................          printf(lcd_putc,"\f"); 
7168:  MOVLW  0C
716A:  MOVLB  2
716C:  MOVWF  x5A
716E:  MOVLB  0
7170:  CALL   4488
....................          lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
7174:  MOVLW  01
7176:  MOVLB  2
7178:  MOVWF  x5B
717A:  MOVWF  x5C
717C:  MOVLB  0
717E:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld %d %d",s1,s3,s2,haftanin_gunu,flag);   
7182:  MOVLW  10
7184:  MOVWF  FE9
7186:  MOVFF  237,24F
718A:  MOVFF  236,24E
718E:  CALL   44FC
7192:  MOVLW  20
7194:  MOVLB  2
7196:  MOVWF  x5A
7198:  MOVLB  0
719A:  CALL   4488
719E:  MOVLW  10
71A0:  MOVWF  FE9
71A2:  MOVFF  23B,24F
71A6:  MOVFF  23A,24E
71AA:  CALL   44FC
71AE:  MOVLW  20
71B0:  MOVLB  2
71B2:  MOVWF  x5A
71B4:  MOVLB  0
71B6:  CALL   4488
71BA:  MOVLW  10
71BC:  MOVWF  FE9
71BE:  MOVFF  239,24F
71C2:  MOVFF  238,24E
71C6:  CALL   44FC
71CA:  MOVLW  20
71CC:  MOVLB  2
71CE:  MOVWF  x5A
71D0:  MOVLB  0
71D2:  CALL   4488
71D6:  MOVFF  248,24E
71DA:  MOVLW  18
71DC:  MOVLB  2
71DE:  MOVWF  x4F
71E0:  MOVLB  0
71E2:  CALL   45FA
71E6:  MOVLW  20
71E8:  MOVLB  2
71EA:  MOVWF  x5A
71EC:  MOVLB  0
71EE:  CALL   4488
71F2:  MOVFF  A9,24E
71F6:  MOVLW  18
71F8:  MOVLB  2
71FA:  MOVWF  x4F
71FC:  MOVLB  0
71FE:  CALL   45FA
....................          lcd_gotoxy(1,2); 
7202:  MOVLW  01
7204:  MOVLB  2
7206:  MOVWF  x5B
7208:  MOVLW  02
720A:  MOVWF  x5C
720C:  MOVLB  0
720E:  CALL   4460
....................          printf(lcd_putc,"%ld %ld %ld ",s4,s3,s5); 
7212:  MOVLW  10
7214:  MOVWF  FE9
7216:  MOVFF  23D,24F
721A:  MOVFF  23C,24E
721E:  CALL   44FC
7222:  MOVLW  20
7224:  MOVLB  2
7226:  MOVWF  x5A
7228:  MOVLB  0
722A:  CALL   4488
722E:  MOVLW  10
7230:  MOVWF  FE9
7232:  MOVFF  23B,24F
7236:  MOVFF  23A,24E
723A:  CALL   44FC
723E:  MOVLW  20
7240:  MOVLB  2
7242:  MOVWF  x5A
7244:  MOVLB  0
7246:  CALL   4488
724A:  MOVLW  10
724C:  MOVWF  FE9
724E:  MOVFF  23F,24F
7252:  MOVFF  23E,24E
7256:  CALL   44FC
725A:  MOVLW  20
725C:  MOVLB  2
725E:  MOVWF  x5A
7260:  MOVLB  0
7262:  CALL   4488
....................          delay_ms(100); 
7266:  MOVLW  64
7268:  MOVLB  2
726A:  MOVWF  x5B
726C:  MOVLB  0
726E:  CALL   0192
....................  
....................          if(read_eeprom(12)==1 && read_eeprom(13)==0)   //PAZAR 1 ACIK-PAZAR 2 KAPALI ************************************************* 
7272:  MOVFF  FF2,24E
7276:  BCF    FF2.7
7278:  MOVLW  0C
727A:  MOVWF  FA9
727C:  BCF    FA6.6
727E:  BCF    FA6.7
7280:  BSF    FA6.0
7282:  MOVF   FA8,W
7284:  MOVLB  2
7286:  BTFSC  x4E.7
7288:  BSF    FF2.7
728A:  SUBLW  01
728C:  BNZ   7324
728E:  MOVFF  FF2,24F
7292:  BCF    FF2.7
7294:  MOVLW  0D
7296:  MOVWF  FA9
7298:  BCF    FA6.6
729A:  BCF    FA6.7
729C:  BSF    FA6.0
729E:  MOVF   FA8,W
72A0:  BTFSC  x4F.7
72A2:  BSF    FF2.7
72A4:  XORLW  00
72A6:  BNZ   7324
....................          { 
....................             pazar_test(); 
72A8:  MOVLB  0
72AA:  CALL   4FD6
....................                   
....................             if(bit_test(eeprom_test,7)==1) 
72AE:  MOVLB  2
72B0:  BTFSS  x41.7
72B2:  BRA    72BA
....................             { 
....................                bit_clear(eeprom_test,7); 
72B4:  BCF    x41.7
....................                goto baslangic; 
72B6:  GOTO   5176
....................             } 
....................              
....................             if(((s1) <= (s3)) && ((s3) < (s2))) 
72BA:  MOVF   x37,W
72BC:  SUBWF  x3B,W
72BE:  BNC   7300
72C0:  BNZ   72C8
72C2:  MOVF   x36,W
72C4:  SUBWF  x3A,W
72C6:  BNC   7300
72C8:  MOVF   x3B,W
72CA:  SUBWF  x39,W
72CC:  BNC   7300
72CE:  BNZ   72D6
72D0:  MOVF   x38,W
72D2:  SUBWF  x3A,W
72D4:  BC    7300
....................             {  
....................                eeprom(); 
72D6:  MOVLB  0
72D8:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
72DC:  MOVLB  2
72DE:  BTFSS  x41.0
72E0:  BRA    72E8
....................                { 
....................                   bit_clear(eeprom_test,0); 
72E2:  BCF    x41.0
....................                   goto baslangic; 
72E4:  GOTO   5176
....................                } 
....................                calistir(); 
72E8:  MOVLB  0
72EA:  CALL   4B8E
....................                if(kesme==1) 
72EE:  DECFSZ x9C,W
72F0:  BRA    72FC
....................                {  
....................                   kesme=0; 
72F2:  CLRF   x9C
....................                   key=1; 
72F4:  MOVLW  01
72F6:  MOVWF  xAA
....................                   goto baslangic; 
72F8:  GOTO   5174
....................                } 
....................             }   
72FC:  BRA    7312
72FE:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
7300:  BTFSS  FF2.5
7302:  BRA    7310
....................                { 
....................                   INTCON.T0IE=0; 
7304:  BCF    FF2.5
....................                   output_low(pin_b0); 
7306:  BCF    F8A.0
....................                   sayi=0; 
7308:  CLRF   x34
730A:  CLRF   x33
730C:  CLRF   x32
730E:  CLRF   x31
7310:  MOVLB  0
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
7312:  DECFSZ x9C,W
7314:  BRA    7320
....................             {  
....................                kesme=0; 
7316:  CLRF   x9C
....................                key=1; 
7318:  MOVLW  01
731A:  MOVWF  xAA
....................                goto baslangic; 
731C:  GOTO   5174
....................             } 
....................          } 
7320:  BRA    752E
7322:  MOVLB  2
....................              
....................          else if(read_eeprom(12)==0 && read_eeprom(13)==1)   //PAZAR 2 ACIK-PAZAR 1 KAPALI ************************************************* 
7324:  MOVFF  FF2,24E
7328:  BCF    FF2.7
732A:  MOVLW  0C
732C:  MOVWF  FA9
732E:  BCF    FA6.6
7330:  BCF    FA6.7
7332:  BSF    FA6.0
7334:  MOVF   FA8,W
7336:  BTFSC  x4E.7
7338:  BSF    FF2.7
733A:  XORLW  00
733C:  BNZ   73D4
733E:  MOVFF  FF2,24F
7342:  BCF    FF2.7
7344:  MOVLW  0D
7346:  MOVWF  FA9
7348:  BCF    FA6.6
734A:  BCF    FA6.7
734C:  BSF    FA6.0
734E:  MOVF   FA8,W
7350:  BTFSC  x4F.7
7352:  BSF    FF2.7
7354:  SUBLW  01
7356:  BNZ   73D4
....................          { 
....................             pazar_test(); 
7358:  MOVLB  0
735A:  CALL   4FD6
....................                   
....................             if(bit_test(eeprom_test,7)==1) 
735E:  MOVLB  2
7360:  BTFSS  x41.7
7362:  BRA    736A
....................             { 
....................                bit_clear(eeprom_test,7); 
7364:  BCF    x41.7
....................                goto baslangic; 
7366:  GOTO   5176
....................             } 
....................  
....................             if(((s4) <= (s3) && (s3) < (s5))) 
736A:  MOVF   x3D,W
736C:  SUBWF  x3B,W
736E:  BNC   73B0
7370:  BNZ   7378
7372:  MOVF   x3C,W
7374:  SUBWF  x3A,W
7376:  BNC   73B0
7378:  MOVF   x3B,W
737A:  SUBWF  x3F,W
737C:  BNC   73B0
737E:  BNZ   7386
7380:  MOVF   x3E,W
7382:  SUBWF  x3A,W
7384:  BC    73B0
....................             {  
....................                eeprom(); 
7386:  MOVLB  0
7388:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
738C:  MOVLB  2
738E:  BTFSS  x41.0
7390:  BRA    7398
....................                { 
....................                   bit_clear(eeprom_test,0); 
7392:  BCF    x41.0
....................                   goto baslangic; 
7394:  GOTO   5176
....................                } 
....................                calistir(); 
7398:  MOVLB  0
739A:  CALL   4B8E
....................                if(kesme==1) 
739E:  DECFSZ x9C,W
73A0:  BRA    73AC
....................                {  
....................                   kesme=0; 
73A2:  CLRF   x9C
....................                   key=1; 
73A4:  MOVLW  01
73A6:  MOVWF  xAA
....................                   goto baslangic; 
73A8:  GOTO   5174
....................                } 
....................             } 
73AC:  BRA    73C2
73AE:  MOVLB  2
....................             else 
....................             { 
....................                if(INTCON.T0IE==1) 
73B0:  BTFSS  FF2.5
73B2:  BRA    73C0
....................                { 
....................                   INTCON.T0IE=0; 
73B4:  BCF    FF2.5
....................                   output_low(pin_b0); 
73B6:  BCF    F8A.0
....................                   sayi=0; 
73B8:  CLRF   x34
73BA:  CLRF   x33
73BC:  CLRF   x32
73BE:  CLRF   x31
73C0:  MOVLB  0
....................                } 
....................             } 
....................             if(kesme==1) 
73C2:  DECFSZ x9C,W
73C4:  BRA    73D0
....................             {  
....................                kesme=0; 
73C6:  CLRF   x9C
....................                key=1; 
73C8:  MOVLW  01
73CA:  MOVWF  xAA
....................                goto baslangic; 
73CC:  GOTO   5174
....................             } 
....................          } 
73D0:  BRA    752E
73D2:  MOVLB  2
....................           
....................          else if(read_eeprom(12)==1 && read_eeprom(13)==1)  //PAZAR 1 ACIK-PAZAR 2 ACIK ***************************************************** 
73D4:  MOVFF  FF2,24E
73D8:  BCF    FF2.7
73DA:  MOVLW  0C
73DC:  MOVWF  FA9
73DE:  BCF    FA6.6
73E0:  BCF    FA6.7
73E2:  BSF    FA6.0
73E4:  MOVF   FA8,W
73E6:  BTFSC  x4E.7
73E8:  BSF    FF2.7
73EA:  SUBLW  01
73EC:  BTFSS  FD8.2
73EE:  BRA    7530
73F0:  MOVFF  FF2,24F
73F4:  BCF    FF2.7
73F6:  MOVLW  0D
73F8:  MOVWF  FA9
73FA:  BCF    FA6.6
73FC:  BCF    FA6.7
73FE:  BSF    FA6.0
7400:  MOVF   FA8,W
7402:  BTFSC  x4F.7
7404:  BSF    FF2.7
7406:  SUBLW  01
7408:  BTFSS  FD8.2
740A:  BRA    7530
....................          { 
....................             pazar_test(); 
740C:  MOVLB  0
740E:  CALL   4FD6
....................              
....................             if(bit_test(eeprom_test,7)==1) 
7412:  MOVLB  2
7414:  BTFSS  x41.7
7416:  BRA    741E
....................             { 
....................                bit_clear(eeprom_test,7); 
7418:  BCF    x41.7
....................                goto baslangic; 
741A:  GOTO   5176
....................             } 
....................  
....................             if(((s1) <= (s3) && (s3) < (s2))) 
741E:  MOVF   x37,W
7420:  SUBWF  x3B,W
7422:  BNC   7462
7424:  BNZ   742C
7426:  MOVF   x36,W
7428:  SUBWF  x3A,W
742A:  BNC   7462
742C:  MOVF   x3B,W
742E:  SUBWF  x39,W
7430:  BNC   7462
7432:  BNZ   743A
7434:  MOVF   x38,W
7436:  SUBWF  x3A,W
7438:  BC    7462
....................             { 
....................                eeprom(); 
743A:  MOVLB  0
743C:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
7440:  MOVLB  2
7442:  BTFSS  x41.0
7444:  BRA    744C
....................                { 
....................                   bit_clear(eeprom_test,0); 
7446:  BCF    x41.0
....................                   goto baslangic; 
7448:  GOTO   5176
....................                } 
....................                calistir(); 
744C:  MOVLB  0
744E:  CALL   4B8E
....................                if(kesme==1) 
7452:  DECFSZ x9C,W
7454:  BRA    7460
....................                {  
....................                   kesme=0; 
7456:  CLRF   x9C
....................                   key=1; 
7458:  MOVLW  01
745A:  MOVWF  xAA
....................                   goto baslangic; 
745C:  GOTO   5174
7460:  MOVLB  2
....................                }   
....................             } 
....................             if(((s1) < (s3) && (s3) > (s2) && (s3) < (s4))) 
7462:  MOVF   x37,W
7464:  SUBWF  x3B,W
7466:  BNC   749C
7468:  BNZ   7470
746A:  MOVF   x3A,W
746C:  SUBWF  x36,W
746E:  BC    749C
7470:  MOVF   x39,W
7472:  SUBWF  x3B,W
7474:  BNC   749C
7476:  BNZ   747E
7478:  MOVF   x3A,W
747A:  SUBWF  x38,W
747C:  BC    749C
747E:  MOVF   x3B,W
7480:  SUBWF  x3D,W
7482:  BNC   749C
7484:  BNZ   748C
7486:  MOVF   x3C,W
7488:  SUBWF  x3A,W
748A:  BC    749C
....................             { 
....................                if(INTCON.T0IE==1) 
748C:  BTFSS  FF2.5
748E:  BRA    749C
....................                { 
....................                   INTCON.T0IE=0; 
7490:  BCF    FF2.5
....................                   output_low(pin_b0); 
7492:  BCF    F8A.0
....................                   sayi=0; 
7494:  CLRF   x34
7496:  CLRF   x33
7498:  CLRF   x32
749A:  CLRF   x31
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
749C:  MOVLB  0
749E:  DECFSZ x9C,W
74A0:  BRA    74AC
....................             {  
....................                kesme=0; 
74A2:  CLRF   x9C
....................                key=1; 
74A4:  MOVLW  01
74A6:  MOVWF  xAA
....................                goto baslangic; 
74A8:  GOTO   5174
....................             } 
....................                    
....................             if(((s4) <= (s3) && (s3) < (s5))) 
74AC:  MOVLB  2
74AE:  MOVF   x3D,W
74B0:  SUBWF  x3B,W
74B2:  BNC   74F2
74B4:  BNZ   74BC
74B6:  MOVF   x3C,W
74B8:  SUBWF  x3A,W
74BA:  BNC   74F2
74BC:  MOVF   x3B,W
74BE:  SUBWF  x3F,W
74C0:  BNC   74F2
74C2:  BNZ   74CA
74C4:  MOVF   x3E,W
74C6:  SUBWF  x3A,W
74C8:  BC    74F2
....................             { 
....................                eeprom(); 
74CA:  MOVLB  0
74CC:  CALL   4B40
....................                if(bit_test(eeprom_test,0)==1) 
74D0:  MOVLB  2
74D2:  BTFSS  x41.0
74D4:  BRA    74DC
....................                { 
....................                   bit_clear(eeprom_test,0); 
74D6:  BCF    x41.0
....................                   goto baslangic; 
74D8:  GOTO   5176
....................                } 
....................                calistir(); 
74DC:  MOVLB  0
74DE:  CALL   4B8E
....................                if(kesme==1) 
74E2:  DECFSZ x9C,W
74E4:  BRA    74F0
....................                {  
....................                   kesme=0; 
74E6:  CLRF   x9C
....................                   key=1; 
74E8:  MOVLW  01
74EA:  MOVWF  xAA
....................                   goto baslangic; 
74EC:  GOTO   5174
74F0:  MOVLB  2
....................                } 
....................             } 
....................             if(((s4) < (s3) && (s3) > (s5))) 
74F2:  MOVF   x3D,W
74F4:  SUBWF  x3B,W
74F6:  BNC   751E
74F8:  BNZ   7500
74FA:  MOVF   x3A,W
74FC:  SUBWF  x3C,W
74FE:  BC    751E
7500:  MOVF   x3F,W
7502:  SUBWF  x3B,W
7504:  BNC   751E
7506:  BNZ   750E
7508:  MOVF   x3A,W
750A:  SUBWF  x3E,W
750C:  BC    751E
....................             { 
....................                if(INTCON.T0IE==1) 
750E:  BTFSS  FF2.5
7510:  BRA    751E
....................                { 
....................                   INTCON.T0IE=0; 
7512:  BCF    FF2.5
....................                   output_low(pin_b0); 
7514:  BCF    F8A.0
....................                   sayi=0; 
7516:  CLRF   x34
7518:  CLRF   x33
751A:  CLRF   x32
751C:  CLRF   x31
....................                } 
....................             } 
....................  
....................             if(kesme==1) 
751E:  MOVLB  0
7520:  DECFSZ x9C,W
7522:  BRA    752E
....................             {  
....................                kesme=0; 
7524:  CLRF   x9C
....................                key=1; 
7526:  MOVLW  01
7528:  MOVWF  xAA
....................                goto baslangic; 
752A:  GOTO   5174
752E:  MOVLB  2
....................             }         
....................          }  
....................       } 
7530:  MOVLB  0
7532:  GOTO   53B4
....................    } 
7536:  GOTO   51AC
....................    }//while TRUE 
.................... }//MAIN FONK. BITIS NOKTASI 
....................  
753A:  SLEEP 
....................  
....................  
....................  
.................... //******************************************************************************* ALINAN DEÐERLER EEPROMA YAZILIYOR********************************************************************************************************************* 
.................... void tanimla(void) 
.................... { 
.................... h0=sifrecoz(sifre[0]);    h1=sifrecoz(sifre[1]);    h2=sifrecoz(sifre[2]);    h3=sifrecoz(sifre[3]);    h4=sifrecoz(sifre[4]);    h5=sifrecoz(sifre[5]);    h6=sifrecoz(sifre[6]);    h7=sifrecoz(sifre[7]);    h8=sifrecoz(sifre[8]); 
*
05A8:  MOVFF  19,24E
05AC:  RCALL  0502
05AE:  MOVFF  01,AB
05B2:  MOVFF  1A,24E
05B6:  RCALL  0502
05B8:  MOVFF  01,AC
05BC:  MOVFF  1B,24E
05C0:  RCALL  0502
05C2:  MOVFF  01,AD
05C6:  MOVFF  1C,24E
05CA:  RCALL  0502
05CC:  MOVFF  01,AE
05D0:  MOVFF  1D,24E
05D4:  RCALL  0502
05D6:  MOVFF  01,AF
05DA:  MOVFF  1E,24E
05DE:  RCALL  0502
05E0:  MOVFF  01,B0
05E4:  MOVFF  1F,24E
05E8:  RCALL  0502
05EA:  MOVFF  01,B1
05EE:  MOVFF  20,24E
05F2:  RCALL  0502
05F4:  MOVFF  01,B2
05F8:  MOVFF  21,24E
05FC:  RCALL  0502
05FE:  MOVFF  01,B3
.................... h9=sifrecoz(sifre[9]);    h10=sifrecoz(sifre[10]);  h11=sifrecoz(sifre[11]);  h12=sifrecoz(sifre[12]);  h13=sifrecoz(sifre[13]);  h14=sifrecoz(sifre[14]);  h15=sifrecoz(sifre[15]);  h16=sifrecoz(sifre[16]);  h17=sifrecoz(sifre[17]); 
0602:  MOVFF  22,24E
0606:  RCALL  0502
0608:  MOVFF  01,B4
060C:  MOVFF  23,24E
0610:  RCALL  0502
0612:  MOVFF  01,B5
0616:  MOVFF  24,24E
061A:  RCALL  0502
061C:  MOVFF  01,B6
0620:  MOVFF  25,24E
0624:  RCALL  0502
0626:  MOVFF  01,B7
062A:  MOVFF  26,24E
062E:  RCALL  0502
0630:  MOVFF  01,B8
0634:  MOVFF  27,24E
0638:  RCALL  0502
063A:  MOVFF  01,B9
063E:  MOVFF  28,24E
0642:  RCALL  0502
0644:  MOVFF  01,BA
0648:  MOVFF  29,24E
064C:  RCALL  0502
064E:  MOVFF  01,BB
0652:  MOVFF  2A,24E
0656:  RCALL  0502
0658:  MOVFF  01,BC
.................... h18=sifrecoz(sifre[18]);  h19=sifrecoz(sifre[19]);  h20=sifrecoz(sifre[20]);  h21=sifrecoz(sifre[21]);  h22=sifrecoz(sifre[22]);  h23=sifrecoz(sifre[23]);  h24=sifrecoz(sifre[24]);  h25=sifrecoz(sifre[25]);  h26=sifrecoz(sifre[26]); 
065C:  MOVFF  2B,24E
0660:  RCALL  0502
0662:  MOVFF  01,BD
0666:  MOVFF  2C,24E
066A:  RCALL  0502
066C:  MOVFF  01,BE
0670:  MOVFF  2D,24E
0674:  RCALL  0502
0676:  MOVFF  01,BF
067A:  MOVFF  2E,24E
067E:  RCALL  0502
0680:  MOVFF  01,C0
0684:  MOVFF  2F,24E
0688:  RCALL  0502
068A:  MOVFF  01,C1
068E:  MOVFF  30,24E
0692:  RCALL  0502
0694:  MOVFF  01,C2
0698:  MOVFF  31,24E
069C:  RCALL  0502
069E:  MOVFF  01,C3
06A2:  MOVFF  32,24E
06A6:  RCALL  0502
06A8:  MOVFF  01,C4
06AC:  MOVFF  33,24E
06B0:  RCALL  0502
06B2:  MOVFF  01,C5
.................... h27=sifrecoz(sifre[27]);  h28=sifrecoz(sifre[28]);  h29=sifrecoz(sifre[29]);  h30=sifrecoz(sifre[30]);  h31=sifrecoz(sifre[31]);  h32=sifrecoz(sifre[32]);  h33=sifrecoz(sifre[33]);  h34=sifrecoz(sifre[34]);  h35=sifrecoz(sifre[35]); 
06B6:  MOVFF  34,24E
06BA:  RCALL  0502
06BC:  MOVFF  01,C6
06C0:  MOVFF  35,24E
06C4:  RCALL  0502
06C6:  MOVFF  01,C7
06CA:  MOVFF  36,24E
06CE:  RCALL  0502
06D0:  MOVFF  01,C8
06D4:  MOVFF  37,24E
06D8:  RCALL  0502
06DA:  MOVFF  01,C9
06DE:  MOVFF  38,24E
06E2:  RCALL  0502
06E4:  MOVFF  01,CA
06E8:  MOVFF  39,24E
06EC:  RCALL  0502
06EE:  MOVFF  01,CB
06F2:  MOVFF  3A,24E
06F6:  RCALL  0502
06F8:  MOVFF  01,CC
06FC:  MOVFF  3B,24E
0700:  RCALL  0502
0702:  MOVFF  01,CD
0706:  MOVFF  3C,24E
070A:  RCALL  0502
070C:  MOVFF  01,CE
.................... h36=sifrecoz(sifre[36]);  h37=sifrecoz(sifre[37]);  h38=sifrecoz(sifre[38]);  h39=sifrecoz(sifre[39]);  h40=sifrecoz(sifre[40]);  h41=sifrecoz(sifre[41]);  h42=sifrecoz(sifre[42]);  h43=sifrecoz(sifre[43]);  h44=sifrecoz(sifre[44]); 
0710:  MOVFF  3D,24E
0714:  RCALL  0502
0716:  MOVFF  01,CF
071A:  MOVFF  3E,24E
071E:  RCALL  0502
0720:  MOVFF  01,D0
0724:  MOVFF  3F,24E
0728:  RCALL  0502
072A:  MOVFF  01,D1
072E:  MOVFF  40,24E
0732:  RCALL  0502
0734:  MOVFF  01,D2
0738:  MOVFF  41,24E
073C:  RCALL  0502
073E:  MOVFF  01,D3
0742:  MOVFF  42,24E
0746:  RCALL  0502
0748:  MOVFF  01,D4
074C:  MOVFF  43,24E
0750:  RCALL  0502
0752:  MOVFF  01,D5
0756:  MOVFF  44,24E
075A:  RCALL  0502
075C:  MOVFF  01,D6
0760:  MOVFF  45,24E
0764:  RCALL  0502
0766:  MOVFF  01,D7
.................... h45=sifrecoz(sifre[45]);  h46=sifrecoz(sifre[46]);  h47=sifrecoz(sifre[47]);  h48=sifrecoz(sifre[48]);  h49=sifrecoz(sifre[49]);  h50=sifrecoz(sifre[50]);  h51=sifrecoz(sifre[51]);  h52=sifrecoz(sifre[52]);  h53=sifrecoz(sifre[53]); 
076A:  MOVFF  46,24E
076E:  RCALL  0502
0770:  MOVFF  01,D8
0774:  MOVFF  47,24E
0778:  RCALL  0502
077A:  MOVFF  01,D9
077E:  MOVFF  48,24E
0782:  RCALL  0502
0784:  MOVFF  01,DA
0788:  MOVFF  49,24E
078C:  RCALL  0502
078E:  MOVFF  01,DB
0792:  MOVFF  4A,24E
0796:  RCALL  0502
0798:  MOVFF  01,DC
079C:  MOVFF  4B,24E
07A0:  RCALL  0502
07A2:  MOVFF  01,DD
07A6:  MOVFF  4C,24E
07AA:  RCALL  0502
07AC:  MOVFF  01,DE
07B0:  MOVFF  4D,24E
07B4:  RCALL  0502
07B6:  MOVFF  01,DF
07BA:  MOVFF  4E,24E
07BE:  RCALL  0502
07C0:  MOVFF  01,E0
.................... h54=sifrecoz(sifre[54]);  h55=sifrecoz(sifre[55]);  h56=sifrecoz(sifre[56]);  h57=sifrecoz(sifre[57]);  h58=sifrecoz(sifre[58]);  h59=sifrecoz(sifre[59]);  h60=sifrecoz(sifre[60]);  h61=sifrecoz(sifre[61]);  h62=sifrecoz(sifre[62]); 
07C4:  MOVFF  4F,24E
07C8:  RCALL  0502
07CA:  MOVFF  01,E1
07CE:  MOVFF  50,24E
07D2:  RCALL  0502
07D4:  MOVFF  01,E2
07D8:  MOVFF  51,24E
07DC:  RCALL  0502
07DE:  MOVFF  01,E3
07E2:  MOVFF  52,24E
07E6:  RCALL  0502
07E8:  MOVFF  01,E4
07EC:  MOVFF  53,24E
07F0:  RCALL  0502
07F2:  MOVFF  01,E5
07F6:  MOVFF  54,24E
07FA:  RCALL  0502
07FC:  MOVFF  01,E6
0800:  MOVFF  55,24E
0804:  RCALL  0502
0806:  MOVFF  01,E7
080A:  MOVFF  56,24E
080E:  RCALL  0502
0810:  MOVFF  01,E8
0814:  MOVFF  57,24E
0818:  RCALL  0502
081A:  MOVFF  01,E9
.................... h63=sifrecoz(sifre[63]);  h64=sifrecoz(sifre[64]);  h65=sifrecoz(sifre[65]);  h66=sifrecoz(sifre[66]);  h67=sifrecoz(sifre[67]);  h68=sifrecoz(sifre[68]);  h69=sifrecoz(sifre[69]);  h70=sifrecoz(sifre[70]);  h71=sifrecoz(sifre[71]); 
081E:  MOVFF  58,24E
0822:  RCALL  0502
0824:  MOVFF  01,EA
0828:  MOVFF  59,24E
082C:  RCALL  0502
082E:  MOVFF  01,EB
0832:  MOVFF  5A,24E
0836:  RCALL  0502
0838:  MOVFF  01,EC
083C:  MOVFF  5B,24E
0840:  RCALL  0502
0842:  MOVFF  01,ED
0846:  MOVFF  5C,24E
084A:  RCALL  0502
084C:  MOVFF  01,EE
0850:  MOVFF  5D,24E
0854:  RCALL  0502
0856:  MOVFF  01,EF
085A:  MOVFF  5E,24E
085E:  RCALL  0502
0860:  MOVFF  01,F0
0864:  MOVFF  5F,24E
0868:  RCALL  0502
086A:  MOVFF  01,F1
086E:  MOVFF  60,24E
0872:  RCALL  0502
0874:  MOVFF  01,F2
.................... h72=sifrecoz(sifre[72]);  h73=sifrecoz(sifre[73]);  h74=sifrecoz(sifre[74]);  h75=sifrecoz(sifre[75]);  h76=sifrecoz(sifre[76]);  h77=sifrecoz(sifre[77]);  h78=sifrecoz(sifre[78]);  h79=sifrecoz(sifre[79]);  h80=sifrecoz(sifre[80]); 
0878:  MOVFF  61,24E
087C:  RCALL  0502
087E:  MOVFF  01,F3
0882:  MOVFF  62,24E
0886:  RCALL  0502
0888:  MOVFF  01,F4
088C:  MOVFF  63,24E
0890:  RCALL  0502
0892:  MOVFF  01,F5
0896:  MOVFF  64,24E
089A:  RCALL  0502
089C:  MOVFF  01,F6
08A0:  MOVFF  65,24E
08A4:  RCALL  0502
08A6:  MOVFF  01,F7
08AA:  MOVFF  66,24E
08AE:  RCALL  0502
08B0:  MOVFF  01,F8
08B4:  MOVFF  67,24E
08B8:  RCALL  0502
08BA:  MOVFF  01,F9
08BE:  MOVFF  68,24E
08C2:  RCALL  0502
08C4:  MOVFF  01,FA
08C8:  MOVFF  69,24E
08CC:  RCALL  0502
08CE:  MOVFF  01,FB
.................... h81=sifrecoz(sifre[81]);  h82=sifrecoz(sifre[82]);  h83=sifrecoz(sifre[83]);  h84=sifrecoz(sifre[84]);  h85=sifrecoz(sifre[85]);  h86=sifrecoz(sifre[86]);  h87=sifrecoz(sifre[87]);  h88=sifrecoz(sifre[88]);  h89=sifrecoz(sifre[89]); 
08D2:  MOVFF  6A,24E
08D6:  RCALL  0502
08D8:  MOVFF  01,FC
08DC:  MOVFF  6B,24E
08E0:  RCALL  0502
08E2:  MOVFF  01,FD
08E6:  MOVFF  6C,24E
08EA:  RCALL  0502
08EC:  MOVFF  01,FE
08F0:  MOVFF  6D,24E
08F4:  RCALL  0502
08F6:  MOVFF  01,FF
08FA:  MOVFF  6E,24E
08FE:  RCALL  0502
0900:  MOVFF  01,100
0904:  MOVFF  6F,24E
0908:  RCALL  0502
090A:  MOVFF  01,101
090E:  MOVFF  70,24E
0912:  RCALL  0502
0914:  MOVFF  01,102
0918:  MOVFF  71,24E
091C:  RCALL  0502
091E:  MOVFF  01,103
0922:  MOVFF  72,24E
0926:  RCALL  0502
0928:  MOVFF  01,104
.................... h90=sifrecoz(sifre[90]);  h91=sifrecoz(sifre[91]);  h92=sifrecoz(sifre[92]);  h93=sifrecoz(sifre[93]);  h94=sifrecoz(sifre[94]);  h95=sifrecoz(sifre[95]);  h96=sifrecoz(sifre[96]);  h97=sifrecoz(sifre[97]);  h98=sifrecoz(sifre[98]); 
092C:  MOVFF  73,24E
0930:  RCALL  0502
0932:  MOVFF  01,105
0936:  MOVFF  74,24E
093A:  RCALL  0502
093C:  MOVFF  01,106
0940:  MOVFF  75,24E
0944:  RCALL  0502
0946:  MOVFF  01,107
094A:  MOVFF  76,24E
094E:  RCALL  0502
0950:  MOVFF  01,108
0954:  MOVFF  77,24E
0958:  RCALL  0502
095A:  MOVFF  01,109
095E:  MOVFF  78,24E
0962:  RCALL  0502
0964:  MOVFF  01,10A
0968:  MOVFF  79,24E
096C:  RCALL  0502
096E:  MOVFF  01,10B
0972:  MOVFF  7A,24E
0976:  RCALL  0502
0978:  MOVFF  01,10C
097C:  MOVFF  7B,24E
0980:  RCALL  0502
0982:  MOVFF  01,10D
.................... h99=sifrecoz(sifre[99]);  h100=sifrecoz(sifre[100]);h101=sifrecoz(sifre[101]);h102=sifrecoz(sifre[102]);h103=sifrecoz(sifre[103]);h104=sifrecoz(sifre[104]);h105=sifrecoz(sifre[105]);h106=sifrecoz(sifre[106]);h107=sifrecoz(sifre[107]); 
0986:  MOVFF  7C,24E
098A:  RCALL  0502
098C:  MOVFF  01,10E
0990:  MOVFF  7D,24E
0994:  RCALL  0502
0996:  MOVFF  01,10F
099A:  MOVFF  7E,24E
099E:  RCALL  0502
09A0:  MOVFF  01,110
09A4:  MOVFF  7F,24E
09A8:  RCALL  0502
09AA:  MOVFF  01,111
09AE:  MOVFF  80,24E
09B2:  RCALL  0502
09B4:  MOVFF  01,112
09B8:  MOVFF  81,24E
09BC:  RCALL  0502
09BE:  MOVFF  01,113
09C2:  MOVFF  82,24E
09C6:  RCALL  0502
09C8:  MOVFF  01,114
09CC:  MOVFF  83,24E
09D0:  RCALL  0502
09D2:  MOVFF  01,115
09D6:  MOVFF  84,24E
09DA:  RCALL  0502
09DC:  MOVFF  01,116
.................... h108=sifrecoz(sifre[108]);h109=sifrecoz(sifre[109]);h110=sifrecoz(sifre[110]);h111=sifrecoz(sifre[111]);h112=sifrecoz(sifre[112]);h113=sifrecoz(sifre[113]);h114=sifrecoz(sifre[114]);h115=sifrecoz(sifre[115]);h116=sifrecoz(sifre[116]); 
09E0:  MOVFF  85,24E
09E4:  RCALL  0502
09E6:  MOVFF  01,117
09EA:  MOVFF  86,24E
09EE:  RCALL  0502
09F0:  MOVFF  01,118
09F4:  MOVFF  87,24E
09F8:  RCALL  0502
09FA:  MOVFF  01,119
09FE:  MOVFF  88,24E
0A02:  RCALL  0502
0A04:  MOVFF  01,11A
0A08:  MOVFF  89,24E
0A0C:  RCALL  0502
0A0E:  MOVFF  01,11B
0A12:  MOVFF  8A,24E
0A16:  RCALL  0502
0A18:  MOVFF  01,11C
0A1C:  MOVFF  8B,24E
0A20:  RCALL  0502
0A22:  MOVFF  01,11D
0A26:  MOVFF  8C,24E
0A2A:  RCALL  0502
0A2C:  MOVFF  01,11E
0A30:  MOVFF  8D,24E
0A34:  RCALL  0502
0A36:  MOVFF  01,11F
.................... h117=sifrecoz(sifre[117]);h118=sifrecoz(sifre[118]);h119=sifrecoz(sifre[119]);h120=sifrecoz(sifre[120]);h121=sifrecoz(sifre[121]);h122=sifrecoz(sifre[122]);h123=sifrecoz(sifre[123]);h124=sifrecoz(sifre[124]); 
0A3A:  MOVFF  8E,24E
0A3E:  RCALL  0502
0A40:  MOVFF  01,120
0A44:  MOVFF  8F,24E
0A48:  RCALL  0502
0A4A:  MOVFF  01,121
0A4E:  MOVFF  90,24E
0A52:  RCALL  0502
0A54:  MOVFF  01,122
0A58:  MOVFF  91,24E
0A5C:  RCALL  0502
0A5E:  MOVFF  01,123
0A62:  MOVFF  92,24E
0A66:  RCALL  0502
0A68:  MOVFF  01,124
0A6C:  MOVFF  93,24E
0A70:  RCALL  0502
0A72:  MOVFF  01,125
0A76:  MOVFF  94,24E
0A7A:  RCALL  0502
0A7C:  MOVFF  01,126
0A80:  MOVFF  95,24E
0A84:  RCALL  0502
0A86:  MOVFF  01,127
.................... h125=sifrecoz(sifre[125]);h126=sifrecoz(sifre[126]);h127=sifrecoz(sifre[127]);h128=sifrecoz(sifre[128]);h129=sifrecoz(sifre[129]);h130=sifrecoz(sifre[130]); 
0A8A:  MOVFF  96,24E
0A8E:  RCALL  0502
0A90:  MOVFF  01,128
0A94:  MOVFF  97,24E
0A98:  RCALL  0502
0A9A:  MOVFF  01,129
0A9E:  MOVFF  98,24E
0AA2:  RCALL  0502
0AA4:  MOVFF  01,12A
0AA8:  MOVFF  99,24E
0AAC:  RCALL  0502
0AAE:  MOVFF  01,12B
0AB2:  MOVFF  9A,24E
0AB6:  RCALL  0502
0AB8:  MOVFF  01,12C
0ABC:  MOVFF  9B,24E
0AC0:  RCALL  0502
0AC2:  MOVFF  01,12D
....................  
.................... //******************************************************************************** ANAHTAR DEÐERLERÝ EEPROMA YAZILIYOR ******************************************************************************************************************** 
.................... write_eeprom(0,h0);write_eeprom(1,h9);write_eeprom(2,h18);write_eeprom(3,h27);write_eeprom(4,h36);write_eeprom(5,h45);write_eeprom(6,h54);write_eeprom(7,h63);write_eeprom(8,h72);  //GUN AC/KAPA ANAHTARLARI 
0AC6:  MOVF   FF2,W
0AC8:  MOVWF  00
0ACA:  BCF    FF2.7
0ACC:  CLRF   FA9
0ACE:  MOVFF  AB,FA8
0AD2:  BCF    FA6.6
0AD4:  BCF    FA6.7
0AD6:  BSF    FA6.2
0AD8:  MOVLB  F
0ADA:  MOVLW  55
0ADC:  MOVWF  FA7
0ADE:  MOVLW  AA
0AE0:  MOVWF  FA7
0AE2:  BSF    FA6.1
0AE4:  BTFSC  FA6.1
0AE6:  BRA    0AE4
0AE8:  BCF    FA6.2
0AEA:  MOVF   00,W
0AEC:  IORWF  FF2,F
0AEE:  MOVF   FF2,W
0AF0:  MOVWF  00
0AF2:  BCF    FF2.7
0AF4:  MOVLW  01
0AF6:  MOVWF  FA9
0AF8:  MOVFF  B4,FA8
0AFC:  BCF    FA6.6
0AFE:  BCF    FA6.7
0B00:  BSF    FA6.2
0B02:  MOVLW  55
0B04:  MOVWF  FA7
0B06:  MOVLW  AA
0B08:  MOVWF  FA7
0B0A:  BSF    FA6.1
0B0C:  BTFSC  FA6.1
0B0E:  BRA    0B0C
0B10:  BCF    FA6.2
0B12:  MOVF   00,W
0B14:  IORWF  FF2,F
0B16:  MOVF   FF2,W
0B18:  MOVWF  00
0B1A:  BCF    FF2.7
0B1C:  MOVLW  02
0B1E:  MOVWF  FA9
0B20:  MOVFF  BD,FA8
0B24:  BCF    FA6.6
0B26:  BCF    FA6.7
0B28:  BSF    FA6.2
0B2A:  MOVLW  55
0B2C:  MOVWF  FA7
0B2E:  MOVLW  AA
0B30:  MOVWF  FA7
0B32:  BSF    FA6.1
0B34:  BTFSC  FA6.1
0B36:  BRA    0B34
0B38:  BCF    FA6.2
0B3A:  MOVF   00,W
0B3C:  IORWF  FF2,F
0B3E:  MOVF   FF2,W
0B40:  MOVWF  00
0B42:  BCF    FF2.7
0B44:  MOVLW  03
0B46:  MOVWF  FA9
0B48:  MOVFF  C6,FA8
0B4C:  BCF    FA6.6
0B4E:  BCF    FA6.7
0B50:  BSF    FA6.2
0B52:  MOVLW  55
0B54:  MOVWF  FA7
0B56:  MOVLW  AA
0B58:  MOVWF  FA7
0B5A:  BSF    FA6.1
0B5C:  BTFSC  FA6.1
0B5E:  BRA    0B5C
0B60:  BCF    FA6.2
0B62:  MOVF   00,W
0B64:  IORWF  FF2,F
0B66:  MOVF   FF2,W
0B68:  MOVWF  00
0B6A:  BCF    FF2.7
0B6C:  MOVLW  04
0B6E:  MOVWF  FA9
0B70:  MOVFF  CF,FA8
0B74:  BCF    FA6.6
0B76:  BCF    FA6.7
0B78:  BSF    FA6.2
0B7A:  MOVLW  55
0B7C:  MOVWF  FA7
0B7E:  MOVLW  AA
0B80:  MOVWF  FA7
0B82:  BSF    FA6.1
0B84:  BTFSC  FA6.1
0B86:  BRA    0B84
0B88:  BCF    FA6.2
0B8A:  MOVF   00,W
0B8C:  IORWF  FF2,F
0B8E:  MOVF   FF2,W
0B90:  MOVWF  00
0B92:  BCF    FF2.7
0B94:  MOVLW  05
0B96:  MOVWF  FA9
0B98:  MOVFF  D8,FA8
0B9C:  BCF    FA6.6
0B9E:  BCF    FA6.7
0BA0:  BSF    FA6.2
0BA2:  MOVLW  55
0BA4:  MOVWF  FA7
0BA6:  MOVLW  AA
0BA8:  MOVWF  FA7
0BAA:  BSF    FA6.1
0BAC:  BTFSC  FA6.1
0BAE:  BRA    0BAC
0BB0:  BCF    FA6.2
0BB2:  MOVF   00,W
0BB4:  IORWF  FF2,F
0BB6:  MOVF   FF2,W
0BB8:  MOVWF  00
0BBA:  BCF    FF2.7
0BBC:  MOVLW  06
0BBE:  MOVWF  FA9
0BC0:  MOVFF  E1,FA8
0BC4:  BCF    FA6.6
0BC6:  BCF    FA6.7
0BC8:  BSF    FA6.2
0BCA:  MOVLW  55
0BCC:  MOVWF  FA7
0BCE:  MOVLW  AA
0BD0:  MOVWF  FA7
0BD2:  BSF    FA6.1
0BD4:  BTFSC  FA6.1
0BD6:  BRA    0BD4
0BD8:  BCF    FA6.2
0BDA:  MOVF   00,W
0BDC:  IORWF  FF2,F
0BDE:  MOVF   FF2,W
0BE0:  MOVWF  00
0BE2:  BCF    FF2.7
0BE4:  MOVLW  07
0BE6:  MOVWF  FA9
0BE8:  MOVFF  EA,FA8
0BEC:  BCF    FA6.6
0BEE:  BCF    FA6.7
0BF0:  BSF    FA6.2
0BF2:  MOVLW  55
0BF4:  MOVWF  FA7
0BF6:  MOVLW  AA
0BF8:  MOVWF  FA7
0BFA:  BSF    FA6.1
0BFC:  BTFSC  FA6.1
0BFE:  BRA    0BFC
0C00:  BCF    FA6.2
0C02:  MOVF   00,W
0C04:  IORWF  FF2,F
0C06:  MOVF   FF2,W
0C08:  MOVWF  00
0C0A:  BCF    FF2.7
0C0C:  MOVLW  08
0C0E:  MOVWF  FA9
0C10:  MOVFF  F3,FA8
0C14:  BCF    FA6.6
0C16:  BCF    FA6.7
0C18:  BSF    FA6.2
0C1A:  MOVLW  55
0C1C:  MOVWF  FA7
0C1E:  MOVLW  AA
0C20:  MOVWF  FA7
0C22:  BSF    FA6.1
0C24:  BTFSC  FA6.1
0C26:  BRA    0C24
0C28:  BCF    FA6.2
0C2A:  MOVF   00,W
0C2C:  IORWF  FF2,F
.................... write_eeprom(9,h81); write_eeprom(10,h90);write_eeprom(11,h99);write_eeprom(12,h108);write_eeprom(13,h117);         
0C2E:  MOVFF  FF2,00
0C32:  BCF    FF2.7
0C34:  MOVLW  09
0C36:  MOVWF  FA9
0C38:  MOVFF  FC,FA8
0C3C:  BCF    FA6.6
0C3E:  BCF    FA6.7
0C40:  BSF    FA6.2
0C42:  MOVLW  55
0C44:  MOVWF  FA7
0C46:  MOVLW  AA
0C48:  MOVWF  FA7
0C4A:  BSF    FA6.1
0C4C:  BTFSC  FA6.1
0C4E:  BRA    0C4C
0C50:  BCF    FA6.2
0C52:  MOVF   00,W
0C54:  IORWF  FF2,F
0C56:  MOVFF  FF2,00
0C5A:  BCF    FF2.7
0C5C:  MOVLW  0A
0C5E:  MOVWF  FA9
0C60:  MOVFF  105,FA8
0C64:  BCF    FA6.6
0C66:  BCF    FA6.7
0C68:  BSF    FA6.2
0C6A:  MOVLW  55
0C6C:  MOVWF  FA7
0C6E:  MOVLW  AA
0C70:  MOVWF  FA7
0C72:  BSF    FA6.1
0C74:  BTFSC  FA6.1
0C76:  BRA    0C74
0C78:  BCF    FA6.2
0C7A:  MOVF   00,W
0C7C:  IORWF  FF2,F
0C7E:  MOVFF  FF2,00
0C82:  BCF    FF2.7
0C84:  MOVLW  0B
0C86:  MOVWF  FA9
0C88:  MOVFF  10E,FA8
0C8C:  BCF    FA6.6
0C8E:  BCF    FA6.7
0C90:  BSF    FA6.2
0C92:  MOVLW  55
0C94:  MOVWF  FA7
0C96:  MOVLW  AA
0C98:  MOVWF  FA7
0C9A:  BSF    FA6.1
0C9C:  BTFSC  FA6.1
0C9E:  BRA    0C9C
0CA0:  BCF    FA6.2
0CA2:  MOVF   00,W
0CA4:  IORWF  FF2,F
0CA6:  MOVFF  FF2,00
0CAA:  BCF    FF2.7
0CAC:  MOVLW  0C
0CAE:  MOVWF  FA9
0CB0:  MOVFF  117,FA8
0CB4:  BCF    FA6.6
0CB6:  BCF    FA6.7
0CB8:  BSF    FA6.2
0CBA:  MOVLW  55
0CBC:  MOVWF  FA7
0CBE:  MOVLW  AA
0CC0:  MOVWF  FA7
0CC2:  BSF    FA6.1
0CC4:  BTFSC  FA6.1
0CC6:  BRA    0CC4
0CC8:  BCF    FA6.2
0CCA:  MOVF   00,W
0CCC:  IORWF  FF2,F
0CCE:  MOVFF  FF2,00
0CD2:  BCF    FF2.7
0CD4:  MOVLW  0D
0CD6:  MOVWF  FA9
0CD8:  MOVFF  120,FA8
0CDC:  BCF    FA6.6
0CDE:  BCF    FA6.7
0CE0:  BSF    FA6.2
0CE2:  MOVLW  55
0CE4:  MOVWF  FA7
0CE6:  MOVLW  AA
0CE8:  MOVWF  FA7
0CEA:  BSF    FA6.1
0CEC:  BTFSC  FA6.1
0CEE:  BRA    0CEC
0CF0:  BCF    FA6.2
0CF2:  MOVF   00,W
0CF4:  IORWF  FF2,F
0CF6:  MOVLB  0
0CF8:  GOTO   51CC (RETURN)
.................... } 
....................  
.................... //******************************************************* PAZARTESI 1 FONKSIYONU***************************************** 
.................... void pazartesi1(void) 
.................... { 
.................... ptesibassaat1=((h1*10)+h2); 
0CFC:  MOVF   xAC,W
0CFE:  MULLW  0A
0D00:  MOVF   FF3,W
0D02:  ADDWF  xAD,W
0D04:  MOVLB  1
0D06:  MOVWF  x2E
.................... write_eeprom(14,ptesibassaat1); 
0D08:  MOVF   FF2,W
0D0A:  MOVWF  00
0D0C:  BCF    FF2.7
0D0E:  MOVLW  0E
0D10:  MOVWF  FA9
0D12:  MOVFF  12E,FA8
0D16:  BCF    FA6.6
0D18:  BCF    FA6.7
0D1A:  BSF    FA6.2
0D1C:  MOVLB  F
0D1E:  MOVLW  55
0D20:  MOVWF  FA7
0D22:  MOVLW  AA
0D24:  MOVWF  FA7
0D26:  BSF    FA6.1
0D28:  BTFSC  FA6.1
0D2A:  BRA    0D28
0D2C:  BCF    FA6.2
0D2E:  MOVF   00,W
0D30:  IORWF  FF2,F
....................  
.................... ptesibasdk1=((h3*10)+h4); 
0D32:  MOVLB  0
0D34:  MOVF   xAE,W
0D36:  MULLW  0A
0D38:  MOVF   FF3,W
0D3A:  ADDWF  xAF,W
0D3C:  MOVLB  1
0D3E:  MOVWF  x2F
.................... write_eeprom(15,ptesibasdk1); 
0D40:  MOVF   FF2,W
0D42:  MOVWF  00
0D44:  BCF    FF2.7
0D46:  MOVLW  0F
0D48:  MOVWF  FA9
0D4A:  MOVFF  12F,FA8
0D4E:  BCF    FA6.6
0D50:  BCF    FA6.7
0D52:  BSF    FA6.2
0D54:  MOVLB  F
0D56:  MOVLW  55
0D58:  MOVWF  FA7
0D5A:  MOVLW  AA
0D5C:  MOVWF  FA7
0D5E:  BSF    FA6.1
0D60:  BTFSC  FA6.1
0D62:  BRA    0D60
0D64:  BCF    FA6.2
0D66:  MOVF   00,W
0D68:  IORWF  FF2,F
....................  
.................... ptesibitsaat1=((h5*10)+h6); 
0D6A:  MOVLB  0
0D6C:  MOVF   xB0,W
0D6E:  MULLW  0A
0D70:  MOVF   FF3,W
0D72:  ADDWF  xB1,W
0D74:  MOVLB  1
0D76:  MOVWF  x30
.................... write_eeprom(16,ptesibitsaat1); 
0D78:  MOVF   FF2,W
0D7A:  MOVWF  00
0D7C:  BCF    FF2.7
0D7E:  MOVLW  10
0D80:  MOVWF  FA9
0D82:  MOVFF  130,FA8
0D86:  BCF    FA6.6
0D88:  BCF    FA6.7
0D8A:  BSF    FA6.2
0D8C:  MOVLB  F
0D8E:  MOVLW  55
0D90:  MOVWF  FA7
0D92:  MOVLW  AA
0D94:  MOVWF  FA7
0D96:  BSF    FA6.1
0D98:  BTFSC  FA6.1
0D9A:  BRA    0D98
0D9C:  BCF    FA6.2
0D9E:  MOVF   00,W
0DA0:  IORWF  FF2,F
....................  
.................... ptesibitdk1=((h7*10)+h8); 
0DA2:  MOVLB  0
0DA4:  MOVF   xB2,W
0DA6:  MULLW  0A
0DA8:  MOVF   FF3,W
0DAA:  ADDWF  xB3,W
0DAC:  MOVLB  1
0DAE:  MOVWF  x31
.................... write_eeprom(17,ptesibitdk1); 
0DB0:  MOVF   FF2,W
0DB2:  MOVWF  00
0DB4:  BCF    FF2.7
0DB6:  MOVLW  11
0DB8:  MOVWF  FA9
0DBA:  MOVFF  131,FA8
0DBE:  BCF    FA6.6
0DC0:  BCF    FA6.7
0DC2:  BSF    FA6.2
0DC4:  MOVLB  F
0DC6:  MOVLW  55
0DC8:  MOVWF  FA7
0DCA:  MOVLW  AA
0DCC:  MOVWF  FA7
0DCE:  BSF    FA6.1
0DD0:  BTFSC  FA6.1
0DD2:  BRA    0DD0
0DD4:  BCF    FA6.2
0DD6:  MOVF   00,W
0DD8:  IORWF  FF2,F
0DDA:  MOVLB  0
0DDC:  GOTO   51D0 (RETURN)
.................... } 
....................  
.................... //******************************************************* PAZARTESI 2 FONKSIYONU***************************************** 
.................... void pazartesi2 (void) 
.................... { 
.................... ptesibassaat2=((h10*10)+h11); 
0DE0:  MOVF   xB5,W
0DE2:  MULLW  0A
0DE4:  MOVF   FF3,W
0DE6:  ADDWF  xB6,W
0DE8:  MOVLB  1
0DEA:  MOVWF  x32
.................... write_eeprom(18,ptesibassaat2); 
0DEC:  MOVF   FF2,W
0DEE:  MOVWF  00
0DF0:  BCF    FF2.7
0DF2:  MOVLW  12
0DF4:  MOVWF  FA9
0DF6:  MOVFF  132,FA8
0DFA:  BCF    FA6.6
0DFC:  BCF    FA6.7
0DFE:  BSF    FA6.2
0E00:  MOVLB  F
0E02:  MOVLW  55
0E04:  MOVWF  FA7
0E06:  MOVLW  AA
0E08:  MOVWF  FA7
0E0A:  BSF    FA6.1
0E0C:  BTFSC  FA6.1
0E0E:  BRA    0E0C
0E10:  BCF    FA6.2
0E12:  MOVF   00,W
0E14:  IORWF  FF2,F
....................  
.................... ptesibasdk2=((h12*10)+h13); 
0E16:  MOVLB  0
0E18:  MOVF   xB7,W
0E1A:  MULLW  0A
0E1C:  MOVF   FF3,W
0E1E:  ADDWF  xB8,W
0E20:  MOVLB  1
0E22:  MOVWF  x33
.................... write_eeprom(19,ptesibasdk2); 
0E24:  MOVF   FF2,W
0E26:  MOVWF  00
0E28:  BCF    FF2.7
0E2A:  MOVLW  13
0E2C:  MOVWF  FA9
0E2E:  MOVFF  133,FA8
0E32:  BCF    FA6.6
0E34:  BCF    FA6.7
0E36:  BSF    FA6.2
0E38:  MOVLB  F
0E3A:  MOVLW  55
0E3C:  MOVWF  FA7
0E3E:  MOVLW  AA
0E40:  MOVWF  FA7
0E42:  BSF    FA6.1
0E44:  BTFSC  FA6.1
0E46:  BRA    0E44
0E48:  BCF    FA6.2
0E4A:  MOVF   00,W
0E4C:  IORWF  FF2,F
....................  
.................... ptesibitsaat2=((h14*10)+h15); 
0E4E:  MOVLB  0
0E50:  MOVF   xB9,W
0E52:  MULLW  0A
0E54:  MOVF   FF3,W
0E56:  ADDWF  xBA,W
0E58:  MOVLB  1
0E5A:  MOVWF  x34
.................... write_eeprom(20,ptesibitsaat2); 
0E5C:  MOVF   FF2,W
0E5E:  MOVWF  00
0E60:  BCF    FF2.7
0E62:  MOVLW  14
0E64:  MOVWF  FA9
0E66:  MOVFF  134,FA8
0E6A:  BCF    FA6.6
0E6C:  BCF    FA6.7
0E6E:  BSF    FA6.2
0E70:  MOVLB  F
0E72:  MOVLW  55
0E74:  MOVWF  FA7
0E76:  MOVLW  AA
0E78:  MOVWF  FA7
0E7A:  BSF    FA6.1
0E7C:  BTFSC  FA6.1
0E7E:  BRA    0E7C
0E80:  BCF    FA6.2
0E82:  MOVF   00,W
0E84:  IORWF  FF2,F
....................  
.................... ptesibitdk2=((h16*10)+h17); 
0E86:  MOVLB  0
0E88:  MOVF   xBB,W
0E8A:  MULLW  0A
0E8C:  MOVF   FF3,W
0E8E:  ADDWF  xBC,W
0E90:  MOVLB  1
0E92:  MOVWF  x35
.................... write_eeprom(21,ptesibitdk2); 
0E94:  MOVF   FF2,W
0E96:  MOVWF  00
0E98:  BCF    FF2.7
0E9A:  MOVLW  15
0E9C:  MOVWF  FA9
0E9E:  MOVFF  135,FA8
0EA2:  BCF    FA6.6
0EA4:  BCF    FA6.7
0EA6:  BSF    FA6.2
0EA8:  MOVLB  F
0EAA:  MOVLW  55
0EAC:  MOVWF  FA7
0EAE:  MOVLW  AA
0EB0:  MOVWF  FA7
0EB2:  BSF    FA6.1
0EB4:  BTFSC  FA6.1
0EB6:  BRA    0EB4
0EB8:  BCF    FA6.2
0EBA:  MOVF   00,W
0EBC:  IORWF  FF2,F
0EBE:  MOVLB  0
0EC0:  GOTO   51D4 (RETURN)
.................... } 
....................  
.................... //******************************************************* SALI 1 FONKSIYONU***************************************** 
.................... void sali1 (void) 
.................... { 
.................... salibassaat1=((h19*10)+h20); 
0EC4:  MOVF   xBE,W
0EC6:  MULLW  0A
0EC8:  MOVF   FF3,W
0ECA:  ADDWF  xBF,W
0ECC:  MOVLB  1
0ECE:  MOVWF  x36
.................... write_eeprom(22,salibassaat1); 
0ED0:  MOVF   FF2,W
0ED2:  MOVWF  00
0ED4:  BCF    FF2.7
0ED6:  MOVLW  16
0ED8:  MOVWF  FA9
0EDA:  MOVFF  136,FA8
0EDE:  BCF    FA6.6
0EE0:  BCF    FA6.7
0EE2:  BSF    FA6.2
0EE4:  MOVLB  F
0EE6:  MOVLW  55
0EE8:  MOVWF  FA7
0EEA:  MOVLW  AA
0EEC:  MOVWF  FA7
0EEE:  BSF    FA6.1
0EF0:  BTFSC  FA6.1
0EF2:  BRA    0EF0
0EF4:  BCF    FA6.2
0EF6:  MOVF   00,W
0EF8:  IORWF  FF2,F
....................  
.................... salibasdk1=((h21*10)+h22); 
0EFA:  MOVLB  0
0EFC:  MOVF   xC0,W
0EFE:  MULLW  0A
0F00:  MOVF   FF3,W
0F02:  ADDWF  xC1,W
0F04:  MOVLB  1
0F06:  MOVWF  x37
.................... write_eeprom(23,salibasdk1); 
0F08:  MOVF   FF2,W
0F0A:  MOVWF  00
0F0C:  BCF    FF2.7
0F0E:  MOVLW  17
0F10:  MOVWF  FA9
0F12:  MOVFF  137,FA8
0F16:  BCF    FA6.6
0F18:  BCF    FA6.7
0F1A:  BSF    FA6.2
0F1C:  MOVLB  F
0F1E:  MOVLW  55
0F20:  MOVWF  FA7
0F22:  MOVLW  AA
0F24:  MOVWF  FA7
0F26:  BSF    FA6.1
0F28:  BTFSC  FA6.1
0F2A:  BRA    0F28
0F2C:  BCF    FA6.2
0F2E:  MOVF   00,W
0F30:  IORWF  FF2,F
....................  
.................... salibitsaat1=((h23*10)+h24); 
0F32:  MOVLB  0
0F34:  MOVF   xC2,W
0F36:  MULLW  0A
0F38:  MOVF   FF3,W
0F3A:  ADDWF  xC3,W
0F3C:  MOVLB  1
0F3E:  MOVWF  x38
.................... write_eeprom(24,salibitsaat1); 
0F40:  MOVF   FF2,W
0F42:  MOVWF  00
0F44:  BCF    FF2.7
0F46:  MOVLW  18
0F48:  MOVWF  FA9
0F4A:  MOVFF  138,FA8
0F4E:  BCF    FA6.6
0F50:  BCF    FA6.7
0F52:  BSF    FA6.2
0F54:  MOVLB  F
0F56:  MOVLW  55
0F58:  MOVWF  FA7
0F5A:  MOVLW  AA
0F5C:  MOVWF  FA7
0F5E:  BSF    FA6.1
0F60:  BTFSC  FA6.1
0F62:  BRA    0F60
0F64:  BCF    FA6.2
0F66:  MOVF   00,W
0F68:  IORWF  FF2,F
....................  
.................... salibitdk1=((h25*10)+h26); 
0F6A:  MOVLB  0
0F6C:  MOVF   xC4,W
0F6E:  MULLW  0A
0F70:  MOVF   FF3,W
0F72:  ADDWF  xC5,W
0F74:  MOVLB  1
0F76:  MOVWF  x39
.................... write_eeprom(25,salibitdk1); 
0F78:  MOVF   FF2,W
0F7A:  MOVWF  00
0F7C:  BCF    FF2.7
0F7E:  MOVLW  19
0F80:  MOVWF  FA9
0F82:  MOVFF  139,FA8
0F86:  BCF    FA6.6
0F88:  BCF    FA6.7
0F8A:  BSF    FA6.2
0F8C:  MOVLB  F
0F8E:  MOVLW  55
0F90:  MOVWF  FA7
0F92:  MOVLW  AA
0F94:  MOVWF  FA7
0F96:  BSF    FA6.1
0F98:  BTFSC  FA6.1
0F9A:  BRA    0F98
0F9C:  BCF    FA6.2
0F9E:  MOVF   00,W
0FA0:  IORWF  FF2,F
0FA2:  MOVLB  0
0FA4:  GOTO   51D8 (RETURN)
.................... } 
....................  
.................... //******************************************************* SALI 2 FONKSIYONU***************************************** 
.................... void sali2 (void) 
.................... { 
.................... salibassaat2=((h28*10)+h29); 
0FA8:  MOVF   xC7,W
0FAA:  MULLW  0A
0FAC:  MOVF   FF3,W
0FAE:  ADDWF  xC8,W
0FB0:  MOVLB  1
0FB2:  MOVWF  x3A
.................... write_eeprom(26,salibassaat2); 
0FB4:  MOVF   FF2,W
0FB6:  MOVWF  00
0FB8:  BCF    FF2.7
0FBA:  MOVLW  1A
0FBC:  MOVWF  FA9
0FBE:  MOVFF  13A,FA8
0FC2:  BCF    FA6.6
0FC4:  BCF    FA6.7
0FC6:  BSF    FA6.2
0FC8:  MOVLB  F
0FCA:  MOVLW  55
0FCC:  MOVWF  FA7
0FCE:  MOVLW  AA
0FD0:  MOVWF  FA7
0FD2:  BSF    FA6.1
0FD4:  BTFSC  FA6.1
0FD6:  BRA    0FD4
0FD8:  BCF    FA6.2
0FDA:  MOVF   00,W
0FDC:  IORWF  FF2,F
....................  
.................... salibasdk2=((h30*10)+h31); 
0FDE:  MOVLB  0
0FE0:  MOVF   xC9,W
0FE2:  MULLW  0A
0FE4:  MOVF   FF3,W
0FE6:  ADDWF  xCA,W
0FE8:  MOVLB  1
0FEA:  MOVWF  x3B
.................... write_eeprom(27,salibasdk2); 
0FEC:  MOVF   FF2,W
0FEE:  MOVWF  00
0FF0:  BCF    FF2.7
0FF2:  MOVLW  1B
0FF4:  MOVWF  FA9
0FF6:  MOVFF  13B,FA8
0FFA:  BCF    FA6.6
0FFC:  BCF    FA6.7
0FFE:  BSF    FA6.2
1000:  MOVLB  F
1002:  MOVLW  55
1004:  MOVWF  FA7
1006:  MOVLW  AA
1008:  MOVWF  FA7
100A:  BSF    FA6.1
100C:  BTFSC  FA6.1
100E:  BRA    100C
1010:  BCF    FA6.2
1012:  MOVF   00,W
1014:  IORWF  FF2,F
....................  
.................... salibitsaat2=((h32*10)+h33); 
1016:  MOVLB  0
1018:  MOVF   xCB,W
101A:  MULLW  0A
101C:  MOVF   FF3,W
101E:  ADDWF  xCC,W
1020:  MOVLB  1
1022:  MOVWF  x3C
.................... write_eeprom(28,salibitsaat2); 
1024:  MOVF   FF2,W
1026:  MOVWF  00
1028:  BCF    FF2.7
102A:  MOVLW  1C
102C:  MOVWF  FA9
102E:  MOVFF  13C,FA8
1032:  BCF    FA6.6
1034:  BCF    FA6.7
1036:  BSF    FA6.2
1038:  MOVLB  F
103A:  MOVLW  55
103C:  MOVWF  FA7
103E:  MOVLW  AA
1040:  MOVWF  FA7
1042:  BSF    FA6.1
1044:  BTFSC  FA6.1
1046:  BRA    1044
1048:  BCF    FA6.2
104A:  MOVF   00,W
104C:  IORWF  FF2,F
....................  
.................... salibitdk2=((h34*10)+h35); 
104E:  MOVLB  0
1050:  MOVF   xCD,W
1052:  MULLW  0A
1054:  MOVF   FF3,W
1056:  ADDWF  xCE,W
1058:  MOVLB  1
105A:  MOVWF  x3D
.................... write_eeprom(29,salibitdk2); 
105C:  MOVF   FF2,W
105E:  MOVWF  00
1060:  BCF    FF2.7
1062:  MOVLW  1D
1064:  MOVWF  FA9
1066:  MOVFF  13D,FA8
106A:  BCF    FA6.6
106C:  BCF    FA6.7
106E:  BSF    FA6.2
1070:  MOVLB  F
1072:  MOVLW  55
1074:  MOVWF  FA7
1076:  MOVLW  AA
1078:  MOVWF  FA7
107A:  BSF    FA6.1
107C:  BTFSC  FA6.1
107E:  BRA    107C
1080:  BCF    FA6.2
1082:  MOVF   00,W
1084:  IORWF  FF2,F
1086:  MOVLB  0
1088:  GOTO   51DC (RETURN)
.................... } 
....................  
.................... //******************************************************* CARSAMBA 1 FONKSIYONU***************************************** 
.................... void carsamba1 (void) 
.................... { 
.................... carbassaat1=((h37*10)+h38); 
108C:  MOVF   xD0,W
108E:  MULLW  0A
1090:  MOVF   FF3,W
1092:  ADDWF  xD1,W
1094:  MOVLB  1
1096:  MOVWF  x3E
.................... write_eeprom(30,carbassaat1); 
1098:  MOVF   FF2,W
109A:  MOVWF  00
109C:  BCF    FF2.7
109E:  MOVLW  1E
10A0:  MOVWF  FA9
10A2:  MOVFF  13E,FA8
10A6:  BCF    FA6.6
10A8:  BCF    FA6.7
10AA:  BSF    FA6.2
10AC:  MOVLB  F
10AE:  MOVLW  55
10B0:  MOVWF  FA7
10B2:  MOVLW  AA
10B4:  MOVWF  FA7
10B6:  BSF    FA6.1
10B8:  BTFSC  FA6.1
10BA:  BRA    10B8
10BC:  BCF    FA6.2
10BE:  MOVF   00,W
10C0:  IORWF  FF2,F
....................  
.................... carbasdk1=((h39*10)+h40); 
10C2:  MOVLB  0
10C4:  MOVF   xD2,W
10C6:  MULLW  0A
10C8:  MOVF   FF3,W
10CA:  ADDWF  xD3,W
10CC:  MOVLB  1
10CE:  MOVWF  x3F
.................... write_eeprom(31,carbasdk1); 
10D0:  MOVF   FF2,W
10D2:  MOVWF  00
10D4:  BCF    FF2.7
10D6:  MOVLW  1F
10D8:  MOVWF  FA9
10DA:  MOVFF  13F,FA8
10DE:  BCF    FA6.6
10E0:  BCF    FA6.7
10E2:  BSF    FA6.2
10E4:  MOVLB  F
10E6:  MOVLW  55
10E8:  MOVWF  FA7
10EA:  MOVLW  AA
10EC:  MOVWF  FA7
10EE:  BSF    FA6.1
10F0:  BTFSC  FA6.1
10F2:  BRA    10F0
10F4:  BCF    FA6.2
10F6:  MOVF   00,W
10F8:  IORWF  FF2,F
....................  
.................... carbitsaat1=((h41*10)+h42); 
10FA:  MOVLB  0
10FC:  MOVF   xD4,W
10FE:  MULLW  0A
1100:  MOVF   FF3,W
1102:  ADDWF  xD5,W
1104:  MOVLB  1
1106:  MOVWF  x40
.................... write_eeprom(32,carbitsaat1); 
1108:  MOVF   FF2,W
110A:  MOVWF  00
110C:  BCF    FF2.7
110E:  MOVLW  20
1110:  MOVWF  FA9
1112:  MOVFF  140,FA8
1116:  BCF    FA6.6
1118:  BCF    FA6.7
111A:  BSF    FA6.2
111C:  MOVLB  F
111E:  MOVLW  55
1120:  MOVWF  FA7
1122:  MOVLW  AA
1124:  MOVWF  FA7
1126:  BSF    FA6.1
1128:  BTFSC  FA6.1
112A:  BRA    1128
112C:  BCF    FA6.2
112E:  MOVF   00,W
1130:  IORWF  FF2,F
....................  
.................... carbitdk1=((h43*10)+h44); 
1132:  MOVLB  0
1134:  MOVF   xD6,W
1136:  MULLW  0A
1138:  MOVF   FF3,W
113A:  ADDWF  xD7,W
113C:  MOVLB  1
113E:  MOVWF  x41
.................... write_eeprom(33,carbitdk1); 
1140:  MOVF   FF2,W
1142:  MOVWF  00
1144:  BCF    FF2.7
1146:  MOVLW  21
1148:  MOVWF  FA9
114A:  MOVFF  141,FA8
114E:  BCF    FA6.6
1150:  BCF    FA6.7
1152:  BSF    FA6.2
1154:  MOVLB  F
1156:  MOVLW  55
1158:  MOVWF  FA7
115A:  MOVLW  AA
115C:  MOVWF  FA7
115E:  BSF    FA6.1
1160:  BTFSC  FA6.1
1162:  BRA    1160
1164:  BCF    FA6.2
1166:  MOVF   00,W
1168:  IORWF  FF2,F
116A:  MOVLB  0
116C:  GOTO   51E0 (RETURN)
.................... } 
....................  
.................... //******************************************************* CARSAMBA 2 FONKSIYONU***************************************** 
.................... void carsamba2 (void) 
.................... { 
.................... carbassaat2=((h46*10)+h47); 
1170:  MOVF   xD9,W
1172:  MULLW  0A
1174:  MOVF   FF3,W
1176:  ADDWF  xDA,W
1178:  MOVLB  1
117A:  MOVWF  x42
.................... write_eeprom(34,carbassaat2); 
117C:  MOVF   FF2,W
117E:  MOVWF  00
1180:  BCF    FF2.7
1182:  MOVLW  22
1184:  MOVWF  FA9
1186:  MOVFF  142,FA8
118A:  BCF    FA6.6
118C:  BCF    FA6.7
118E:  BSF    FA6.2
1190:  MOVLB  F
1192:  MOVLW  55
1194:  MOVWF  FA7
1196:  MOVLW  AA
1198:  MOVWF  FA7
119A:  BSF    FA6.1
119C:  BTFSC  FA6.1
119E:  BRA    119C
11A0:  BCF    FA6.2
11A2:  MOVF   00,W
11A4:  IORWF  FF2,F
....................  
.................... carbasdk2=((h48*10)+h49); 
11A6:  MOVLB  0
11A8:  MOVF   xDB,W
11AA:  MULLW  0A
11AC:  MOVF   FF3,W
11AE:  ADDWF  xDC,W
11B0:  MOVLB  1
11B2:  MOVWF  x43
.................... write_eeprom(35,carbasdk2); 
11B4:  MOVF   FF2,W
11B6:  MOVWF  00
11B8:  BCF    FF2.7
11BA:  MOVLW  23
11BC:  MOVWF  FA9
11BE:  MOVFF  143,FA8
11C2:  BCF    FA6.6
11C4:  BCF    FA6.7
11C6:  BSF    FA6.2
11C8:  MOVLB  F
11CA:  MOVLW  55
11CC:  MOVWF  FA7
11CE:  MOVLW  AA
11D0:  MOVWF  FA7
11D2:  BSF    FA6.1
11D4:  BTFSC  FA6.1
11D6:  BRA    11D4
11D8:  BCF    FA6.2
11DA:  MOVF   00,W
11DC:  IORWF  FF2,F
....................  
.................... carbitsaat2=((h50*10)+h51); 
11DE:  MOVLB  0
11E0:  MOVF   xDD,W
11E2:  MULLW  0A
11E4:  MOVF   FF3,W
11E6:  ADDWF  xDE,W
11E8:  MOVLB  1
11EA:  MOVWF  x44
.................... write_eeprom(36,carbitsaat2); 
11EC:  MOVF   FF2,W
11EE:  MOVWF  00
11F0:  BCF    FF2.7
11F2:  MOVLW  24
11F4:  MOVWF  FA9
11F6:  MOVFF  144,FA8
11FA:  BCF    FA6.6
11FC:  BCF    FA6.7
11FE:  BSF    FA6.2
1200:  MOVLB  F
1202:  MOVLW  55
1204:  MOVWF  FA7
1206:  MOVLW  AA
1208:  MOVWF  FA7
120A:  BSF    FA6.1
120C:  BTFSC  FA6.1
120E:  BRA    120C
1210:  BCF    FA6.2
1212:  MOVF   00,W
1214:  IORWF  FF2,F
....................  
.................... carbitdk2=((h52*10)+h53); 
1216:  MOVLB  0
1218:  MOVF   xDF,W
121A:  MULLW  0A
121C:  MOVF   FF3,W
121E:  ADDWF  xE0,W
1220:  MOVLB  1
1222:  MOVWF  x45
.................... write_eeprom(37,carbitdk2); 
1224:  MOVF   FF2,W
1226:  MOVWF  00
1228:  BCF    FF2.7
122A:  MOVLW  25
122C:  MOVWF  FA9
122E:  MOVFF  145,FA8
1232:  BCF    FA6.6
1234:  BCF    FA6.7
1236:  BSF    FA6.2
1238:  MOVLB  F
123A:  MOVLW  55
123C:  MOVWF  FA7
123E:  MOVLW  AA
1240:  MOVWF  FA7
1242:  BSF    FA6.1
1244:  BTFSC  FA6.1
1246:  BRA    1244
1248:  BCF    FA6.2
124A:  MOVF   00,W
124C:  IORWF  FF2,F
124E:  MOVLB  0
1250:  GOTO   51E4 (RETURN)
.................... } 
....................  
.................... //******************************************************* PERSEMBE 1 FONKSIYONU***************************************** 
.................... void persembe1 (void) 
.................... { 
.................... perbassaat1=((h55*10)+h56); 
1254:  MOVF   xE2,W
1256:  MULLW  0A
1258:  MOVF   FF3,W
125A:  ADDWF  xE3,W
125C:  MOVLB  1
125E:  MOVWF  x46
.................... write_eeprom(38,perbassaat1); 
1260:  MOVF   FF2,W
1262:  MOVWF  00
1264:  BCF    FF2.7
1266:  MOVLW  26
1268:  MOVWF  FA9
126A:  MOVFF  146,FA8
126E:  BCF    FA6.6
1270:  BCF    FA6.7
1272:  BSF    FA6.2
1274:  MOVLB  F
1276:  MOVLW  55
1278:  MOVWF  FA7
127A:  MOVLW  AA
127C:  MOVWF  FA7
127E:  BSF    FA6.1
1280:  BTFSC  FA6.1
1282:  BRA    1280
1284:  BCF    FA6.2
1286:  MOVF   00,W
1288:  IORWF  FF2,F
....................  
.................... perbasdk1=((h57*10)+h58); 
128A:  MOVLB  0
128C:  MOVF   xE4,W
128E:  MULLW  0A
1290:  MOVF   FF3,W
1292:  ADDWF  xE5,W
1294:  MOVLB  1
1296:  MOVWF  x47
.................... write_eeprom(39,perbasdk1); 
1298:  MOVF   FF2,W
129A:  MOVWF  00
129C:  BCF    FF2.7
129E:  MOVLW  27
12A0:  MOVWF  FA9
12A2:  MOVFF  147,FA8
12A6:  BCF    FA6.6
12A8:  BCF    FA6.7
12AA:  BSF    FA6.2
12AC:  MOVLB  F
12AE:  MOVLW  55
12B0:  MOVWF  FA7
12B2:  MOVLW  AA
12B4:  MOVWF  FA7
12B6:  BSF    FA6.1
12B8:  BTFSC  FA6.1
12BA:  BRA    12B8
12BC:  BCF    FA6.2
12BE:  MOVF   00,W
12C0:  IORWF  FF2,F
....................  
.................... perbitsaat1=((h59*10)+h60); 
12C2:  MOVLB  0
12C4:  MOVF   xE6,W
12C6:  MULLW  0A
12C8:  MOVF   FF3,W
12CA:  ADDWF  xE7,W
12CC:  MOVLB  1
12CE:  MOVWF  x48
.................... write_eeprom(40,perbitsaat1); 
12D0:  MOVF   FF2,W
12D2:  MOVWF  00
12D4:  BCF    FF2.7
12D6:  MOVLW  28
12D8:  MOVWF  FA9
12DA:  MOVFF  148,FA8
12DE:  BCF    FA6.6
12E0:  BCF    FA6.7
12E2:  BSF    FA6.2
12E4:  MOVLB  F
12E6:  MOVLW  55
12E8:  MOVWF  FA7
12EA:  MOVLW  AA
12EC:  MOVWF  FA7
12EE:  BSF    FA6.1
12F0:  BTFSC  FA6.1
12F2:  BRA    12F0
12F4:  BCF    FA6.2
12F6:  MOVF   00,W
12F8:  IORWF  FF2,F
....................  
.................... perbitdk1=((h61*10)+h62); 
12FA:  MOVLB  0
12FC:  MOVF   xE8,W
12FE:  MULLW  0A
1300:  MOVF   FF3,W
1302:  ADDWF  xE9,W
1304:  MOVLB  1
1306:  MOVWF  x49
.................... write_eeprom(41,perbitdk1); 
1308:  MOVF   FF2,W
130A:  MOVWF  00
130C:  BCF    FF2.7
130E:  MOVLW  29
1310:  MOVWF  FA9
1312:  MOVFF  149,FA8
1316:  BCF    FA6.6
1318:  BCF    FA6.7
131A:  BSF    FA6.2
131C:  MOVLB  F
131E:  MOVLW  55
1320:  MOVWF  FA7
1322:  MOVLW  AA
1324:  MOVWF  FA7
1326:  BSF    FA6.1
1328:  BTFSC  FA6.1
132A:  BRA    1328
132C:  BCF    FA6.2
132E:  MOVF   00,W
1330:  IORWF  FF2,F
1332:  MOVLB  0
1334:  GOTO   51E8 (RETURN)
.................... } 
....................  
.................... //******************************************************* PERSEMBE 2 FONKSIYONU***************************************** 
.................... void persembe2 (void) 
.................... { 
.................... perbassaat2=((h64*10)+h65); 
1338:  MOVF   xEB,W
133A:  MULLW  0A
133C:  MOVF   FF3,W
133E:  ADDWF  xEC,W
1340:  MOVLB  1
1342:  MOVWF  x4A
.................... write_eeprom(42,perbassaat2); 
1344:  MOVF   FF2,W
1346:  MOVWF  00
1348:  BCF    FF2.7
134A:  MOVLW  2A
134C:  MOVWF  FA9
134E:  MOVFF  14A,FA8
1352:  BCF    FA6.6
1354:  BCF    FA6.7
1356:  BSF    FA6.2
1358:  MOVLB  F
135A:  MOVLW  55
135C:  MOVWF  FA7
135E:  MOVLW  AA
1360:  MOVWF  FA7
1362:  BSF    FA6.1
1364:  BTFSC  FA6.1
1366:  BRA    1364
1368:  BCF    FA6.2
136A:  MOVF   00,W
136C:  IORWF  FF2,F
....................  
.................... perbasdk2=((h66*10)+h67); 
136E:  MOVLB  0
1370:  MOVF   xED,W
1372:  MULLW  0A
1374:  MOVF   FF3,W
1376:  ADDWF  xEE,W
1378:  MOVLB  1
137A:  MOVWF  x4B
.................... write_eeprom(43,perbasdk2); 
137C:  MOVF   FF2,W
137E:  MOVWF  00
1380:  BCF    FF2.7
1382:  MOVLW  2B
1384:  MOVWF  FA9
1386:  MOVFF  14B,FA8
138A:  BCF    FA6.6
138C:  BCF    FA6.7
138E:  BSF    FA6.2
1390:  MOVLB  F
1392:  MOVLW  55
1394:  MOVWF  FA7
1396:  MOVLW  AA
1398:  MOVWF  FA7
139A:  BSF    FA6.1
139C:  BTFSC  FA6.1
139E:  BRA    139C
13A0:  BCF    FA6.2
13A2:  MOVF   00,W
13A4:  IORWF  FF2,F
....................  
.................... perbitsaat2=((h68*10)+h69); 
13A6:  MOVLB  0
13A8:  MOVF   xEF,W
13AA:  MULLW  0A
13AC:  MOVF   FF3,W
13AE:  ADDWF  xF0,W
13B0:  MOVLB  1
13B2:  MOVWF  x4C
.................... write_eeprom(44,perbitsaat2); 
13B4:  MOVF   FF2,W
13B6:  MOVWF  00
13B8:  BCF    FF2.7
13BA:  MOVLW  2C
13BC:  MOVWF  FA9
13BE:  MOVFF  14C,FA8
13C2:  BCF    FA6.6
13C4:  BCF    FA6.7
13C6:  BSF    FA6.2
13C8:  MOVLB  F
13CA:  MOVLW  55
13CC:  MOVWF  FA7
13CE:  MOVLW  AA
13D0:  MOVWF  FA7
13D2:  BSF    FA6.1
13D4:  BTFSC  FA6.1
13D6:  BRA    13D4
13D8:  BCF    FA6.2
13DA:  MOVF   00,W
13DC:  IORWF  FF2,F
....................  
.................... perbitdk2=((h70*10)+h71); 
13DE:  MOVLB  0
13E0:  MOVF   xF1,W
13E2:  MULLW  0A
13E4:  MOVF   FF3,W
13E6:  ADDWF  xF2,W
13E8:  MOVLB  1
13EA:  MOVWF  x4D
.................... write_eeprom(45,perbitdk2); 
13EC:  MOVF   FF2,W
13EE:  MOVWF  00
13F0:  BCF    FF2.7
13F2:  MOVLW  2D
13F4:  MOVWF  FA9
13F6:  MOVFF  14D,FA8
13FA:  BCF    FA6.6
13FC:  BCF    FA6.7
13FE:  BSF    FA6.2
1400:  MOVLB  F
1402:  MOVLW  55
1404:  MOVWF  FA7
1406:  MOVLW  AA
1408:  MOVWF  FA7
140A:  BSF    FA6.1
140C:  BTFSC  FA6.1
140E:  BRA    140C
1410:  BCF    FA6.2
1412:  MOVF   00,W
1414:  IORWF  FF2,F
1416:  MOVLB  0
1418:  GOTO   51EC (RETURN)
.................... } 
....................  
.................... //******************************************************* CUMA 1 FONKSIYONU********************************************* 
.................... void cuma1 (void) 
.................... { 
.................... cumabassaat1=((h73*10)+h74); 
141C:  MOVF   xF4,W
141E:  MULLW  0A
1420:  MOVF   FF3,W
1422:  ADDWF  xF5,W
1424:  MOVLB  1
1426:  MOVWF  x4E
.................... write_eeprom(46,cumabassaat1); 
1428:  MOVF   FF2,W
142A:  MOVWF  00
142C:  BCF    FF2.7
142E:  MOVLW  2E
1430:  MOVWF  FA9
1432:  MOVFF  14E,FA8
1436:  BCF    FA6.6
1438:  BCF    FA6.7
143A:  BSF    FA6.2
143C:  MOVLB  F
143E:  MOVLW  55
1440:  MOVWF  FA7
1442:  MOVLW  AA
1444:  MOVWF  FA7
1446:  BSF    FA6.1
1448:  BTFSC  FA6.1
144A:  BRA    1448
144C:  BCF    FA6.2
144E:  MOVF   00,W
1450:  IORWF  FF2,F
....................  
.................... cumabasdk1=((h75*10)+h76); 
1452:  MOVLB  0
1454:  MOVF   xF6,W
1456:  MULLW  0A
1458:  MOVF   FF3,W
145A:  ADDWF  xF7,W
145C:  MOVLB  1
145E:  MOVWF  x4F
.................... write_eeprom(47,cumabasdk1); 
1460:  MOVF   FF2,W
1462:  MOVWF  00
1464:  BCF    FF2.7
1466:  MOVLW  2F
1468:  MOVWF  FA9
146A:  MOVFF  14F,FA8
146E:  BCF    FA6.6
1470:  BCF    FA6.7
1472:  BSF    FA6.2
1474:  MOVLB  F
1476:  MOVLW  55
1478:  MOVWF  FA7
147A:  MOVLW  AA
147C:  MOVWF  FA7
147E:  BSF    FA6.1
1480:  BTFSC  FA6.1
1482:  BRA    1480
1484:  BCF    FA6.2
1486:  MOVF   00,W
1488:  IORWF  FF2,F
....................  
.................... cumabitsaat1=((h77*10)+h78); 
148A:  MOVLB  0
148C:  MOVF   xF8,W
148E:  MULLW  0A
1490:  MOVF   FF3,W
1492:  ADDWF  xF9,W
1494:  MOVLB  1
1496:  MOVWF  x50
.................... write_eeprom(48,cumabitsaat1); 
1498:  MOVF   FF2,W
149A:  MOVWF  00
149C:  BCF    FF2.7
149E:  MOVLW  30
14A0:  MOVWF  FA9
14A2:  MOVFF  150,FA8
14A6:  BCF    FA6.6
14A8:  BCF    FA6.7
14AA:  BSF    FA6.2
14AC:  MOVLB  F
14AE:  MOVLW  55
14B0:  MOVWF  FA7
14B2:  MOVLW  AA
14B4:  MOVWF  FA7
14B6:  BSF    FA6.1
14B8:  BTFSC  FA6.1
14BA:  BRA    14B8
14BC:  BCF    FA6.2
14BE:  MOVF   00,W
14C0:  IORWF  FF2,F
....................  
.................... cumabitdk1=((h79*10)+h80); 
14C2:  MOVLB  0
14C4:  MOVF   xFA,W
14C6:  MULLW  0A
14C8:  MOVF   FF3,W
14CA:  ADDWF  xFB,W
14CC:  MOVLB  1
14CE:  MOVWF  x51
.................... write_eeprom(49,cumabitdk1); 
14D0:  MOVF   FF2,W
14D2:  MOVWF  00
14D4:  BCF    FF2.7
14D6:  MOVLW  31
14D8:  MOVWF  FA9
14DA:  MOVFF  151,FA8
14DE:  BCF    FA6.6
14E0:  BCF    FA6.7
14E2:  BSF    FA6.2
14E4:  MOVLB  F
14E6:  MOVLW  55
14E8:  MOVWF  FA7
14EA:  MOVLW  AA
14EC:  MOVWF  FA7
14EE:  BSF    FA6.1
14F0:  BTFSC  FA6.1
14F2:  BRA    14F0
14F4:  BCF    FA6.2
14F6:  MOVF   00,W
14F8:  IORWF  FF2,F
14FA:  MOVLB  0
14FC:  GOTO   51F0 (RETURN)
.................... } 
....................  
.................... //******************************************************* CUMA 2 FONKSIYONU********************************************* 
.................... void cuma2 (void) 
.................... { 
.................... cumabassaat2=((h82*10)+h83); 
1500:  MOVF   xFD,W
1502:  MULLW  0A
1504:  MOVF   FF3,W
1506:  ADDWF  xFE,W
1508:  MOVLB  1
150A:  MOVWF  x52
.................... write_eeprom(50,cumabassaat2); 
150C:  MOVF   FF2,W
150E:  MOVWF  00
1510:  BCF    FF2.7
1512:  MOVLW  32
1514:  MOVWF  FA9
1516:  MOVFF  152,FA8
151A:  BCF    FA6.6
151C:  BCF    FA6.7
151E:  BSF    FA6.2
1520:  MOVLB  F
1522:  MOVLW  55
1524:  MOVWF  FA7
1526:  MOVLW  AA
1528:  MOVWF  FA7
152A:  BSF    FA6.1
152C:  BTFSC  FA6.1
152E:  BRA    152C
1530:  BCF    FA6.2
1532:  MOVF   00,W
1534:  IORWF  FF2,F
....................  
.................... cumabasdk2=((h84*10)+h85); 
1536:  MOVLB  0
1538:  MOVF   xFF,W
153A:  MULLW  0A
153C:  MOVF   FF3,W
153E:  MOVLB  1
1540:  ADDWF  x00,W
1542:  MOVWF  x53
.................... write_eeprom(51,cumabasdk2); 
1544:  MOVF   FF2,W
1546:  MOVWF  00
1548:  BCF    FF2.7
154A:  MOVLW  33
154C:  MOVWF  FA9
154E:  MOVFF  153,FA8
1552:  BCF    FA6.6
1554:  BCF    FA6.7
1556:  BSF    FA6.2
1558:  MOVLB  F
155A:  MOVLW  55
155C:  MOVWF  FA7
155E:  MOVLW  AA
1560:  MOVWF  FA7
1562:  BSF    FA6.1
1564:  BTFSC  FA6.1
1566:  BRA    1564
1568:  BCF    FA6.2
156A:  MOVF   00,W
156C:  IORWF  FF2,F
....................  
.................... cumabitsaat2=((h86*10)+h87); 
156E:  MOVLB  1
1570:  MOVF   x01,W
1572:  MULLW  0A
1574:  MOVF   FF3,W
1576:  ADDWF  x02,W
1578:  MOVWF  x54
.................... write_eeprom(52,cumabitsaat2); 
157A:  MOVF   FF2,W
157C:  MOVWF  00
157E:  BCF    FF2.7
1580:  MOVLW  34
1582:  MOVWF  FA9
1584:  MOVFF  154,FA8
1588:  BCF    FA6.6
158A:  BCF    FA6.7
158C:  BSF    FA6.2
158E:  MOVLB  F
1590:  MOVLW  55
1592:  MOVWF  FA7
1594:  MOVLW  AA
1596:  MOVWF  FA7
1598:  BSF    FA6.1
159A:  BTFSC  FA6.1
159C:  BRA    159A
159E:  BCF    FA6.2
15A0:  MOVF   00,W
15A2:  IORWF  FF2,F
....................  
.................... cumabitdk2=((h88*10)+h89); 
15A4:  MOVLB  1
15A6:  MOVF   x03,W
15A8:  MULLW  0A
15AA:  MOVF   FF3,W
15AC:  ADDWF  x04,W
15AE:  MOVWF  x55
.................... write_eeprom(53,cumabitdk2); 
15B0:  MOVF   FF2,W
15B2:  MOVWF  00
15B4:  BCF    FF2.7
15B6:  MOVLW  35
15B8:  MOVWF  FA9
15BA:  MOVFF  155,FA8
15BE:  BCF    FA6.6
15C0:  BCF    FA6.7
15C2:  BSF    FA6.2
15C4:  MOVLB  F
15C6:  MOVLW  55
15C8:  MOVWF  FA7
15CA:  MOVLW  AA
15CC:  MOVWF  FA7
15CE:  BSF    FA6.1
15D0:  BTFSC  FA6.1
15D2:  BRA    15D0
15D4:  BCF    FA6.2
15D6:  MOVF   00,W
15D8:  IORWF  FF2,F
15DA:  MOVLB  0
15DC:  GOTO   51F4 (RETURN)
.................... } 
....................  
.................... //******************************************************* CUMARTESI 1 FONKSIYONU***************************************** 
.................... void cumartesi1 (void) 
.................... { 
.................... ctesibassaat1=((h91*10)+h92); 
15E0:  MOVLB  1
15E2:  MOVF   x06,W
15E4:  MULLW  0A
15E6:  MOVF   FF3,W
15E8:  ADDWF  x07,W
15EA:  MOVWF  x56
.................... write_eeprom(54,ctesibassaat1); 
15EC:  MOVF   FF2,W
15EE:  MOVWF  00
15F0:  BCF    FF2.7
15F2:  MOVLW  36
15F4:  MOVWF  FA9
15F6:  MOVFF  156,FA8
15FA:  BCF    FA6.6
15FC:  BCF    FA6.7
15FE:  BSF    FA6.2
1600:  MOVLB  F
1602:  MOVLW  55
1604:  MOVWF  FA7
1606:  MOVLW  AA
1608:  MOVWF  FA7
160A:  BSF    FA6.1
160C:  BTFSC  FA6.1
160E:  BRA    160C
1610:  BCF    FA6.2
1612:  MOVF   00,W
1614:  IORWF  FF2,F
....................  
.................... ctesibasdk1=((h93*10)+h94); 
1616:  MOVLB  1
1618:  MOVF   x08,W
161A:  MULLW  0A
161C:  MOVF   FF3,W
161E:  ADDWF  x09,W
1620:  MOVWF  x57
.................... write_eeprom(55,ctesibasdk1); 
1622:  MOVF   FF2,W
1624:  MOVWF  00
1626:  BCF    FF2.7
1628:  MOVLW  37
162A:  MOVWF  FA9
162C:  MOVFF  157,FA8
1630:  BCF    FA6.6
1632:  BCF    FA6.7
1634:  BSF    FA6.2
1636:  MOVLB  F
1638:  MOVLW  55
163A:  MOVWF  FA7
163C:  MOVLW  AA
163E:  MOVWF  FA7
1640:  BSF    FA6.1
1642:  BTFSC  FA6.1
1644:  BRA    1642
1646:  BCF    FA6.2
1648:  MOVF   00,W
164A:  IORWF  FF2,F
....................  
.................... ctesibitsaat1=((h95*10)+h96); 
164C:  MOVLB  1
164E:  MOVF   x0A,W
1650:  MULLW  0A
1652:  MOVF   FF3,W
1654:  ADDWF  x0B,W
1656:  MOVWF  x58
.................... write_eeprom(56,ctesibitsaat1); 
1658:  MOVF   FF2,W
165A:  MOVWF  00
165C:  BCF    FF2.7
165E:  MOVLW  38
1660:  MOVWF  FA9
1662:  MOVFF  158,FA8
1666:  BCF    FA6.6
1668:  BCF    FA6.7
166A:  BSF    FA6.2
166C:  MOVLB  F
166E:  MOVLW  55
1670:  MOVWF  FA7
1672:  MOVLW  AA
1674:  MOVWF  FA7
1676:  BSF    FA6.1
1678:  BTFSC  FA6.1
167A:  BRA    1678
167C:  BCF    FA6.2
167E:  MOVF   00,W
1680:  IORWF  FF2,F
....................  
.................... ctesibitdk1=((h97*10)+h98); 
1682:  MOVLB  1
1684:  MOVF   x0C,W
1686:  MULLW  0A
1688:  MOVF   FF3,W
168A:  ADDWF  x0D,W
168C:  MOVWF  x59
.................... write_eeprom(57,ctesibitdk1); 
168E:  MOVF   FF2,W
1690:  MOVWF  00
1692:  BCF    FF2.7
1694:  MOVLW  39
1696:  MOVWF  FA9
1698:  MOVFF  159,FA8
169C:  BCF    FA6.6
169E:  BCF    FA6.7
16A0:  BSF    FA6.2
16A2:  MOVLB  F
16A4:  MOVLW  55
16A6:  MOVWF  FA7
16A8:  MOVLW  AA
16AA:  MOVWF  FA7
16AC:  BSF    FA6.1
16AE:  BTFSC  FA6.1
16B0:  BRA    16AE
16B2:  BCF    FA6.2
16B4:  MOVF   00,W
16B6:  IORWF  FF2,F
16B8:  MOVLB  0
16BA:  GOTO   51F8 (RETURN)
.................... } 
....................  
.................... //******************************************************* CUMARTESI 2 FONKSIYONU****************************************** 
....................  
.................... void cumartesi2 (void) 
.................... { 
.................... ctesibassaat2=((h100*10)+h101); 
16BE:  MOVLB  1
16C0:  MOVF   x0F,W
16C2:  MULLW  0A
16C4:  MOVF   FF3,W
16C6:  ADDWF  x10,W
16C8:  MOVWF  x5A
.................... write_eeprom(58,ctesibassaat2); 
16CA:  MOVF   FF2,W
16CC:  MOVWF  00
16CE:  BCF    FF2.7
16D0:  MOVLW  3A
16D2:  MOVWF  FA9
16D4:  MOVFF  15A,FA8
16D8:  BCF    FA6.6
16DA:  BCF    FA6.7
16DC:  BSF    FA6.2
16DE:  MOVLB  F
16E0:  MOVLW  55
16E2:  MOVWF  FA7
16E4:  MOVLW  AA
16E6:  MOVWF  FA7
16E8:  BSF    FA6.1
16EA:  BTFSC  FA6.1
16EC:  BRA    16EA
16EE:  BCF    FA6.2
16F0:  MOVF   00,W
16F2:  IORWF  FF2,F
....................  
.................... ctesibasdk2=((h102*10)+h103); 
16F4:  MOVLB  1
16F6:  MOVF   x11,W
16F8:  MULLW  0A
16FA:  MOVF   FF3,W
16FC:  ADDWF  x12,W
16FE:  MOVWF  x5B
.................... write_eeprom(59,ctesibasdk2); 
1700:  MOVF   FF2,W
1702:  MOVWF  00
1704:  BCF    FF2.7
1706:  MOVLW  3B
1708:  MOVWF  FA9
170A:  MOVFF  15B,FA8
170E:  BCF    FA6.6
1710:  BCF    FA6.7
1712:  BSF    FA6.2
1714:  MOVLB  F
1716:  MOVLW  55
1718:  MOVWF  FA7
171A:  MOVLW  AA
171C:  MOVWF  FA7
171E:  BSF    FA6.1
1720:  BTFSC  FA6.1
1722:  BRA    1720
1724:  BCF    FA6.2
1726:  MOVF   00,W
1728:  IORWF  FF2,F
....................  
.................... ctesibitsaat2=((h104*10)+h105); 
172A:  MOVLB  1
172C:  MOVF   x13,W
172E:  MULLW  0A
1730:  MOVF   FF3,W
1732:  ADDWF  x14,W
1734:  MOVWF  x5C
.................... write_eeprom(60,ctesibitsaat2); 
1736:  MOVF   FF2,W
1738:  MOVWF  00
173A:  BCF    FF2.7
173C:  MOVLW  3C
173E:  MOVWF  FA9
1740:  MOVFF  15C,FA8
1744:  BCF    FA6.6
1746:  BCF    FA6.7
1748:  BSF    FA6.2
174A:  MOVLB  F
174C:  MOVLW  55
174E:  MOVWF  FA7
1750:  MOVLW  AA
1752:  MOVWF  FA7
1754:  BSF    FA6.1
1756:  BTFSC  FA6.1
1758:  BRA    1756
175A:  BCF    FA6.2
175C:  MOVF   00,W
175E:  IORWF  FF2,F
....................  
.................... ctesibitdk2=((h106*10)+h107); 
1760:  MOVLB  1
1762:  MOVF   x15,W
1764:  MULLW  0A
1766:  MOVF   FF3,W
1768:  ADDWF  x16,W
176A:  MOVWF  x5D
.................... write_eeprom(61,ctesibitdk2); 
176C:  MOVF   FF2,W
176E:  MOVWF  00
1770:  BCF    FF2.7
1772:  MOVLW  3D
1774:  MOVWF  FA9
1776:  MOVFF  15D,FA8
177A:  BCF    FA6.6
177C:  BCF    FA6.7
177E:  BSF    FA6.2
1780:  MOVLB  F
1782:  MOVLW  55
1784:  MOVWF  FA7
1786:  MOVLW  AA
1788:  MOVWF  FA7
178A:  BSF    FA6.1
178C:  BTFSC  FA6.1
178E:  BRA    178C
1790:  BCF    FA6.2
1792:  MOVF   00,W
1794:  IORWF  FF2,F
1796:  MOVLB  0
1798:  GOTO   51FC (RETURN)
.................... } 
....................  
.................... //******************************************************* PAZAR 1 FONKSIYONU********************************************* 
....................  
.................... void pazar1 (void) 
.................... { 
.................... pazarbassaat1=((h109*10)+h110); 
179C:  MOVLB  1
179E:  MOVF   x18,W
17A0:  MULLW  0A
17A2:  MOVF   FF3,W
17A4:  ADDWF  x19,W
17A6:  MOVWF  x5E
.................... write_eeprom(62,pazarbassaat1); 
17A8:  MOVF   FF2,W
17AA:  MOVWF  00
17AC:  BCF    FF2.7
17AE:  MOVLW  3E
17B0:  MOVWF  FA9
17B2:  MOVFF  15E,FA8
17B6:  BCF    FA6.6
17B8:  BCF    FA6.7
17BA:  BSF    FA6.2
17BC:  MOVLB  F
17BE:  MOVLW  55
17C0:  MOVWF  FA7
17C2:  MOVLW  AA
17C4:  MOVWF  FA7
17C6:  BSF    FA6.1
17C8:  BTFSC  FA6.1
17CA:  BRA    17C8
17CC:  BCF    FA6.2
17CE:  MOVF   00,W
17D0:  IORWF  FF2,F
....................  
.................... pazarbasdk1=((h111*10)+h112); 
17D2:  MOVLB  1
17D4:  MOVF   x1A,W
17D6:  MULLW  0A
17D8:  MOVF   FF3,W
17DA:  ADDWF  x1B,W
17DC:  MOVWF  x5F
.................... write_eeprom(63,pazarbasdk1); 
17DE:  MOVF   FF2,W
17E0:  MOVWF  00
17E2:  BCF    FF2.7
17E4:  MOVLW  3F
17E6:  MOVWF  FA9
17E8:  MOVFF  15F,FA8
17EC:  BCF    FA6.6
17EE:  BCF    FA6.7
17F0:  BSF    FA6.2
17F2:  MOVLB  F
17F4:  MOVLW  55
17F6:  MOVWF  FA7
17F8:  MOVLW  AA
17FA:  MOVWF  FA7
17FC:  BSF    FA6.1
17FE:  BTFSC  FA6.1
1800:  BRA    17FE
1802:  BCF    FA6.2
1804:  MOVF   00,W
1806:  IORWF  FF2,F
....................  
.................... pazarbitsaat1=((h113*10)+h114); 
1808:  MOVLB  1
180A:  MOVF   x1C,W
180C:  MULLW  0A
180E:  MOVF   FF3,W
1810:  ADDWF  x1D,W
1812:  MOVWF  x60
.................... write_eeprom(64,pazarbitsaat1); 
1814:  MOVF   FF2,W
1816:  MOVWF  00
1818:  BCF    FF2.7
181A:  MOVLW  40
181C:  MOVWF  FA9
181E:  MOVFF  160,FA8
1822:  BCF    FA6.6
1824:  BCF    FA6.7
1826:  BSF    FA6.2
1828:  MOVLB  F
182A:  MOVLW  55
182C:  MOVWF  FA7
182E:  MOVLW  AA
1830:  MOVWF  FA7
1832:  BSF    FA6.1
1834:  BTFSC  FA6.1
1836:  BRA    1834
1838:  BCF    FA6.2
183A:  MOVF   00,W
183C:  IORWF  FF2,F
....................  
.................... pazarbitdk1=((h115*10)+h116); 
183E:  MOVLB  1
1840:  MOVF   x1E,W
1842:  MULLW  0A
1844:  MOVF   FF3,W
1846:  ADDWF  x1F,W
1848:  MOVWF  x61
.................... write_eeprom(65,pazarbitdk1); 
184A:  MOVF   FF2,W
184C:  MOVWF  00
184E:  BCF    FF2.7
1850:  MOVLW  41
1852:  MOVWF  FA9
1854:  MOVFF  161,FA8
1858:  BCF    FA6.6
185A:  BCF    FA6.7
185C:  BSF    FA6.2
185E:  MOVLB  F
1860:  MOVLW  55
1862:  MOVWF  FA7
1864:  MOVLW  AA
1866:  MOVWF  FA7
1868:  BSF    FA6.1
186A:  BTFSC  FA6.1
186C:  BRA    186A
186E:  BCF    FA6.2
1870:  MOVF   00,W
1872:  IORWF  FF2,F
1874:  MOVLB  0
1876:  GOTO   5200 (RETURN)
.................... } 
....................  
.................... //******************************************************* PAZAR 2 FONKSIYONU********************************************** 
....................  
.................... void pazar2 (void) 
.................... { 
.................... pazarbassaat2=((h118*10)+h119); 
187A:  MOVLB  1
187C:  MOVF   x21,W
187E:  MULLW  0A
1880:  MOVF   FF3,W
1882:  ADDWF  x22,W
1884:  MOVWF  x62
.................... write_eeprom(66,pazarbassaat2); 
1886:  MOVF   FF2,W
1888:  MOVWF  00
188A:  BCF    FF2.7
188C:  MOVLW  42
188E:  MOVWF  FA9
1890:  MOVFF  162,FA8
1894:  BCF    FA6.6
1896:  BCF    FA6.7
1898:  BSF    FA6.2
189A:  MOVLB  F
189C:  MOVLW  55
189E:  MOVWF  FA7
18A0:  MOVLW  AA
18A2:  MOVWF  FA7
18A4:  BSF    FA6.1
18A6:  BTFSC  FA6.1
18A8:  BRA    18A6
18AA:  BCF    FA6.2
18AC:  MOVF   00,W
18AE:  IORWF  FF2,F
....................  
.................... pazarbasdk2=((h120*10)+h121); 
18B0:  MOVLB  1
18B2:  MOVF   x23,W
18B4:  MULLW  0A
18B6:  MOVF   FF3,W
18B8:  ADDWF  x24,W
18BA:  MOVWF  x63
.................... write_eeprom(67,pazarbasdk2); 
18BC:  MOVF   FF2,W
18BE:  MOVWF  00
18C0:  BCF    FF2.7
18C2:  MOVLW  43
18C4:  MOVWF  FA9
18C6:  MOVFF  163,FA8
18CA:  BCF    FA6.6
18CC:  BCF    FA6.7
18CE:  BSF    FA6.2
18D0:  MOVLB  F
18D2:  MOVLW  55
18D4:  MOVWF  FA7
18D6:  MOVLW  AA
18D8:  MOVWF  FA7
18DA:  BSF    FA6.1
18DC:  BTFSC  FA6.1
18DE:  BRA    18DC
18E0:  BCF    FA6.2
18E2:  MOVF   00,W
18E4:  IORWF  FF2,F
....................  
.................... pazarbitsaat2=((h122*10)+h123); 
18E6:  MOVLB  1
18E8:  MOVF   x25,W
18EA:  MULLW  0A
18EC:  MOVF   FF3,W
18EE:  ADDWF  x26,W
18F0:  MOVWF  x64
.................... write_eeprom(68,pazarbitsaat2); 
18F2:  MOVF   FF2,W
18F4:  MOVWF  00
18F6:  BCF    FF2.7
18F8:  MOVLW  44
18FA:  MOVWF  FA9
18FC:  MOVFF  164,FA8
1900:  BCF    FA6.6
1902:  BCF    FA6.7
1904:  BSF    FA6.2
1906:  MOVLB  F
1908:  MOVLW  55
190A:  MOVWF  FA7
190C:  MOVLW  AA
190E:  MOVWF  FA7
1910:  BSF    FA6.1
1912:  BTFSC  FA6.1
1914:  BRA    1912
1916:  BCF    FA6.2
1918:  MOVF   00,W
191A:  IORWF  FF2,F
....................  
.................... pazarbitdk2=((h124*10)+h125); 
191C:  MOVLB  1
191E:  MOVF   x27,W
1920:  MULLW  0A
1922:  MOVF   FF3,W
1924:  ADDWF  x28,W
1926:  MOVWF  x65
.................... write_eeprom(69,pazarbitdk2); 
1928:  MOVF   FF2,W
192A:  MOVWF  00
192C:  BCF    FF2.7
192E:  MOVLW  45
1930:  MOVWF  FA9
1932:  MOVFF  165,FA8
1936:  BCF    FA6.6
1938:  BCF    FA6.7
193A:  BSF    FA6.2
193C:  MOVLB  F
193E:  MOVLW  55
1940:  MOVWF  FA7
1942:  MOVLW  AA
1944:  MOVWF  FA7
1946:  BSF    FA6.1
1948:  BTFSC  FA6.1
194A:  BRA    1948
194C:  BCF    FA6.2
194E:  MOVF   00,W
1950:  IORWF  FF2,F
1952:  MOVLB  0
1954:  GOTO   5204 (RETURN)
.................... } 
....................  
.................... //******************************************************* BUGUN FONKSIYONU************************************************ 
.................... void bugun (void) 
.................... { 
....................    day=h126; 
*
385C:  MOVFF  129,168
....................    bugunsaat=((h127*10)+h128); 
3860:  MOVLB  1
3862:  MOVF   x2A,W
3864:  MULLW  0A
3866:  MOVF   FF3,W
3868:  ADDWF  x2B,W
386A:  MOVWF  x66
....................    bugundk=((h129*10)+h130); 
386C:  MOVF   x2C,W
386E:  MULLW  0A
3870:  MOVF   FF3,W
3872:  ADDWF  x2D,W
3874:  MOVWF  x67
3876:  MOVLB  0
3878:  GOTO   5220 (RETURN)
.................... } 
....................  
.................... //******************************************TOPLAMA FONKSIYONU************************************************************ 
....................  
.................... void toplama(void) 
.................... { 
....................   //******************************* PAZARTESI 1 GUNU TOPLAM DK************************************ 
....................    
....................    if(read_eeprom(0)==1)// pazartesi1 günü acik ise 
*
24EE:  MOVFF  FF2,24E
24F2:  BCF    FF2.7
24F4:  CLRF   FA9
24F6:  BCF    FA6.6
24F8:  BCF    FA6.7
24FA:  BSF    FA6.0
24FC:  MOVF   FA8,W
24FE:  MOVLB  2
2500:  BTFSC  x4E.7
2502:  BSF    FF2.7
2504:  SUBLW  01
2506:  BNZ   25E6
....................    { 
....................       ptesisaat=read_eeprom(16)-read_eeprom(14);// 0 dan kucuk degilse islem aynen uygulanir 
2508:  MOVFF  FF2,24E
250C:  BCF    FF2.7
250E:  MOVLW  10
2510:  MOVWF  FA9
2512:  BCF    FA6.6
2514:  BCF    FA6.7
2516:  BSF    FA6.0
2518:  MOVF   FA8,W
251A:  BTFSC  x4E.7
251C:  BSF    FF2.7
251E:  MOVWF  x4F
2520:  MOVFF  FF2,250
2524:  BCF    FF2.7
2526:  MOVLW  0E
2528:  MOVWF  FA9
252A:  BCF    FA6.6
252C:  BCF    FA6.7
252E:  BSF    FA6.0
2530:  MOVF   FA8,W
2532:  BTFSC  x50.7
2534:  BSF    FF2.7
2536:  SUBWF  x4F,W
2538:  MOVWF  00
253A:  CLRF   01
253C:  CLRF   02
253E:  CLRF   03
2540:  MOVFF  03,16C
2544:  MOVFF  02,16B
2548:  MOVFF  01,16A
254C:  MOVFF  00,169
....................       ptesidk=read_eeprom(17)-read_eeprom(15);// 0 dan kucuk degilse islem aynen uygulanir 
2550:  MOVFF  FF2,24E
2554:  BCF    FF2.7
2556:  MOVLW  11
2558:  MOVWF  FA9
255A:  BCF    FA6.6
255C:  BCF    FA6.7
255E:  BSF    FA6.0
2560:  MOVF   FA8,W
2562:  BTFSC  x4E.7
2564:  BSF    FF2.7
2566:  MOVWF  x4F
2568:  MOVFF  FF2,250
256C:  BCF    FF2.7
256E:  MOVLW  0F
2570:  MOVWF  FA9
2572:  BCF    FA6.6
2574:  BCF    FA6.7
2576:  BSF    FA6.0
2578:  MOVF   FA8,W
257A:  BTFSC  x50.7
257C:  BSF    FF2.7
257E:  SUBWF  x4F,W
2580:  MOVWF  00
2582:  CLRF   01
2584:  CLRF   02
2586:  CLRF   03
2588:  MOVFF  03,170
258C:  MOVFF  02,16F
2590:  MOVFF  01,16E
2594:  MOVFF  00,16D
....................       ptesitoplamdk=(60*ptesisaat)+(ptesidk); 
2598:  CLRF   x51
259A:  CLRF   x50
259C:  CLRF   x4F
259E:  MOVLW  3C
25A0:  MOVWF  x4E
25A2:  MOVFF  16C,255
25A6:  MOVFF  16B,254
25AA:  MOVFF  16A,253
25AE:  MOVFF  169,252
25B2:  MOVLB  0
25B4:  CALL   1958
25B8:  MOVLB  1
25BA:  MOVF   x6D,W
25BC:  MOVLB  2
25BE:  ADDWF  00,W
25C0:  MOVLB  1
25C2:  MOVWF  xE1
25C4:  MOVF   x6E,W
25C6:  MOVLB  2
25C8:  ADDWFC 01,W
25CA:  MOVLB  1
25CC:  MOVWF  xE2
25CE:  MOVF   x6F,W
25D0:  MOVLB  2
25D2:  ADDWFC 02,W
25D4:  MOVLB  1
25D6:  MOVWF  xE3
25D8:  MOVF   x70,W
25DA:  MOVLB  2
25DC:  ADDWFC 03,W
25DE:  MOVLB  1
25E0:  MOVWF  xE4
....................    } 
25E2:  BRA    2608
25E4:  MOVLB  2
....................    else if(read_eeprom(0)==0)// pazartesi1 günü kapali ise 
25E6:  MOVFF  FF2,24E
25EA:  BCF    FF2.7
25EC:  CLRF   FA9
25EE:  BCF    FA6.6
25F0:  BCF    FA6.7
25F2:  BSF    FA6.0
25F4:  MOVF   FA8,W
25F6:  BTFSC  x4E.7
25F8:  BSF    FF2.7
25FA:  XORLW  00
25FC:  BNZ   260A
....................    { 
....................       ptesitoplamdk=0; 
25FE:  MOVLB  1
2600:  CLRF   xE4
2602:  CLRF   xE3
2604:  CLRF   xE2
2606:  CLRF   xE1
2608:  MOVLB  2
....................    } 
....................      //******************************* PAZARTESI 2 GUNU TOPLAM DK*********************************** 
....................    
....................    if(read_eeprom(1)==1)// pazartesi2 günü acik ise 
260A:  MOVFF  FF2,24E
260E:  BCF    FF2.7
2610:  MOVLW  01
2612:  MOVWF  FA9
2614:  BCF    FA6.6
2616:  BCF    FA6.7
2618:  BSF    FA6.0
261A:  MOVF   FA8,W
261C:  BTFSC  x4E.7
261E:  BSF    FF2.7
2620:  SUBLW  01
2622:  BNZ   26FE
....................    { 
....................       ptesisaat2=read_eeprom(20)-read_eeprom(18);// 0 dan kucuk degilse islem aynen uygulanir 
2624:  MOVFF  FF2,24E
2628:  BCF    FF2.7
262A:  MOVLW  14
262C:  MOVWF  FA9
262E:  BCF    FA6.6
2630:  BCF    FA6.7
2632:  BSF    FA6.0
2634:  MOVF   FA8,W
2636:  BTFSC  x4E.7
2638:  BSF    FF2.7
263A:  MOVWF  x4F
263C:  MOVFF  FF2,250
2640:  BCF    FF2.7
2642:  MOVLW  12
2644:  MOVWF  FA9
2646:  BCF    FA6.6
2648:  BCF    FA6.7
264A:  BSF    FA6.0
264C:  MOVF   FA8,W
264E:  BTFSC  x50.7
2650:  BSF    FF2.7
2652:  SUBWF  x4F,W
2654:  MOVWF  00
2656:  CLRF   01
2658:  CLRF   02
265A:  CLRF   03
265C:  MOVFF  03,1A4
2660:  MOVFF  02,1A3
2664:  MOVFF  01,1A2
2668:  MOVFF  00,1A1
....................       ptesidk2=read_eeprom(21)-read_eeprom(19);// 0 dan kucuk degilse islem aynen uygulanir 
266C:  MOVFF  FF2,24E
2670:  BCF    FF2.7
2672:  MOVLW  15
2674:  MOVWF  FA9
2676:  BCF    FA6.6
2678:  BCF    FA6.7
267A:  BSF    FA6.0
267C:  MOVF   FA8,W
267E:  BTFSC  x4E.7
2680:  BSF    FF2.7
2682:  MOVWF  x4F
2684:  MOVFF  FF2,250
2688:  BCF    FF2.7
268A:  MOVLW  13
268C:  MOVWF  FA9
268E:  BCF    FA6.6
2690:  BCF    FA6.7
2692:  BSF    FA6.0
2694:  MOVF   FA8,W
2696:  BTFSC  x50.7
2698:  BSF    FF2.7
269A:  SUBWF  x4F,W
269C:  MOVWF  00
269E:  CLRF   01
26A0:  CLRF   02
26A2:  CLRF   03
26A4:  MOVFF  03,1A8
26A8:  MOVFF  02,1A7
26AC:  MOVFF  01,1A6
26B0:  MOVFF  00,1A5
....................       ptesitoplamdk2=(60*ptesisaat2)+(ptesidk2); 
26B4:  CLRF   x51
26B6:  CLRF   x50
26B8:  CLRF   x4F
26BA:  MOVLW  3C
26BC:  MOVWF  x4E
26BE:  MOVFF  1A4,255
26C2:  MOVFF  1A3,254
26C6:  MOVFF  1A2,253
26CA:  MOVFF  1A1,252
26CE:  MOVLB  0
26D0:  CALL   1958
26D4:  MOVLB  1
26D6:  MOVF   xA5,W
26D8:  MOVLB  2
26DA:  ADDWF  00,W
26DC:  MOVLB  1
26DE:  MOVWF  xFD
26E0:  MOVF   xA6,W
26E2:  MOVLB  2
26E4:  ADDWFC 01,W
26E6:  MOVLB  1
26E8:  MOVWF  xFE
26EA:  MOVF   xA7,W
26EC:  MOVLB  2
26EE:  ADDWFC 02,W
26F0:  MOVLB  1
26F2:  MOVWF  xFF
26F4:  MOVF   xA8,W
26F6:  MOVLB  2
26F8:  ADDWFC 03,W
26FA:  MOVWF  x00
....................    } 
26FC:  BRA    2724
....................    else if(read_eeprom(1)==0)// pazartesi2 günü kapali ise 
26FE:  MOVFF  FF2,24E
2702:  BCF    FF2.7
2704:  MOVLW  01
2706:  MOVWF  FA9
2708:  BCF    FA6.6
270A:  BCF    FA6.7
270C:  BSF    FA6.0
270E:  MOVF   FA8,W
2710:  BTFSC  x4E.7
2712:  BSF    FF2.7
2714:  XORLW  00
2716:  BNZ   2724
....................    { 
....................       ptesitoplamdk2=0; 
2718:  CLRF   x00
271A:  MOVLB  1
271C:  CLRF   xFF
271E:  CLRF   xFE
2720:  CLRF   xFD
2722:  MOVLB  2
....................    } 
....................     
....................    //********************************** SALI 1 GUNU TOPLAM DK*************************************** 
....................    if(read_eeprom(2)==1)// sali1 günü acik ise 
2724:  MOVFF  FF2,24E
2728:  BCF    FF2.7
272A:  MOVLW  02
272C:  MOVWF  FA9
272E:  BCF    FA6.6
2730:  BCF    FA6.7
2732:  BSF    FA6.0
2734:  MOVF   FA8,W
2736:  BTFSC  x4E.7
2738:  BSF    FF2.7
273A:  SUBLW  01
273C:  BNZ   281C
....................    { 
....................       salisaat=read_eeprom(24)-read_eeprom(22); 
273E:  MOVFF  FF2,24E
2742:  BCF    FF2.7
2744:  MOVLW  18
2746:  MOVWF  FA9
2748:  BCF    FA6.6
274A:  BCF    FA6.7
274C:  BSF    FA6.0
274E:  MOVF   FA8,W
2750:  BTFSC  x4E.7
2752:  BSF    FF2.7
2754:  MOVWF  x4F
2756:  MOVFF  FF2,250
275A:  BCF    FF2.7
275C:  MOVLW  16
275E:  MOVWF  FA9
2760:  BCF    FA6.6
2762:  BCF    FA6.7
2764:  BSF    FA6.0
2766:  MOVF   FA8,W
2768:  BTFSC  x50.7
276A:  BSF    FF2.7
276C:  SUBWF  x4F,W
276E:  MOVWF  00
2770:  CLRF   01
2772:  CLRF   02
2774:  CLRF   03
2776:  MOVFF  03,174
277A:  MOVFF  02,173
277E:  MOVFF  01,172
2782:  MOVFF  00,171
....................       salidk=read_eeprom(25)-read_eeprom(23); 
2786:  MOVFF  FF2,24E
278A:  BCF    FF2.7
278C:  MOVLW  19
278E:  MOVWF  FA9
2790:  BCF    FA6.6
2792:  BCF    FA6.7
2794:  BSF    FA6.0
2796:  MOVF   FA8,W
2798:  BTFSC  x4E.7
279A:  BSF    FF2.7
279C:  MOVWF  x4F
279E:  MOVFF  FF2,250
27A2:  BCF    FF2.7
27A4:  MOVLW  17
27A6:  MOVWF  FA9
27A8:  BCF    FA6.6
27AA:  BCF    FA6.7
27AC:  BSF    FA6.0
27AE:  MOVF   FA8,W
27B0:  BTFSC  x50.7
27B2:  BSF    FF2.7
27B4:  SUBWF  x4F,W
27B6:  MOVWF  00
27B8:  CLRF   01
27BA:  CLRF   02
27BC:  CLRF   03
27BE:  MOVFF  03,178
27C2:  MOVFF  02,177
27C6:  MOVFF  01,176
27CA:  MOVFF  00,175
....................       salitoplamdk=(60*salisaat)+(salidk); 
27CE:  CLRF   x51
27D0:  CLRF   x50
27D2:  CLRF   x4F
27D4:  MOVLW  3C
27D6:  MOVWF  x4E
27D8:  MOVFF  174,255
27DC:  MOVFF  173,254
27E0:  MOVFF  172,253
27E4:  MOVFF  171,252
27E8:  MOVLB  0
27EA:  CALL   1958
27EE:  MOVLB  1
27F0:  MOVF   x75,W
27F2:  MOVLB  2
27F4:  ADDWF  00,W
27F6:  MOVLB  1
27F8:  MOVWF  xE5
27FA:  MOVF   x76,W
27FC:  MOVLB  2
27FE:  ADDWFC 01,W
2800:  MOVLB  1
2802:  MOVWF  xE6
2804:  MOVF   x77,W
2806:  MOVLB  2
2808:  ADDWFC 02,W
280A:  MOVLB  1
280C:  MOVWF  xE7
280E:  MOVF   x78,W
2810:  MOVLB  2
2812:  ADDWFC 03,W
2814:  MOVLB  1
2816:  MOVWF  xE8
....................    } 
2818:  BRA    2840
281A:  MOVLB  2
....................    else if(read_eeprom(2)==0)// sali1 günü kapali ise 
281C:  MOVFF  FF2,24E
2820:  BCF    FF2.7
2822:  MOVLW  02
2824:  MOVWF  FA9
2826:  BCF    FA6.6
2828:  BCF    FA6.7
282A:  BSF    FA6.0
282C:  MOVF   FA8,W
282E:  BTFSC  x4E.7
2830:  BSF    FF2.7
2832:  XORLW  00
2834:  BNZ   2842
....................    { 
....................       salitoplamdk=0;   
2836:  MOVLB  1
2838:  CLRF   xE8
283A:  CLRF   xE7
283C:  CLRF   xE6
283E:  CLRF   xE5
2840:  MOVLB  2
....................    } 
....................     
....................     
....................     //********************************** SALI 2 GUNU TOPLAM DK************************************ 
....................    if(read_eeprom(3)==1)// sali2 günü acik ise 
2842:  MOVFF  FF2,24E
2846:  BCF    FF2.7
2848:  MOVLW  03
284A:  MOVWF  FA9
284C:  BCF    FA6.6
284E:  BCF    FA6.7
2850:  BSF    FA6.0
2852:  MOVF   FA8,W
2854:  BTFSC  x4E.7
2856:  BSF    FF2.7
2858:  SUBLW  01
285A:  BNZ   2936
....................    { 
....................       salisaat2=read_eeprom(28)-read_eeprom(26); 
285C:  MOVFF  FF2,24E
2860:  BCF    FF2.7
2862:  MOVLW  1C
2864:  MOVWF  FA9
2866:  BCF    FA6.6
2868:  BCF    FA6.7
286A:  BSF    FA6.0
286C:  MOVF   FA8,W
286E:  BTFSC  x4E.7
2870:  BSF    FF2.7
2872:  MOVWF  x4F
2874:  MOVFF  FF2,250
2878:  BCF    FF2.7
287A:  MOVLW  1A
287C:  MOVWF  FA9
287E:  BCF    FA6.6
2880:  BCF    FA6.7
2882:  BSF    FA6.0
2884:  MOVF   FA8,W
2886:  BTFSC  x50.7
2888:  BSF    FF2.7
288A:  SUBWF  x4F,W
288C:  MOVWF  00
288E:  CLRF   01
2890:  CLRF   02
2892:  CLRF   03
2894:  MOVFF  03,1AC
2898:  MOVFF  02,1AB
289C:  MOVFF  01,1AA
28A0:  MOVFF  00,1A9
....................       salidk2=read_eeprom(29)-read_eeprom(27);      
28A4:  MOVFF  FF2,24E
28A8:  BCF    FF2.7
28AA:  MOVLW  1D
28AC:  MOVWF  FA9
28AE:  BCF    FA6.6
28B0:  BCF    FA6.7
28B2:  BSF    FA6.0
28B4:  MOVF   FA8,W
28B6:  BTFSC  x4E.7
28B8:  BSF    FF2.7
28BA:  MOVWF  x4F
28BC:  MOVFF  FF2,250
28C0:  BCF    FF2.7
28C2:  MOVLW  1B
28C4:  MOVWF  FA9
28C6:  BCF    FA6.6
28C8:  BCF    FA6.7
28CA:  BSF    FA6.0
28CC:  MOVF   FA8,W
28CE:  BTFSC  x50.7
28D0:  BSF    FF2.7
28D2:  SUBWF  x4F,W
28D4:  MOVWF  00
28D6:  CLRF   01
28D8:  CLRF   02
28DA:  CLRF   03
28DC:  MOVFF  03,1B0
28E0:  MOVFF  02,1AF
28E4:  MOVFF  01,1AE
28E8:  MOVFF  00,1AD
....................       salitoplamdk2=(60*salisaat2)+(salidk2); 
28EC:  CLRF   x51
28EE:  CLRF   x50
28F0:  CLRF   x4F
28F2:  MOVLW  3C
28F4:  MOVWF  x4E
28F6:  MOVFF  1AC,255
28FA:  MOVFF  1AB,254
28FE:  MOVFF  1AA,253
2902:  MOVFF  1A9,252
2906:  MOVLB  0
2908:  CALL   1958
290C:  MOVLB  1
290E:  MOVF   xAD,W
2910:  MOVLB  2
2912:  ADDWF  00,W
2914:  MOVWF  x01
2916:  MOVLB  1
2918:  MOVF   xAE,W
291A:  MOVLB  2
291C:  ADDWFC 01,W
291E:  MOVWF  x02
2920:  MOVLB  1
2922:  MOVF   xAF,W
2924:  MOVLB  2
2926:  ADDWFC 02,W
2928:  MOVWF  x03
292A:  MOVLB  1
292C:  MOVF   xB0,W
292E:  MOVLB  2
2930:  ADDWFC 03,W
2932:  MOVWF  x04
....................    } 
2934:  BRA    2958
....................    else if(read_eeprom(3)==0)// sali2 günü kapali ise 
2936:  MOVFF  FF2,24E
293A:  BCF    FF2.7
293C:  MOVLW  03
293E:  MOVWF  FA9
2940:  BCF    FA6.6
2942:  BCF    FA6.7
2944:  BSF    FA6.0
2946:  MOVF   FA8,W
2948:  BTFSC  x4E.7
294A:  BSF    FF2.7
294C:  XORLW  00
294E:  BNZ   2958
....................    { 
....................       salitoplamdk2=0; 
2950:  CLRF   x04
2952:  CLRF   x03
2954:  CLRF   x02
2956:  CLRF   x01
....................    } 
....................     
....................   
....................  //*********************************CARSAMBA 1 GUNU TOPLAM DK************************************* 
....................    if(read_eeprom(4)==1)// carsamba1 günü acik ise 
2958:  MOVFF  FF2,24E
295C:  BCF    FF2.7
295E:  MOVLW  04
2960:  MOVWF  FA9
2962:  BCF    FA6.6
2964:  BCF    FA6.7
2966:  BSF    FA6.0
2968:  MOVF   FA8,W
296A:  BTFSC  x4E.7
296C:  BSF    FF2.7
296E:  SUBLW  01
2970:  BNZ   2A50
....................    { 
....................       carsaat=read_eeprom(32)-read_eeprom(30); 
2972:  MOVFF  FF2,24E
2976:  BCF    FF2.7
2978:  MOVLW  20
297A:  MOVWF  FA9
297C:  BCF    FA6.6
297E:  BCF    FA6.7
2980:  BSF    FA6.0
2982:  MOVF   FA8,W
2984:  BTFSC  x4E.7
2986:  BSF    FF2.7
2988:  MOVWF  x4F
298A:  MOVFF  FF2,250
298E:  BCF    FF2.7
2990:  MOVLW  1E
2992:  MOVWF  FA9
2994:  BCF    FA6.6
2996:  BCF    FA6.7
2998:  BSF    FA6.0
299A:  MOVF   FA8,W
299C:  BTFSC  x50.7
299E:  BSF    FF2.7
29A0:  SUBWF  x4F,W
29A2:  MOVWF  00
29A4:  CLRF   01
29A6:  CLRF   02
29A8:  CLRF   03
29AA:  MOVFF  03,17C
29AE:  MOVFF  02,17B
29B2:  MOVFF  01,17A
29B6:  MOVFF  00,179
....................       cardk=read_eeprom(33)-read_eeprom(31);    
29BA:  MOVFF  FF2,24E
29BE:  BCF    FF2.7
29C0:  MOVLW  21
29C2:  MOVWF  FA9
29C4:  BCF    FA6.6
29C6:  BCF    FA6.7
29C8:  BSF    FA6.0
29CA:  MOVF   FA8,W
29CC:  BTFSC  x4E.7
29CE:  BSF    FF2.7
29D0:  MOVWF  x4F
29D2:  MOVFF  FF2,250
29D6:  BCF    FF2.7
29D8:  MOVLW  1F
29DA:  MOVWF  FA9
29DC:  BCF    FA6.6
29DE:  BCF    FA6.7
29E0:  BSF    FA6.0
29E2:  MOVF   FA8,W
29E4:  BTFSC  x50.7
29E6:  BSF    FF2.7
29E8:  SUBWF  x4F,W
29EA:  MOVWF  00
29EC:  CLRF   01
29EE:  CLRF   02
29F0:  CLRF   03
29F2:  MOVFF  03,180
29F6:  MOVFF  02,17F
29FA:  MOVFF  01,17E
29FE:  MOVFF  00,17D
....................       cartoplamdk=(60*carsaat)+(cardk); 
2A02:  CLRF   x51
2A04:  CLRF   x50
2A06:  CLRF   x4F
2A08:  MOVLW  3C
2A0A:  MOVWF  x4E
2A0C:  MOVFF  17C,255
2A10:  MOVFF  17B,254
2A14:  MOVFF  17A,253
2A18:  MOVFF  179,252
2A1C:  MOVLB  0
2A1E:  CALL   1958
2A22:  MOVLB  1
2A24:  MOVF   x7D,W
2A26:  MOVLB  2
2A28:  ADDWF  00,W
2A2A:  MOVLB  1
2A2C:  MOVWF  xE9
2A2E:  MOVF   x7E,W
2A30:  MOVLB  2
2A32:  ADDWFC 01,W
2A34:  MOVLB  1
2A36:  MOVWF  xEA
2A38:  MOVF   x7F,W
2A3A:  MOVLB  2
2A3C:  ADDWFC 02,W
2A3E:  MOVLB  1
2A40:  MOVWF  xEB
2A42:  MOVF   x80,W
2A44:  MOVLB  2
2A46:  ADDWFC 03,W
2A48:  MOVLB  1
2A4A:  MOVWF  xEC
....................    } 
2A4C:  BRA    2A74
2A4E:  MOVLB  2
....................    else if(read_eeprom(4)==0)// carsamba1 günü kapali ise 
2A50:  MOVFF  FF2,24E
2A54:  BCF    FF2.7
2A56:  MOVLW  04
2A58:  MOVWF  FA9
2A5A:  BCF    FA6.6
2A5C:  BCF    FA6.7
2A5E:  BSF    FA6.0
2A60:  MOVF   FA8,W
2A62:  BTFSC  x4E.7
2A64:  BSF    FF2.7
2A66:  XORLW  00
2A68:  BNZ   2A76
....................    { 
....................       cartoplamdk=0; 
2A6A:  MOVLB  1
2A6C:  CLRF   xEC
2A6E:  CLRF   xEB
2A70:  CLRF   xEA
2A72:  CLRF   xE9
2A74:  MOVLB  2
....................    } 
....................     
....................    //*********************************CARSAMBA 2 GUNU TOPLAM DK*********************************** 
....................    if(read_eeprom(5)==1)// carsamba2 günü acik ise 
2A76:  MOVFF  FF2,24E
2A7A:  BCF    FF2.7
2A7C:  MOVLW  05
2A7E:  MOVWF  FA9
2A80:  BCF    FA6.6
2A82:  BCF    FA6.7
2A84:  BSF    FA6.0
2A86:  MOVF   FA8,W
2A88:  BTFSC  x4E.7
2A8A:  BSF    FF2.7
2A8C:  SUBLW  01
2A8E:  BNZ   2B6A
....................    { 
....................       carsaat2=read_eeprom(36)-read_eeprom(34); 
2A90:  MOVFF  FF2,24E
2A94:  BCF    FF2.7
2A96:  MOVLW  24
2A98:  MOVWF  FA9
2A9A:  BCF    FA6.6
2A9C:  BCF    FA6.7
2A9E:  BSF    FA6.0
2AA0:  MOVF   FA8,W
2AA2:  BTFSC  x4E.7
2AA4:  BSF    FF2.7
2AA6:  MOVWF  x4F
2AA8:  MOVFF  FF2,250
2AAC:  BCF    FF2.7
2AAE:  MOVLW  22
2AB0:  MOVWF  FA9
2AB2:  BCF    FA6.6
2AB4:  BCF    FA6.7
2AB6:  BSF    FA6.0
2AB8:  MOVF   FA8,W
2ABA:  BTFSC  x50.7
2ABC:  BSF    FF2.7
2ABE:  SUBWF  x4F,W
2AC0:  MOVWF  00
2AC2:  CLRF   01
2AC4:  CLRF   02
2AC6:  CLRF   03
2AC8:  MOVFF  03,1B4
2ACC:  MOVFF  02,1B3
2AD0:  MOVFF  01,1B2
2AD4:  MOVFF  00,1B1
....................       cardk2=read_eeprom(37)-read_eeprom(35); 
2AD8:  MOVFF  FF2,24E
2ADC:  BCF    FF2.7
2ADE:  MOVLW  25
2AE0:  MOVWF  FA9
2AE2:  BCF    FA6.6
2AE4:  BCF    FA6.7
2AE6:  BSF    FA6.0
2AE8:  MOVF   FA8,W
2AEA:  BTFSC  x4E.7
2AEC:  BSF    FF2.7
2AEE:  MOVWF  x4F
2AF0:  MOVFF  FF2,250
2AF4:  BCF    FF2.7
2AF6:  MOVLW  23
2AF8:  MOVWF  FA9
2AFA:  BCF    FA6.6
2AFC:  BCF    FA6.7
2AFE:  BSF    FA6.0
2B00:  MOVF   FA8,W
2B02:  BTFSC  x50.7
2B04:  BSF    FF2.7
2B06:  SUBWF  x4F,W
2B08:  MOVWF  00
2B0A:  CLRF   01
2B0C:  CLRF   02
2B0E:  CLRF   03
2B10:  MOVFF  03,1B8
2B14:  MOVFF  02,1B7
2B18:  MOVFF  01,1B6
2B1C:  MOVFF  00,1B5
....................       cartoplamdk2=(60*carsaat2)+(cardk2); 
2B20:  CLRF   x51
2B22:  CLRF   x50
2B24:  CLRF   x4F
2B26:  MOVLW  3C
2B28:  MOVWF  x4E
2B2A:  MOVFF  1B4,255
2B2E:  MOVFF  1B3,254
2B32:  MOVFF  1B2,253
2B36:  MOVFF  1B1,252
2B3A:  MOVLB  0
2B3C:  CALL   1958
2B40:  MOVLB  1
2B42:  MOVF   xB5,W
2B44:  MOVLB  2
2B46:  ADDWF  00,W
2B48:  MOVWF  x05
2B4A:  MOVLB  1
2B4C:  MOVF   xB6,W
2B4E:  MOVLB  2
2B50:  ADDWFC 01,W
2B52:  MOVWF  x06
2B54:  MOVLB  1
2B56:  MOVF   xB7,W
2B58:  MOVLB  2
2B5A:  ADDWFC 02,W
2B5C:  MOVWF  x07
2B5E:  MOVLB  1
2B60:  MOVF   xB8,W
2B62:  MOVLB  2
2B64:  ADDWFC 03,W
2B66:  MOVWF  x08
....................    } 
2B68:  BRA    2B8C
....................    else if(read_eeprom(5)==0)// carsamba2 günü kapali ise 
2B6A:  MOVFF  FF2,24E
2B6E:  BCF    FF2.7
2B70:  MOVLW  05
2B72:  MOVWF  FA9
2B74:  BCF    FA6.6
2B76:  BCF    FA6.7
2B78:  BSF    FA6.0
2B7A:  MOVF   FA8,W
2B7C:  BTFSC  x4E.7
2B7E:  BSF    FF2.7
2B80:  XORLW  00
2B82:  BNZ   2B8C
....................    { 
....................       cartoplamdk2=0; 
2B84:  CLRF   x08
2B86:  CLRF   x07
2B88:  CLRF   x06
2B8A:  CLRF   x05
....................    } 
....................     
....................    //*****************************PERSEMBE 1 GUNU TOPLAM DK**************************************** 
....................    if(read_eeprom(6)==1)// persembe1 günü acik ise 
2B8C:  MOVFF  FF2,24E
2B90:  BCF    FF2.7
2B92:  MOVLW  06
2B94:  MOVWF  FA9
2B96:  BCF    FA6.6
2B98:  BCF    FA6.7
2B9A:  BSF    FA6.0
2B9C:  MOVF   FA8,W
2B9E:  BTFSC  x4E.7
2BA0:  BSF    FF2.7
2BA2:  SUBLW  01
2BA4:  BNZ   2C84
....................    { 
....................       persaat=read_eeprom(40)-read_eeprom(38); 
2BA6:  MOVFF  FF2,24E
2BAA:  BCF    FF2.7
2BAC:  MOVLW  28
2BAE:  MOVWF  FA9
2BB0:  BCF    FA6.6
2BB2:  BCF    FA6.7
2BB4:  BSF    FA6.0
2BB6:  MOVF   FA8,W
2BB8:  BTFSC  x4E.7
2BBA:  BSF    FF2.7
2BBC:  MOVWF  x4F
2BBE:  MOVFF  FF2,250
2BC2:  BCF    FF2.7
2BC4:  MOVLW  26
2BC6:  MOVWF  FA9
2BC8:  BCF    FA6.6
2BCA:  BCF    FA6.7
2BCC:  BSF    FA6.0
2BCE:  MOVF   FA8,W
2BD0:  BTFSC  x50.7
2BD2:  BSF    FF2.7
2BD4:  SUBWF  x4F,W
2BD6:  MOVWF  00
2BD8:  CLRF   01
2BDA:  CLRF   02
2BDC:  CLRF   03
2BDE:  MOVFF  03,184
2BE2:  MOVFF  02,183
2BE6:  MOVFF  01,182
2BEA:  MOVFF  00,181
....................       perdk=read_eeprom(41)-read_eeprom(39);   
2BEE:  MOVFF  FF2,24E
2BF2:  BCF    FF2.7
2BF4:  MOVLW  29
2BF6:  MOVWF  FA9
2BF8:  BCF    FA6.6
2BFA:  BCF    FA6.7
2BFC:  BSF    FA6.0
2BFE:  MOVF   FA8,W
2C00:  BTFSC  x4E.7
2C02:  BSF    FF2.7
2C04:  MOVWF  x4F
2C06:  MOVFF  FF2,250
2C0A:  BCF    FF2.7
2C0C:  MOVLW  27
2C0E:  MOVWF  FA9
2C10:  BCF    FA6.6
2C12:  BCF    FA6.7
2C14:  BSF    FA6.0
2C16:  MOVF   FA8,W
2C18:  BTFSC  x50.7
2C1A:  BSF    FF2.7
2C1C:  SUBWF  x4F,W
2C1E:  MOVWF  00
2C20:  CLRF   01
2C22:  CLRF   02
2C24:  CLRF   03
2C26:  MOVFF  03,188
2C2A:  MOVFF  02,187
2C2E:  MOVFF  01,186
2C32:  MOVFF  00,185
....................       pertoplamdk=(60*persaat)+(perdk); 
2C36:  CLRF   x51
2C38:  CLRF   x50
2C3A:  CLRF   x4F
2C3C:  MOVLW  3C
2C3E:  MOVWF  x4E
2C40:  MOVFF  184,255
2C44:  MOVFF  183,254
2C48:  MOVFF  182,253
2C4C:  MOVFF  181,252
2C50:  MOVLB  0
2C52:  CALL   1958
2C56:  MOVLB  1
2C58:  MOVF   x85,W
2C5A:  MOVLB  2
2C5C:  ADDWF  00,W
2C5E:  MOVLB  1
2C60:  MOVWF  xED
2C62:  MOVF   x86,W
2C64:  MOVLB  2
2C66:  ADDWFC 01,W
2C68:  MOVLB  1
2C6A:  MOVWF  xEE
2C6C:  MOVF   x87,W
2C6E:  MOVLB  2
2C70:  ADDWFC 02,W
2C72:  MOVLB  1
2C74:  MOVWF  xEF
2C76:  MOVF   x88,W
2C78:  MOVLB  2
2C7A:  ADDWFC 03,W
2C7C:  MOVLB  1
2C7E:  MOVWF  xF0
....................    } 
2C80:  BRA    2CA8
2C82:  MOVLB  2
....................    else if(read_eeprom(6)==0)// persembe1 günü kapali ise 
2C84:  MOVFF  FF2,24E
2C88:  BCF    FF2.7
2C8A:  MOVLW  06
2C8C:  MOVWF  FA9
2C8E:  BCF    FA6.6
2C90:  BCF    FA6.7
2C92:  BSF    FA6.0
2C94:  MOVF   FA8,W
2C96:  BTFSC  x4E.7
2C98:  BSF    FF2.7
2C9A:  XORLW  00
2C9C:  BNZ   2CAA
....................    { 
....................       pertoplamdk=0; 
2C9E:  MOVLB  1
2CA0:  CLRF   xF0
2CA2:  CLRF   xEF
2CA4:  CLRF   xEE
2CA6:  CLRF   xED
2CA8:  MOVLB  2
....................    } 
....................     
....................     
....................    //*****************************PERSEMBE 2 GUNU TOPLAM DK**************************************** 
....................    if(read_eeprom(7)==1)// persembe2 günü acik ise 
2CAA:  MOVFF  FF2,24E
2CAE:  BCF    FF2.7
2CB0:  MOVLW  07
2CB2:  MOVWF  FA9
2CB4:  BCF    FA6.6
2CB6:  BCF    FA6.7
2CB8:  BSF    FA6.0
2CBA:  MOVF   FA8,W
2CBC:  BTFSC  x4E.7
2CBE:  BSF    FF2.7
2CC0:  SUBLW  01
2CC2:  BNZ   2D9E
....................    { 
....................       persaat2=read_eeprom(44)-read_eeprom(42); 
2CC4:  MOVFF  FF2,24E
2CC8:  BCF    FF2.7
2CCA:  MOVLW  2C
2CCC:  MOVWF  FA9
2CCE:  BCF    FA6.6
2CD0:  BCF    FA6.7
2CD2:  BSF    FA6.0
2CD4:  MOVF   FA8,W
2CD6:  BTFSC  x4E.7
2CD8:  BSF    FF2.7
2CDA:  MOVWF  x4F
2CDC:  MOVFF  FF2,250
2CE0:  BCF    FF2.7
2CE2:  MOVLW  2A
2CE4:  MOVWF  FA9
2CE6:  BCF    FA6.6
2CE8:  BCF    FA6.7
2CEA:  BSF    FA6.0
2CEC:  MOVF   FA8,W
2CEE:  BTFSC  x50.7
2CF0:  BSF    FF2.7
2CF2:  SUBWF  x4F,W
2CF4:  MOVWF  00
2CF6:  CLRF   01
2CF8:  CLRF   02
2CFA:  CLRF   03
2CFC:  MOVFF  03,1BC
2D00:  MOVFF  02,1BB
2D04:  MOVFF  01,1BA
2D08:  MOVFF  00,1B9
....................       perdk2=read_eeprom(45)-read_eeprom(43); 
2D0C:  MOVFF  FF2,24E
2D10:  BCF    FF2.7
2D12:  MOVLW  2D
2D14:  MOVWF  FA9
2D16:  BCF    FA6.6
2D18:  BCF    FA6.7
2D1A:  BSF    FA6.0
2D1C:  MOVF   FA8,W
2D1E:  BTFSC  x4E.7
2D20:  BSF    FF2.7
2D22:  MOVWF  x4F
2D24:  MOVFF  FF2,250
2D28:  BCF    FF2.7
2D2A:  MOVLW  2B
2D2C:  MOVWF  FA9
2D2E:  BCF    FA6.6
2D30:  BCF    FA6.7
2D32:  BSF    FA6.0
2D34:  MOVF   FA8,W
2D36:  BTFSC  x50.7
2D38:  BSF    FF2.7
2D3A:  SUBWF  x4F,W
2D3C:  MOVWF  00
2D3E:  CLRF   01
2D40:  CLRF   02
2D42:  CLRF   03
2D44:  MOVFF  03,1C0
2D48:  MOVFF  02,1BF
2D4C:  MOVFF  01,1BE
2D50:  MOVFF  00,1BD
....................       pertoplamdk2=(60*persaat2)+(perdk2); 
2D54:  CLRF   x51
2D56:  CLRF   x50
2D58:  CLRF   x4F
2D5A:  MOVLW  3C
2D5C:  MOVWF  x4E
2D5E:  MOVFF  1BC,255
2D62:  MOVFF  1BB,254
2D66:  MOVFF  1BA,253
2D6A:  MOVFF  1B9,252
2D6E:  MOVLB  0
2D70:  CALL   1958
2D74:  MOVLB  1
2D76:  MOVF   xBD,W
2D78:  MOVLB  2
2D7A:  ADDWF  00,W
2D7C:  MOVWF  x09
2D7E:  MOVLB  1
2D80:  MOVF   xBE,W
2D82:  MOVLB  2
2D84:  ADDWFC 01,W
2D86:  MOVWF  x0A
2D88:  MOVLB  1
2D8A:  MOVF   xBF,W
2D8C:  MOVLB  2
2D8E:  ADDWFC 02,W
2D90:  MOVWF  x0B
2D92:  MOVLB  1
2D94:  MOVF   xC0,W
2D96:  MOVLB  2
2D98:  ADDWFC 03,W
2D9A:  MOVWF  x0C
....................    } 
2D9C:  BRA    2DC0
....................    else if(read_eeprom(7)==0)// persembe2 günü kapali ise 
2D9E:  MOVFF  FF2,24E
2DA2:  BCF    FF2.7
2DA4:  MOVLW  07
2DA6:  MOVWF  FA9
2DA8:  BCF    FA6.6
2DAA:  BCF    FA6.7
2DAC:  BSF    FA6.0
2DAE:  MOVF   FA8,W
2DB0:  BTFSC  x4E.7
2DB2:  BSF    FF2.7
2DB4:  XORLW  00
2DB6:  BNZ   2DC0
....................    { 
....................       pertoplamdk2=0; 
2DB8:  CLRF   x0C
2DBA:  CLRF   x0B
2DBC:  CLRF   x0A
2DBE:  CLRF   x09
....................    } 
....................     
....................  
....................  //********************************* CUMA 1 GUNU TOPLAM DK****************************************** 
....................    if(read_eeprom(8)==1)// cuma günü acik ise 
2DC0:  MOVFF  FF2,24E
2DC4:  BCF    FF2.7
2DC6:  MOVLW  08
2DC8:  MOVWF  FA9
2DCA:  BCF    FA6.6
2DCC:  BCF    FA6.7
2DCE:  BSF    FA6.0
2DD0:  MOVF   FA8,W
2DD2:  BTFSC  x4E.7
2DD4:  BSF    FF2.7
2DD6:  SUBLW  01
2DD8:  BNZ   2EB8
....................    { 
....................       cumasaat=read_eeprom(48)-read_eeprom(46); 
2DDA:  MOVFF  FF2,24E
2DDE:  BCF    FF2.7
2DE0:  MOVLW  30
2DE2:  MOVWF  FA9
2DE4:  BCF    FA6.6
2DE6:  BCF    FA6.7
2DE8:  BSF    FA6.0
2DEA:  MOVF   FA8,W
2DEC:  BTFSC  x4E.7
2DEE:  BSF    FF2.7
2DF0:  MOVWF  x4F
2DF2:  MOVFF  FF2,250
2DF6:  BCF    FF2.7
2DF8:  MOVLW  2E
2DFA:  MOVWF  FA9
2DFC:  BCF    FA6.6
2DFE:  BCF    FA6.7
2E00:  BSF    FA6.0
2E02:  MOVF   FA8,W
2E04:  BTFSC  x50.7
2E06:  BSF    FF2.7
2E08:  SUBWF  x4F,W
2E0A:  MOVWF  00
2E0C:  CLRF   01
2E0E:  CLRF   02
2E10:  CLRF   03
2E12:  MOVFF  03,18C
2E16:  MOVFF  02,18B
2E1A:  MOVFF  01,18A
2E1E:  MOVFF  00,189
....................       cumadk=read_eeprom(49)-read_eeprom(47); 
2E22:  MOVFF  FF2,24E
2E26:  BCF    FF2.7
2E28:  MOVLW  31
2E2A:  MOVWF  FA9
2E2C:  BCF    FA6.6
2E2E:  BCF    FA6.7
2E30:  BSF    FA6.0
2E32:  MOVF   FA8,W
2E34:  BTFSC  x4E.7
2E36:  BSF    FF2.7
2E38:  MOVWF  x4F
2E3A:  MOVFF  FF2,250
2E3E:  BCF    FF2.7
2E40:  MOVLW  2F
2E42:  MOVWF  FA9
2E44:  BCF    FA6.6
2E46:  BCF    FA6.7
2E48:  BSF    FA6.0
2E4A:  MOVF   FA8,W
2E4C:  BTFSC  x50.7
2E4E:  BSF    FF2.7
2E50:  SUBWF  x4F,W
2E52:  MOVWF  00
2E54:  CLRF   01
2E56:  CLRF   02
2E58:  CLRF   03
2E5A:  MOVFF  03,190
2E5E:  MOVFF  02,18F
2E62:  MOVFF  01,18E
2E66:  MOVFF  00,18D
....................       cumatoplamdk=(60*cumasaat)+(cumadk); 
2E6A:  CLRF   x51
2E6C:  CLRF   x50
2E6E:  CLRF   x4F
2E70:  MOVLW  3C
2E72:  MOVWF  x4E
2E74:  MOVFF  18C,255
2E78:  MOVFF  18B,254
2E7C:  MOVFF  18A,253
2E80:  MOVFF  189,252
2E84:  MOVLB  0
2E86:  CALL   1958
2E8A:  MOVLB  1
2E8C:  MOVF   x8D,W
2E8E:  MOVLB  2
2E90:  ADDWF  00,W
2E92:  MOVLB  1
2E94:  MOVWF  xF1
2E96:  MOVF   x8E,W
2E98:  MOVLB  2
2E9A:  ADDWFC 01,W
2E9C:  MOVLB  1
2E9E:  MOVWF  xF2
2EA0:  MOVF   x8F,W
2EA2:  MOVLB  2
2EA4:  ADDWFC 02,W
2EA6:  MOVLB  1
2EA8:  MOVWF  xF3
2EAA:  MOVF   x90,W
2EAC:  MOVLB  2
2EAE:  ADDWFC 03,W
2EB0:  MOVLB  1
2EB2:  MOVWF  xF4
....................    } 
2EB4:  BRA    2EDC
2EB6:  MOVLB  2
....................    else if(read_eeprom(8)==0)// cuma günü kapali ise 
2EB8:  MOVFF  FF2,24E
2EBC:  BCF    FF2.7
2EBE:  MOVLW  08
2EC0:  MOVWF  FA9
2EC2:  BCF    FA6.6
2EC4:  BCF    FA6.7
2EC6:  BSF    FA6.0
2EC8:  MOVF   FA8,W
2ECA:  BTFSC  x4E.7
2ECC:  BSF    FF2.7
2ECE:  XORLW  00
2ED0:  BNZ   2EDE
....................    { 
....................       cumatoplamdk=0; 
2ED2:  MOVLB  1
2ED4:  CLRF   xF4
2ED6:  CLRF   xF3
2ED8:  CLRF   xF2
2EDA:  CLRF   xF1
2EDC:  MOVLB  2
....................    } 
....................     
....................    //********************************* CUMA 2 GUNU TOPLAM DK**************************************** 
....................    if(read_eeprom(9)==1)// cuma2 günü acik ise 
2EDE:  MOVFF  FF2,24E
2EE2:  BCF    FF2.7
2EE4:  MOVLW  09
2EE6:  MOVWF  FA9
2EE8:  BCF    FA6.6
2EEA:  BCF    FA6.7
2EEC:  BSF    FA6.0
2EEE:  MOVF   FA8,W
2EF0:  BTFSC  x4E.7
2EF2:  BSF    FF2.7
2EF4:  SUBLW  01
2EF6:  BNZ   2FD2
....................    { 
....................       cumasaat2=read_eeprom(52)-read_eeprom(50); 
2EF8:  MOVFF  FF2,24E
2EFC:  BCF    FF2.7
2EFE:  MOVLW  34
2F00:  MOVWF  FA9
2F02:  BCF    FA6.6
2F04:  BCF    FA6.7
2F06:  BSF    FA6.0
2F08:  MOVF   FA8,W
2F0A:  BTFSC  x4E.7
2F0C:  BSF    FF2.7
2F0E:  MOVWF  x4F
2F10:  MOVFF  FF2,250
2F14:  BCF    FF2.7
2F16:  MOVLW  32
2F18:  MOVWF  FA9
2F1A:  BCF    FA6.6
2F1C:  BCF    FA6.7
2F1E:  BSF    FA6.0
2F20:  MOVF   FA8,W
2F22:  BTFSC  x50.7
2F24:  BSF    FF2.7
2F26:  SUBWF  x4F,W
2F28:  MOVWF  00
2F2A:  CLRF   01
2F2C:  CLRF   02
2F2E:  CLRF   03
2F30:  MOVFF  03,1C4
2F34:  MOVFF  02,1C3
2F38:  MOVFF  01,1C2
2F3C:  MOVFF  00,1C1
....................       cumadk2=read_eeprom(53)-read_eeprom(51); 
2F40:  MOVFF  FF2,24E
2F44:  BCF    FF2.7
2F46:  MOVLW  35
2F48:  MOVWF  FA9
2F4A:  BCF    FA6.6
2F4C:  BCF    FA6.7
2F4E:  BSF    FA6.0
2F50:  MOVF   FA8,W
2F52:  BTFSC  x4E.7
2F54:  BSF    FF2.7
2F56:  MOVWF  x4F
2F58:  MOVFF  FF2,250
2F5C:  BCF    FF2.7
2F5E:  MOVLW  33
2F60:  MOVWF  FA9
2F62:  BCF    FA6.6
2F64:  BCF    FA6.7
2F66:  BSF    FA6.0
2F68:  MOVF   FA8,W
2F6A:  BTFSC  x50.7
2F6C:  BSF    FF2.7
2F6E:  SUBWF  x4F,W
2F70:  MOVWF  00
2F72:  CLRF   01
2F74:  CLRF   02
2F76:  CLRF   03
2F78:  MOVFF  03,1C8
2F7C:  MOVFF  02,1C7
2F80:  MOVFF  01,1C6
2F84:  MOVFF  00,1C5
....................       cumatoplamdk2=(60*cumasaat2)+(cumadk2); 
2F88:  CLRF   x51
2F8A:  CLRF   x50
2F8C:  CLRF   x4F
2F8E:  MOVLW  3C
2F90:  MOVWF  x4E
2F92:  MOVFF  1C4,255
2F96:  MOVFF  1C3,254
2F9A:  MOVFF  1C2,253
2F9E:  MOVFF  1C1,252
2FA2:  MOVLB  0
2FA4:  CALL   1958
2FA8:  MOVLB  1
2FAA:  MOVF   xC5,W
2FAC:  MOVLB  2
2FAE:  ADDWF  00,W
2FB0:  MOVWF  x0D
2FB2:  MOVLB  1
2FB4:  MOVF   xC6,W
2FB6:  MOVLB  2
2FB8:  ADDWFC 01,W
2FBA:  MOVWF  x0E
2FBC:  MOVLB  1
2FBE:  MOVF   xC7,W
2FC0:  MOVLB  2
2FC2:  ADDWFC 02,W
2FC4:  MOVWF  x0F
2FC6:  MOVLB  1
2FC8:  MOVF   xC8,W
2FCA:  MOVLB  2
2FCC:  ADDWFC 03,W
2FCE:  MOVWF  x10
....................    } 
2FD0:  BRA    2FF4
....................    else if(read_eeprom(9)==0)// cuma2 günü kapali ise 
2FD2:  MOVFF  FF2,24E
2FD6:  BCF    FF2.7
2FD8:  MOVLW  09
2FDA:  MOVWF  FA9
2FDC:  BCF    FA6.6
2FDE:  BCF    FA6.7
2FE0:  BSF    FA6.0
2FE2:  MOVF   FA8,W
2FE4:  BTFSC  x4E.7
2FE6:  BSF    FF2.7
2FE8:  XORLW  00
2FEA:  BNZ   2FF4
....................    { 
....................       cumatoplamdk2=0; 
2FEC:  CLRF   x10
2FEE:  CLRF   x0F
2FF0:  CLRF   x0E
2FF2:  CLRF   x0D
....................    } 
....................       
....................  
....................    //****************************** CUMARTESI 1 GUNU TOPLAM DK************************************** 
....................    if(read_eeprom(10)==1)// cumartesi1 günü acik ise 
2FF4:  MOVFF  FF2,24E
2FF8:  BCF    FF2.7
2FFA:  MOVLW  0A
2FFC:  MOVWF  FA9
2FFE:  BCF    FA6.6
3000:  BCF    FA6.7
3002:  BSF    FA6.0
3004:  MOVF   FA8,W
3006:  BTFSC  x4E.7
3008:  BSF    FF2.7
300A:  SUBLW  01
300C:  BNZ   30EC
....................    { 
....................       ctesisaat=read_eeprom(56)-read_eeprom(54); 
300E:  MOVFF  FF2,24E
3012:  BCF    FF2.7
3014:  MOVLW  38
3016:  MOVWF  FA9
3018:  BCF    FA6.6
301A:  BCF    FA6.7
301C:  BSF    FA6.0
301E:  MOVF   FA8,W
3020:  BTFSC  x4E.7
3022:  BSF    FF2.7
3024:  MOVWF  x4F
3026:  MOVFF  FF2,250
302A:  BCF    FF2.7
302C:  MOVLW  36
302E:  MOVWF  FA9
3030:  BCF    FA6.6
3032:  BCF    FA6.7
3034:  BSF    FA6.0
3036:  MOVF   FA8,W
3038:  BTFSC  x50.7
303A:  BSF    FF2.7
303C:  SUBWF  x4F,W
303E:  MOVWF  00
3040:  CLRF   01
3042:  CLRF   02
3044:  CLRF   03
3046:  MOVFF  03,194
304A:  MOVFF  02,193
304E:  MOVFF  01,192
3052:  MOVFF  00,191
....................       ctesidk=read_eeprom(57)-read_eeprom(55); 
3056:  MOVFF  FF2,24E
305A:  BCF    FF2.7
305C:  MOVLW  39
305E:  MOVWF  FA9
3060:  BCF    FA6.6
3062:  BCF    FA6.7
3064:  BSF    FA6.0
3066:  MOVF   FA8,W
3068:  BTFSC  x4E.7
306A:  BSF    FF2.7
306C:  MOVWF  x4F
306E:  MOVFF  FF2,250
3072:  BCF    FF2.7
3074:  MOVLW  37
3076:  MOVWF  FA9
3078:  BCF    FA6.6
307A:  BCF    FA6.7
307C:  BSF    FA6.0
307E:  MOVF   FA8,W
3080:  BTFSC  x50.7
3082:  BSF    FF2.7
3084:  SUBWF  x4F,W
3086:  MOVWF  00
3088:  CLRF   01
308A:  CLRF   02
308C:  CLRF   03
308E:  MOVFF  03,198
3092:  MOVFF  02,197
3096:  MOVFF  01,196
309A:  MOVFF  00,195
....................       ctesitoplamdk=(60*ctesisaat)+(ctesidk); 
309E:  CLRF   x51
30A0:  CLRF   x50
30A2:  CLRF   x4F
30A4:  MOVLW  3C
30A6:  MOVWF  x4E
30A8:  MOVFF  194,255
30AC:  MOVFF  193,254
30B0:  MOVFF  192,253
30B4:  MOVFF  191,252
30B8:  MOVLB  0
30BA:  CALL   1958
30BE:  MOVLB  1
30C0:  MOVF   x95,W
30C2:  MOVLB  2
30C4:  ADDWF  00,W
30C6:  MOVLB  1
30C8:  MOVWF  xF5
30CA:  MOVF   x96,W
30CC:  MOVLB  2
30CE:  ADDWFC 01,W
30D0:  MOVLB  1
30D2:  MOVWF  xF6
30D4:  MOVF   x97,W
30D6:  MOVLB  2
30D8:  ADDWFC 02,W
30DA:  MOVLB  1
30DC:  MOVWF  xF7
30DE:  MOVF   x98,W
30E0:  MOVLB  2
30E2:  ADDWFC 03,W
30E4:  MOVLB  1
30E6:  MOVWF  xF8
....................    } 
30E8:  BRA    3110
30EA:  MOVLB  2
....................    else if(read_eeprom(10)==0)// cumartesi1 günü kapali ise 
30EC:  MOVFF  FF2,24E
30F0:  BCF    FF2.7
30F2:  MOVLW  0A
30F4:  MOVWF  FA9
30F6:  BCF    FA6.6
30F8:  BCF    FA6.7
30FA:  BSF    FA6.0
30FC:  MOVF   FA8,W
30FE:  BTFSC  x4E.7
3100:  BSF    FF2.7
3102:  XORLW  00
3104:  BNZ   3112
....................    { 
....................       ctesitoplamdk=0; 
3106:  MOVLB  1
3108:  CLRF   xF8
310A:  CLRF   xF7
310C:  CLRF   xF6
310E:  CLRF   xF5
3110:  MOVLB  2
....................    } 
....................   
....................       //****************************** CUMARTESI 2 GUNU TOPLAM DK************************************ 
....................    if(read_eeprom(11)==1)// cumartesi2 günü acik ise 
3112:  MOVFF  FF2,24E
3116:  BCF    FF2.7
3118:  MOVLW  0B
311A:  MOVWF  FA9
311C:  BCF    FA6.6
311E:  BCF    FA6.7
3120:  BSF    FA6.0
3122:  MOVF   FA8,W
3124:  BTFSC  x4E.7
3126:  BSF    FF2.7
3128:  SUBLW  01
312A:  BNZ   3206
....................    { 
....................       ctesisaat2=read_eeprom(60)-read_eeprom(58); 
312C:  MOVFF  FF2,24E
3130:  BCF    FF2.7
3132:  MOVLW  3C
3134:  MOVWF  FA9
3136:  BCF    FA6.6
3138:  BCF    FA6.7
313A:  BSF    FA6.0
313C:  MOVF   FA8,W
313E:  BTFSC  x4E.7
3140:  BSF    FF2.7
3142:  MOVWF  x4F
3144:  MOVFF  FF2,250
3148:  BCF    FF2.7
314A:  MOVLW  3A
314C:  MOVWF  FA9
314E:  BCF    FA6.6
3150:  BCF    FA6.7
3152:  BSF    FA6.0
3154:  MOVF   FA8,W
3156:  BTFSC  x50.7
3158:  BSF    FF2.7
315A:  SUBWF  x4F,W
315C:  MOVWF  00
315E:  CLRF   01
3160:  CLRF   02
3162:  CLRF   03
3164:  MOVFF  03,1CC
3168:  MOVFF  02,1CB
316C:  MOVFF  01,1CA
3170:  MOVFF  00,1C9
....................       ctesidk2=read_eeprom(61)-read_eeprom(59); 
3174:  MOVFF  FF2,24E
3178:  BCF    FF2.7
317A:  MOVLW  3D
317C:  MOVWF  FA9
317E:  BCF    FA6.6
3180:  BCF    FA6.7
3182:  BSF    FA6.0
3184:  MOVF   FA8,W
3186:  BTFSC  x4E.7
3188:  BSF    FF2.7
318A:  MOVWF  x4F
318C:  MOVFF  FF2,250
3190:  BCF    FF2.7
3192:  MOVLW  3B
3194:  MOVWF  FA9
3196:  BCF    FA6.6
3198:  BCF    FA6.7
319A:  BSF    FA6.0
319C:  MOVF   FA8,W
319E:  BTFSC  x50.7
31A0:  BSF    FF2.7
31A2:  SUBWF  x4F,W
31A4:  MOVWF  00
31A6:  CLRF   01
31A8:  CLRF   02
31AA:  CLRF   03
31AC:  MOVFF  03,1D0
31B0:  MOVFF  02,1CF
31B4:  MOVFF  01,1CE
31B8:  MOVFF  00,1CD
....................       ctesitoplamdk2=(60*ctesisaat2)+(ctesidk2); 
31BC:  CLRF   x51
31BE:  CLRF   x50
31C0:  CLRF   x4F
31C2:  MOVLW  3C
31C4:  MOVWF  x4E
31C6:  MOVFF  1CC,255
31CA:  MOVFF  1CB,254
31CE:  MOVFF  1CA,253
31D2:  MOVFF  1C9,252
31D6:  MOVLB  0
31D8:  CALL   1958
31DC:  MOVLB  1
31DE:  MOVF   xCD,W
31E0:  MOVLB  2
31E2:  ADDWF  00,W
31E4:  MOVWF  x11
31E6:  MOVLB  1
31E8:  MOVF   xCE,W
31EA:  MOVLB  2
31EC:  ADDWFC 01,W
31EE:  MOVWF  x12
31F0:  MOVLB  1
31F2:  MOVF   xCF,W
31F4:  MOVLB  2
31F6:  ADDWFC 02,W
31F8:  MOVWF  x13
31FA:  MOVLB  1
31FC:  MOVF   xD0,W
31FE:  MOVLB  2
3200:  ADDWFC 03,W
3202:  MOVWF  x14
....................    } 
3204:  BRA    3228
....................    else if(read_eeprom(11)==0)// cumartesi2 günü kapali ise 
3206:  MOVFF  FF2,24E
320A:  BCF    FF2.7
320C:  MOVLW  0B
320E:  MOVWF  FA9
3210:  BCF    FA6.6
3212:  BCF    FA6.7
3214:  BSF    FA6.0
3216:  MOVF   FA8,W
3218:  BTFSC  x4E.7
321A:  BSF    FF2.7
321C:  XORLW  00
321E:  BNZ   3228
....................    { 
....................       ctesitoplamdk2=0; 
3220:  CLRF   x14
3222:  CLRF   x13
3224:  CLRF   x12
3226:  CLRF   x11
....................    } 
....................       
....................     
....................     
.................... //********************************* PAZAR 1 GUNU TOPLAM DK******************************************** 
....................    if(read_eeprom(12)==1)// pazar1 günü acik ise 
3228:  MOVFF  FF2,24E
322C:  BCF    FF2.7
322E:  MOVLW  0C
3230:  MOVWF  FA9
3232:  BCF    FA6.6
3234:  BCF    FA6.7
3236:  BSF    FA6.0
3238:  MOVF   FA8,W
323A:  BTFSC  x4E.7
323C:  BSF    FF2.7
323E:  SUBLW  01
3240:  BNZ   3320
....................    { 
....................       pazarsaat=read_eeprom(64)-read_eeprom(62); 
3242:  MOVFF  FF2,24E
3246:  BCF    FF2.7
3248:  MOVLW  40
324A:  MOVWF  FA9
324C:  BCF    FA6.6
324E:  BCF    FA6.7
3250:  BSF    FA6.0
3252:  MOVF   FA8,W
3254:  BTFSC  x4E.7
3256:  BSF    FF2.7
3258:  MOVWF  x4F
325A:  MOVFF  FF2,250
325E:  BCF    FF2.7
3260:  MOVLW  3E
3262:  MOVWF  FA9
3264:  BCF    FA6.6
3266:  BCF    FA6.7
3268:  BSF    FA6.0
326A:  MOVF   FA8,W
326C:  BTFSC  x50.7
326E:  BSF    FF2.7
3270:  SUBWF  x4F,W
3272:  MOVWF  00
3274:  CLRF   01
3276:  CLRF   02
3278:  CLRF   03
327A:  MOVFF  03,19C
327E:  MOVFF  02,19B
3282:  MOVFF  01,19A
3286:  MOVFF  00,199
....................       pazardk=read_eeprom(65)-read_eeprom(63); 
328A:  MOVFF  FF2,24E
328E:  BCF    FF2.7
3290:  MOVLW  41
3292:  MOVWF  FA9
3294:  BCF    FA6.6
3296:  BCF    FA6.7
3298:  BSF    FA6.0
329A:  MOVF   FA8,W
329C:  BTFSC  x4E.7
329E:  BSF    FF2.7
32A0:  MOVWF  x4F
32A2:  MOVFF  FF2,250
32A6:  BCF    FF2.7
32A8:  MOVLW  3F
32AA:  MOVWF  FA9
32AC:  BCF    FA6.6
32AE:  BCF    FA6.7
32B0:  BSF    FA6.0
32B2:  MOVF   FA8,W
32B4:  BTFSC  x50.7
32B6:  BSF    FF2.7
32B8:  SUBWF  x4F,W
32BA:  MOVWF  00
32BC:  CLRF   01
32BE:  CLRF   02
32C0:  CLRF   03
32C2:  MOVFF  03,1A0
32C6:  MOVFF  02,19F
32CA:  MOVFF  01,19E
32CE:  MOVFF  00,19D
....................       pazartoplamdk=(60*pazarsaat)+(pazardk); 
32D2:  CLRF   x51
32D4:  CLRF   x50
32D6:  CLRF   x4F
32D8:  MOVLW  3C
32DA:  MOVWF  x4E
32DC:  MOVFF  19C,255
32E0:  MOVFF  19B,254
32E4:  MOVFF  19A,253
32E8:  MOVFF  199,252
32EC:  MOVLB  0
32EE:  CALL   1958
32F2:  MOVLB  1
32F4:  MOVF   x9D,W
32F6:  MOVLB  2
32F8:  ADDWF  00,W
32FA:  MOVLB  1
32FC:  MOVWF  xF9
32FE:  MOVF   x9E,W
3300:  MOVLB  2
3302:  ADDWFC 01,W
3304:  MOVLB  1
3306:  MOVWF  xFA
3308:  MOVF   x9F,W
330A:  MOVLB  2
330C:  ADDWFC 02,W
330E:  MOVLB  1
3310:  MOVWF  xFB
3312:  MOVF   xA0,W
3314:  MOVLB  2
3316:  ADDWFC 03,W
3318:  MOVLB  1
331A:  MOVWF  xFC
....................    } 
331C:  BRA    3344
331E:  MOVLB  2
....................    else if(read_eeprom(12)==0)// pazar1 günü kapali ise 
3320:  MOVFF  FF2,24E
3324:  BCF    FF2.7
3326:  MOVLW  0C
3328:  MOVWF  FA9
332A:  BCF    FA6.6
332C:  BCF    FA6.7
332E:  BSF    FA6.0
3330:  MOVF   FA8,W
3332:  BTFSC  x4E.7
3334:  BSF    FF2.7
3336:  XORLW  00
3338:  BNZ   3346
....................    { 
....................       pazartoplamdk=0; 
333A:  MOVLB  1
333C:  CLRF   xFC
333E:  CLRF   xFB
3340:  CLRF   xFA
3342:  CLRF   xF9
3344:  MOVLB  2
....................    } 
....................   
....................   
....................  //********************************* PAZAR 2 GUNU TOPLAM DK******************************************** 
....................    if(read_eeprom(13)==1)// pazar2 günü acik ise 
3346:  MOVFF  FF2,24E
334A:  BCF    FF2.7
334C:  MOVLW  0D
334E:  MOVWF  FA9
3350:  BCF    FA6.6
3352:  BCF    FA6.7
3354:  BSF    FA6.0
3356:  MOVF   FA8,W
3358:  BTFSC  x4E.7
335A:  BSF    FF2.7
335C:  SUBLW  01
335E:  BNZ   343A
....................    { 
....................       pazarsaat2=read_eeprom(68)-read_eeprom(66); 
3360:  MOVFF  FF2,24E
3364:  BCF    FF2.7
3366:  MOVLW  44
3368:  MOVWF  FA9
336A:  BCF    FA6.6
336C:  BCF    FA6.7
336E:  BSF    FA6.0
3370:  MOVF   FA8,W
3372:  BTFSC  x4E.7
3374:  BSF    FF2.7
3376:  MOVWF  x4F
3378:  MOVFF  FF2,250
337C:  BCF    FF2.7
337E:  MOVLW  42
3380:  MOVWF  FA9
3382:  BCF    FA6.6
3384:  BCF    FA6.7
3386:  BSF    FA6.0
3388:  MOVF   FA8,W
338A:  BTFSC  x50.7
338C:  BSF    FF2.7
338E:  SUBWF  x4F,W
3390:  MOVWF  00
3392:  CLRF   01
3394:  CLRF   02
3396:  CLRF   03
3398:  MOVFF  03,1D4
339C:  MOVFF  02,1D3
33A0:  MOVFF  01,1D2
33A4:  MOVFF  00,1D1
....................       pazardk2=read_eeprom(69)-read_eeprom(67);  
33A8:  MOVFF  FF2,24E
33AC:  BCF    FF2.7
33AE:  MOVLW  45
33B0:  MOVWF  FA9
33B2:  BCF    FA6.6
33B4:  BCF    FA6.7
33B6:  BSF    FA6.0
33B8:  MOVF   FA8,W
33BA:  BTFSC  x4E.7
33BC:  BSF    FF2.7
33BE:  MOVWF  x4F
33C0:  MOVFF  FF2,250
33C4:  BCF    FF2.7
33C6:  MOVLW  43
33C8:  MOVWF  FA9
33CA:  BCF    FA6.6
33CC:  BCF    FA6.7
33CE:  BSF    FA6.0
33D0:  MOVF   FA8,W
33D2:  BTFSC  x50.7
33D4:  BSF    FF2.7
33D6:  SUBWF  x4F,W
33D8:  MOVWF  00
33DA:  CLRF   01
33DC:  CLRF   02
33DE:  CLRF   03
33E0:  MOVFF  03,1D8
33E4:  MOVFF  02,1D7
33E8:  MOVFF  01,1D6
33EC:  MOVFF  00,1D5
....................       pazartoplamdk2=(60*pazarsaat2)+(pazardk2); 
33F0:  CLRF   x51
33F2:  CLRF   x50
33F4:  CLRF   x4F
33F6:  MOVLW  3C
33F8:  MOVWF  x4E
33FA:  MOVFF  1D4,255
33FE:  MOVFF  1D3,254
3402:  MOVFF  1D2,253
3406:  MOVFF  1D1,252
340A:  MOVLB  0
340C:  CALL   1958
3410:  MOVLB  1
3412:  MOVF   xD5,W
3414:  MOVLB  2
3416:  ADDWF  00,W
3418:  MOVWF  x15
341A:  MOVLB  1
341C:  MOVF   xD6,W
341E:  MOVLB  2
3420:  ADDWFC 01,W
3422:  MOVWF  x16
3424:  MOVLB  1
3426:  MOVF   xD7,W
3428:  MOVLB  2
342A:  ADDWFC 02,W
342C:  MOVWF  x17
342E:  MOVLB  1
3430:  MOVF   xD8,W
3432:  MOVLB  2
3434:  ADDWFC 03,W
3436:  MOVWF  x18
....................    } 
3438:  BRA    345C
....................    else if(read_eeprom(13)==0)// pazar2 günü kapali ise 
343A:  MOVFF  FF2,24E
343E:  BCF    FF2.7
3440:  MOVLW  0D
3442:  MOVWF  FA9
3444:  BCF    FA6.6
3446:  BCF    FA6.7
3448:  BSF    FA6.0
344A:  MOVF   FA8,W
344C:  BTFSC  x4E.7
344E:  BSF    FF2.7
3450:  XORLW  00
3452:  BNZ   345C
....................    { 
....................       pazartoplamdk2=0;  
3454:  CLRF   x18
3456:  CLRF   x17
3458:  CLRF   x16
345A:  CLRF   x15
....................    } 
....................   
....................    toplamdk=ptesitoplamdk+salitoplamdk+cartoplamdk+pertoplamdk+cumatoplamdk+ctesitoplamdk+pazartoplamdk+ptesitoplamdk2+salitoplamdk2+cartoplamdk2+pertoplamdk2+cumatoplamdk2+ctesitoplamdk2+pazartoplamdk2; 
345C:  MOVLB  1
345E:  MOVF   xE5,W
3460:  ADDWF  xE1,W
3462:  MOVLB  2
3464:  MOVWF  x4E
3466:  MOVLB  1
3468:  MOVF   xE6,W
346A:  ADDWFC xE2,W
346C:  MOVLB  2
346E:  MOVWF  x4F
3470:  MOVLB  1
3472:  MOVF   xE7,W
3474:  ADDWFC xE3,W
3476:  MOVLB  2
3478:  MOVWF  x50
347A:  MOVLB  1
347C:  MOVF   xE8,W
347E:  ADDWFC xE4,W
3480:  MOVLB  2
3482:  MOVWF  x51
3484:  MOVLB  1
3486:  MOVF   xE9,W
3488:  MOVLB  2
348A:  ADDWF  x4E,F
348C:  MOVLB  1
348E:  MOVF   xEA,W
3490:  MOVLB  2
3492:  ADDWFC x4F,F
3494:  MOVLB  1
3496:  MOVF   xEB,W
3498:  MOVLB  2
349A:  ADDWFC x50,F
349C:  MOVLB  1
349E:  MOVF   xEC,W
34A0:  MOVLB  2
34A2:  ADDWFC x51,F
34A4:  MOVLB  1
34A6:  MOVF   xED,W
34A8:  MOVLB  2
34AA:  ADDWF  x4E,F
34AC:  MOVLB  1
34AE:  MOVF   xEE,W
34B0:  MOVLB  2
34B2:  ADDWFC x4F,F
34B4:  MOVLB  1
34B6:  MOVF   xEF,W
34B8:  MOVLB  2
34BA:  ADDWFC x50,F
34BC:  MOVLB  1
34BE:  MOVF   xF0,W
34C0:  MOVLB  2
34C2:  ADDWFC x51,F
34C4:  MOVLB  1
34C6:  MOVF   xF1,W
34C8:  MOVLB  2
34CA:  ADDWF  x4E,F
34CC:  MOVLB  1
34CE:  MOVF   xF2,W
34D0:  MOVLB  2
34D2:  ADDWFC x4F,F
34D4:  MOVLB  1
34D6:  MOVF   xF3,W
34D8:  MOVLB  2
34DA:  ADDWFC x50,F
34DC:  MOVLB  1
34DE:  MOVF   xF4,W
34E0:  MOVLB  2
34E2:  ADDWFC x51,F
34E4:  MOVLB  1
34E6:  MOVF   xF5,W
34E8:  MOVLB  2
34EA:  ADDWF  x4E,F
34EC:  MOVLB  1
34EE:  MOVF   xF6,W
34F0:  MOVLB  2
34F2:  ADDWFC x4F,F
34F4:  MOVLB  1
34F6:  MOVF   xF7,W
34F8:  MOVLB  2
34FA:  ADDWFC x50,F
34FC:  MOVLB  1
34FE:  MOVF   xF8,W
3500:  MOVLB  2
3502:  ADDWFC x51,F
3504:  MOVLB  1
3506:  MOVF   xF9,W
3508:  MOVLB  2
350A:  ADDWF  x4E,F
350C:  MOVLB  1
350E:  MOVF   xFA,W
3510:  MOVLB  2
3512:  ADDWFC x4F,F
3514:  MOVLB  1
3516:  MOVF   xFB,W
3518:  MOVLB  2
351A:  ADDWFC x50,F
351C:  MOVLB  1
351E:  MOVF   xFC,W
3520:  MOVLB  2
3522:  ADDWFC x51,F
3524:  MOVLB  1
3526:  MOVF   xFD,W
3528:  MOVLB  2
352A:  ADDWF  x4E,F
352C:  MOVLB  1
352E:  MOVF   xFE,W
3530:  MOVLB  2
3532:  ADDWFC x4F,F
3534:  MOVLB  1
3536:  MOVF   xFF,W
3538:  MOVLB  2
353A:  ADDWFC x50,F
353C:  MOVF   x00,W
353E:  ADDWFC x51,F
3540:  MOVF   x01,W
3542:  ADDWF  x4E,F
3544:  MOVF   x02,W
3546:  ADDWFC x4F,F
3548:  MOVF   x03,W
354A:  ADDWFC x50,F
354C:  MOVF   x04,W
354E:  ADDWFC x51,F
3550:  MOVF   x05,W
3552:  ADDWF  x4E,F
3554:  MOVF   x06,W
3556:  ADDWFC x4F,F
3558:  MOVF   x07,W
355A:  ADDWFC x50,F
355C:  MOVF   x08,W
355E:  ADDWFC x51,F
3560:  MOVF   x09,W
3562:  ADDWF  x4E,F
3564:  MOVF   x0A,W
3566:  ADDWFC x4F,F
3568:  MOVF   x0B,W
356A:  ADDWFC x50,F
356C:  MOVF   x0C,W
356E:  ADDWFC x51,F
3570:  MOVF   x0D,W
3572:  ADDWF  x4E,F
3574:  MOVF   x0E,W
3576:  ADDWFC x4F,F
3578:  MOVF   x0F,W
357A:  ADDWFC x50,F
357C:  MOVF   x10,W
357E:  ADDWFC x51,F
3580:  MOVF   x11,W
3582:  ADDWF  x4E,F
3584:  MOVF   x12,W
3586:  ADDWFC x4F,F
3588:  MOVF   x13,W
358A:  ADDWFC x50,F
358C:  MOVF   x14,W
358E:  ADDWFC x51,F
3590:  MOVF   x15,W
3592:  ADDWF  x4E,W
3594:  MOVLB  1
3596:  MOVWF  xDD
3598:  MOVLB  2
359A:  MOVF   x16,W
359C:  ADDWFC x4F,W
359E:  MOVLB  1
35A0:  MOVWF  xDE
35A2:  MOVLB  2
35A4:  MOVF   x17,W
35A6:  ADDWFC x50,W
35A8:  MOVLB  1
35AA:  MOVWF  xDF
35AC:  MOVLB  2
35AE:  MOVF   x18,W
35B0:  ADDWFC x51,W
35B2:  MOVLB  1
35B4:  MOVWF  xE0
....................    toplamsn=toplamdk*60;// CALISMA SURELERI ICINDEKI TOPLAM sn DEGERI 
35B6:  MOVFF  1E0,251
35BA:  MOVFF  1DF,250
35BE:  MOVFF  1DE,24F
35C2:  MOVFF  1DD,24E
35C6:  MOVLB  2
35C8:  CLRF   x55
35CA:  CLRF   x54
35CC:  CLRF   x53
35CE:  MOVLW  3C
35D0:  MOVWF  x52
35D2:  MOVLB  0
35D4:  CALL   1958
35D8:  MOVFF  03,1DC
35DC:  MOVFF  02,1DB
35E0:  MOVFF  01,1DA
35E4:  MOVFF  00,1D9
....................    pasifsn=((toplamsn)-(((KARTUS)/30)*7));//PASIF CALISMA SURESI 
35E8:  MOVFF  1DC,251
35EC:  MOVFF  1DB,250
35F0:  MOVFF  1DA,24F
35F4:  MOVFF  1D9,24E
35F8:  GOTO   19B4
35FC:  BSF    FD8.1
35FE:  MOVFF  03,279
3602:  MOVFF  02,278
3606:  MOVFF  01,277
360A:  MOVFF  00,276
360E:  MOVLW  7B
3610:  MOVLB  2
3612:  MOVWF  x7D
3614:  MOVLW  13
3616:  MOVWF  x7C
3618:  MOVLW  1A
361A:  MOVWF  x7B
361C:  MOVLW  8E
361E:  MOVWF  x7A
3620:  MOVLB  0
3622:  CALL   1A10
3626:  MOVFF  03,228
362A:  MOVFF  02,227
362E:  MOVFF  01,226
3632:  MOVFF  00,225
....................    oran=(pasifsn/((KARTUS/30)*7));//PASIF CALISMA SURESI ILE AKTIF CALISMA SURESI ORANI 
3636:  MOVFF  228,25D
363A:  MOVFF  227,25C
363E:  MOVFF  226,25B
3642:  MOVFF  225,25A
3646:  MOVLW  7B
3648:  MOVLB  2
364A:  MOVWF  x61
364C:  MOVLW  13
364E:  MOVWF  x60
3650:  MOVLW  1A
3652:  MOVWF  x5F
3654:  MOVLW  8E
3656:  MOVWF  x5E
3658:  MOVLB  0
365A:  CALL   1C88
365E:  MOVFF  03,224
3662:  MOVFF  02,223
3666:  MOVFF  01,222
366A:  MOVFF  00,221
....................    tetik=(120/(oran+1));//120 sn lik periyot içinde tetik süresi hesaplandi 
366E:  BCF    FD8.1
3670:  MOVFF  224,279
3674:  MOVFF  223,278
3678:  MOVFF  222,277
367C:  MOVFF  221,276
3680:  MOVLB  2
3682:  CLRF   x7D
3684:  CLRF   x7C
3686:  CLRF   x7B
3688:  MOVLW  7F
368A:  MOVWF  x7A
368C:  MOVLB  0
368E:  CALL   1A10
3692:  MOVLB  2
3694:  CLRF   x5D
3696:  CLRF   x5C
3698:  MOVLW  70
369A:  MOVWF  x5B
369C:  MOVLW  85
369E:  MOVWF  x5A
36A0:  MOVFF  03,261
36A4:  MOVFF  02,260
36A8:  MOVFF  01,25F
36AC:  MOVFF  00,25E
36B0:  MOVLB  0
36B2:  CALL   1C88
36B6:  MOVFF  03,21C
36BA:  MOVFF  02,21B
36BE:  MOVFF  01,21A
36C2:  MOVFF  00,219
....................    bekle=oran*tetik;//120 sn lik PERIYODUN BEKLEME SURESI 
36C6:  MOVFF  224,275
36CA:  MOVFF  223,274
36CE:  MOVFF  222,273
36D2:  MOVFF  221,272
36D6:  MOVFF  21C,279
36DA:  MOVFF  21B,278
36DE:  MOVFF  21A,277
36E2:  MOVFF  219,276
36E6:  CALL   1DE6
36EA:  MOVFF  03,220
36EE:  MOVFF  02,21F
36F2:  MOVFF  01,21E
36F6:  MOVFF  00,21D
....................    bekle=bekle*1000;//bekleme suresi sn den msn ye cevrilir 
36FA:  MOVFF  220,275
36FE:  MOVFF  21F,274
3702:  MOVFF  21E,273
3706:  MOVFF  21D,272
370A:  MOVLB  2
370C:  CLRF   x79
370E:  CLRF   x78
3710:  MOVLW  7A
3712:  MOVWF  x77
3714:  MOVLW  88
3716:  MOVWF  x76
3718:  MOVLB  0
371A:  CALL   1DE6
371E:  MOVFF  03,220
3722:  MOVFF  02,21F
3726:  MOVFF  01,21E
372A:  MOVFF  00,21D
....................    tetik=tetik*1000;//tetik suresi sn den msn ye cevrilir 
372E:  MOVFF  21C,275
3732:  MOVFF  21B,274
3736:  MOVFF  21A,273
373A:  MOVFF  219,272
373E:  MOVLB  2
3740:  CLRF   x79
3742:  CLRF   x78
3744:  MOVLW  7A
3746:  MOVWF  x77
3748:  MOVLW  88
374A:  MOVWF  x76
374C:  MOVLB  0
374E:  CALL   1DE6
3752:  MOVFF  03,21C
3756:  MOVFF  02,21B
375A:  MOVFF  01,21A
375E:  MOVFF  00,219
....................    sn1=(bekle)-fmod((bekle),1);  // BEKLEME msn tam kýsmý hesaplanýyor 
3762:  MOVFF  220,251
3766:  MOVFF  21F,250
376A:  MOVFF  21E,24F
376E:  MOVFF  21D,24E
3772:  MOVLB  2
3774:  CLRF   x55
3776:  CLRF   x54
3778:  CLRF   x53
377A:  MOVLW  7F
377C:  MOVWF  x52
377E:  MOVLB  0
3780:  CALL   2352
3784:  MOVFF  FEA,24F
3788:  MOVFF  FE9,24E
378C:  BSF    FD8.1
378E:  MOVFF  220,279
3792:  MOVFF  21F,278
3796:  MOVFF  21E,277
379A:  MOVFF  21D,276
379E:  MOVFF  03,27D
37A2:  MOVFF  02,27C
37A6:  MOVFF  01,27B
37AA:  MOVFF  00,27A
37AE:  CALL   1A10
37B2:  MOVFF  24F,FEA
37B6:  MOVFF  24E,FE9
37BA:  MOVFF  03,253
37BE:  MOVFF  02,252
37C2:  MOVFF  01,251
37C6:  MOVFF  00,250
37CA:  CALL   24AC
37CE:  MOVFF  03,22C
37D2:  MOVFF  02,22B
37D6:  MOVFF  01,22A
37DA:  MOVFF  00,229
....................    //sn2=fmod((bekle/4),1)*1000;       // BEKLEME usn deðgeri hesaplaniyor 
....................    sn3=((tetik)-fmod((tetik),1));  // TETIK msn tam kýsmý hesaplanýyor 
37DE:  MOVFF  21C,251
37E2:  MOVFF  21B,250
37E6:  MOVFF  21A,24F
37EA:  MOVFF  219,24E
37EE:  MOVLB  2
37F0:  CLRF   x55
37F2:  CLRF   x54
37F4:  CLRF   x53
37F6:  MOVLW  7F
37F8:  MOVWF  x52
37FA:  MOVLB  0
37FC:  CALL   2352
3800:  MOVFF  FEA,24F
3804:  MOVFF  FE9,24E
3808:  BSF    FD8.1
380A:  MOVFF  21C,279
380E:  MOVFF  21B,278
3812:  MOVFF  21A,277
3816:  MOVFF  219,276
381A:  MOVFF  03,27D
381E:  MOVFF  02,27C
3822:  MOVFF  01,27B
3826:  MOVFF  00,27A
382A:  CALL   1A10
382E:  MOVFF  24F,FEA
3832:  MOVFF  24E,FE9
3836:  MOVFF  03,253
383A:  MOVFF  02,252
383E:  MOVFF  01,251
3842:  MOVFF  00,250
3846:  CALL   24AC
384A:  MOVFF  03,230
384E:  MOVFF  02,22F
3852:  MOVFF  01,22E
3856:  MOVFF  00,22D
385A:  RETURN 0
....................    //sn4=fmod((tetik/4),1)*1000;       // TETIK usn degeri hesaplaniyor 
.................... } 
....................  
....................  
.................... int sifrecoz(char harf) 
.................... { 
....................    if(harf=='c') 
*
0502:  MOVLB  2
0504:  MOVF   x4E,W
0506:  SUBLW  63
0508:  BNZ   0512
....................    { 
....................      coz=0;  
050A:  MOVLB  0
050C:  CLRF   xA8
....................    } 
050E:  BRA    059E
0510:  MOVLB  2
....................    else if(harf=='d') 
0512:  MOVF   x4E,W
0514:  SUBLW  64
0516:  BNZ   0522
....................    { 
....................      coz=1;  
0518:  MOVLW  01
051A:  MOVLB  0
051C:  MOVWF  xA8
....................    } 
051E:  BRA    059E
0520:  MOVLB  2
....................    else if(harf=='e') 
0522:  MOVF   x4E,W
0524:  SUBLW  65
0526:  BNZ   0532
....................    { 
....................      coz=2;  
0528:  MOVLW  02
052A:  MOVLB  0
052C:  MOVWF  xA8
....................    } 
052E:  BRA    059E
0530:  MOVLB  2
....................    else if(harf=='n') 
0532:  MOVF   x4E,W
0534:  SUBLW  6E
0536:  BNZ   0542
....................    { 
....................      coz=3;  
0538:  MOVLW  03
053A:  MOVLB  0
053C:  MOVWF  xA8
....................    } 
053E:  BRA    059E
0540:  MOVLB  2
....................    else if(harf=='g') 
0542:  MOVF   x4E,W
0544:  SUBLW  67
0546:  BNZ   0552
....................    { 
....................      coz=4;  
0548:  MOVLW  04
054A:  MOVLB  0
054C:  MOVWF  xA8
....................    } 
054E:  BRA    059E
0550:  MOVLB  2
....................    else if(harf=='h') 
0552:  MOVF   x4E,W
0554:  SUBLW  68
0556:  BNZ   0562
....................    { 
....................      coz=5;  
0558:  MOVLW  05
055A:  MOVLB  0
055C:  MOVWF  xA8
....................    } 
055E:  BRA    059E
0560:  MOVLB  2
....................    else if(harf=='m') 
0562:  MOVF   x4E,W
0564:  SUBLW  6D
0566:  BNZ   0572
....................    { 
....................      coz=6;  
0568:  MOVLW  06
056A:  MOVLB  0
056C:  MOVWF  xA8
....................    } 
056E:  BRA    059E
0570:  MOVLB  2
....................    else if(harf=='p') 
0572:  MOVF   x4E,W
0574:  SUBLW  70
0576:  BNZ   0582
....................    { 
....................      coz=7;  
0578:  MOVLW  07
057A:  MOVLB  0
057C:  MOVWF  xA8
....................    } 
057E:  BRA    059E
0580:  MOVLB  2
....................    else if(harf=='r') 
0582:  MOVF   x4E,W
0584:  SUBLW  72
0586:  BNZ   0592
....................    { 
....................      coz=8;  
0588:  MOVLW  08
058A:  MOVLB  0
058C:  MOVWF  xA8
....................    } 
058E:  BRA    059E
0590:  MOVLB  2
....................    else if(harf=='s') 
0592:  MOVF   x4E,W
0594:  SUBLW  73
0596:  BNZ   05A0
....................    { 
....................      coz=9;  
0598:  MOVLW  09
059A:  MOVLB  0
059C:  MOVWF  xA8
059E:  MOVLB  2
....................    } 
....................  
....................    return coz; 
05A0:  MOVLB  0
05A2:  MOVFF  A8,01
05A6:  RETURN 0
.................... } 
....................  
....................  
.................... void sifirla(int gn) 
.................... { 
....................  
....................  if(gn!=1) 
*
4894:  MOVLB  2
4896:  DECFSZ x4E,W
4898:  BRA    489C
489A:  BRA    48D8
....................    { 
....................       degisken2=0; 
489C:  MOVLB  0
489E:  CLRF   xA1
....................       write_eeprom(80,degisken2); 
48A0:  MOVF   FF2,W
48A2:  MOVWF  00
48A4:  BCF    FF2.7
48A6:  MOVLW  50
48A8:  MOVWF  FA9
48AA:  MOVFF  A1,FA8
48AE:  BCF    FA6.6
48B0:  BCF    FA6.7
48B2:  BSF    FA6.2
48B4:  MOVLB  F
48B6:  MOVLW  55
48B8:  MOVWF  FA7
48BA:  MOVLW  AA
48BC:  MOVWF  FA7
48BE:  BSF    FA6.1
48C0:  BTFSC  FA6.1
48C2:  BRA    48C0
48C4:  BCF    FA6.2
48C6:  MOVF   00,W
48C8:  IORWF  FF2,F
....................       delay_ms(15); 
48CA:  MOVLW  0F
48CC:  MOVLB  2
48CE:  MOVWF  x5B
48D0:  MOVLB  0
48D2:  CALL   0192
48D6:  MOVLB  2
....................    } 
....................  
....................  if(gn!=2) 
48D8:  MOVF   x4E,W
48DA:  SUBLW  02
48DC:  BZ    491A
....................    { 
....................       degisken3=0; 
48DE:  MOVLB  0
48E0:  CLRF   xA2
....................       write_eeprom(81,degisken3); 
48E2:  MOVF   FF2,W
48E4:  MOVWF  00
48E6:  BCF    FF2.7
48E8:  MOVLW  51
48EA:  MOVWF  FA9
48EC:  MOVFF  A2,FA8
48F0:  BCF    FA6.6
48F2:  BCF    FA6.7
48F4:  BSF    FA6.2
48F6:  MOVLB  F
48F8:  MOVLW  55
48FA:  MOVWF  FA7
48FC:  MOVLW  AA
48FE:  MOVWF  FA7
4900:  BSF    FA6.1
4902:  BTFSC  FA6.1
4904:  BRA    4902
4906:  BCF    FA6.2
4908:  MOVF   00,W
490A:  IORWF  FF2,F
....................       delay_ms(15); 
490C:  MOVLW  0F
490E:  MOVLB  2
4910:  MOVWF  x5B
4912:  MOVLB  0
4914:  CALL   0192
4918:  MOVLB  2
....................    } 
....................  
....................  if(gn!=3) 
491A:  MOVF   x4E,W
491C:  SUBLW  03
491E:  BZ    495C
....................    { 
....................       degisken4=0; 
4920:  MOVLB  0
4922:  CLRF   xA3
....................       write_eeprom(82,degisken4); 
4924:  MOVF   FF2,W
4926:  MOVWF  00
4928:  BCF    FF2.7
492A:  MOVLW  52
492C:  MOVWF  FA9
492E:  MOVFF  A3,FA8
4932:  BCF    FA6.6
4934:  BCF    FA6.7
4936:  BSF    FA6.2
4938:  MOVLB  F
493A:  MOVLW  55
493C:  MOVWF  FA7
493E:  MOVLW  AA
4940:  MOVWF  FA7
4942:  BSF    FA6.1
4944:  BTFSC  FA6.1
4946:  BRA    4944
4948:  BCF    FA6.2
494A:  MOVF   00,W
494C:  IORWF  FF2,F
....................       delay_ms(15); 
494E:  MOVLW  0F
4950:  MOVLB  2
4952:  MOVWF  x5B
4954:  MOVLB  0
4956:  CALL   0192
495A:  MOVLB  2
....................    } 
....................  
....................  if(gn!=4) 
495C:  MOVF   x4E,W
495E:  SUBLW  04
4960:  BZ    499E
....................    { 
....................       degisken5=0; 
4962:  MOVLB  0
4964:  CLRF   xA4
....................       write_eeprom(83,degisken5); 
4966:  MOVF   FF2,W
4968:  MOVWF  00
496A:  BCF    FF2.7
496C:  MOVLW  53
496E:  MOVWF  FA9
4970:  MOVFF  A4,FA8
4974:  BCF    FA6.6
4976:  BCF    FA6.7
4978:  BSF    FA6.2
497A:  MOVLB  F
497C:  MOVLW  55
497E:  MOVWF  FA7
4980:  MOVLW  AA
4982:  MOVWF  FA7
4984:  BSF    FA6.1
4986:  BTFSC  FA6.1
4988:  BRA    4986
498A:  BCF    FA6.2
498C:  MOVF   00,W
498E:  IORWF  FF2,F
....................       delay_ms(15); 
4990:  MOVLW  0F
4992:  MOVLB  2
4994:  MOVWF  x5B
4996:  MOVLB  0
4998:  CALL   0192
499C:  MOVLB  2
....................    } 
....................  
....................  if(gn!=5) 
499E:  MOVF   x4E,W
49A0:  SUBLW  05
49A2:  BZ    49E0
....................    { 
....................       degisken6=0; 
49A4:  MOVLB  0
49A6:  CLRF   xA5
....................       write_eeprom(84,degisken6); 
49A8:  MOVF   FF2,W
49AA:  MOVWF  00
49AC:  BCF    FF2.7
49AE:  MOVLW  54
49B0:  MOVWF  FA9
49B2:  MOVFF  A5,FA8
49B6:  BCF    FA6.6
49B8:  BCF    FA6.7
49BA:  BSF    FA6.2
49BC:  MOVLB  F
49BE:  MOVLW  55
49C0:  MOVWF  FA7
49C2:  MOVLW  AA
49C4:  MOVWF  FA7
49C6:  BSF    FA6.1
49C8:  BTFSC  FA6.1
49CA:  BRA    49C8
49CC:  BCF    FA6.2
49CE:  MOVF   00,W
49D0:  IORWF  FF2,F
....................       delay_ms(15); 
49D2:  MOVLW  0F
49D4:  MOVLB  2
49D6:  MOVWF  x5B
49D8:  MOVLB  0
49DA:  CALL   0192
49DE:  MOVLB  2
....................    } 
....................  
....................  if(gn!=6) 
49E0:  MOVF   x4E,W
49E2:  SUBLW  06
49E4:  BZ    4A20
....................    { 
....................       degisken7=0; 
49E6:  MOVLB  0
49E8:  CLRF   xA6
....................       write_eeprom(85,degisken7); 
49EA:  MOVF   FF2,W
49EC:  MOVWF  00
49EE:  BCF    FF2.7
49F0:  MOVLW  55
49F2:  MOVWF  FA9
49F4:  MOVFF  A6,FA8
49F8:  BCF    FA6.6
49FA:  BCF    FA6.7
49FC:  BSF    FA6.2
49FE:  MOVLB  F
4A00:  MOVWF  FA7
4A02:  MOVLW  AA
4A04:  MOVWF  FA7
4A06:  BSF    FA6.1
4A08:  BTFSC  FA6.1
4A0A:  BRA    4A08
4A0C:  BCF    FA6.2
4A0E:  MOVF   00,W
4A10:  IORWF  FF2,F
....................       delay_ms(15); 
4A12:  MOVLW  0F
4A14:  MOVLB  2
4A16:  MOVWF  x5B
4A18:  MOVLB  0
4A1A:  CALL   0192
4A1E:  MOVLB  2
....................    } 
....................  
....................  if(gn!=7) 
4A20:  MOVF   x4E,W
4A22:  SUBLW  07
4A24:  BZ    4A62
....................    { 
....................       degisken8=0; 
4A26:  MOVLB  0
4A28:  CLRF   xA7
....................       write_eeprom(86,degisken8); 
4A2A:  MOVF   FF2,W
4A2C:  MOVWF  00
4A2E:  BCF    FF2.7
4A30:  MOVLW  56
4A32:  MOVWF  FA9
4A34:  MOVFF  A7,FA8
4A38:  BCF    FA6.6
4A3A:  BCF    FA6.7
4A3C:  BSF    FA6.2
4A3E:  MOVLB  F
4A40:  MOVLW  55
4A42:  MOVWF  FA7
4A44:  MOVLW  AA
4A46:  MOVWF  FA7
4A48:  BSF    FA6.1
4A4A:  BTFSC  FA6.1
4A4C:  BRA    4A4A
4A4E:  BCF    FA6.2
4A50:  MOVF   00,W
4A52:  IORWF  FF2,F
....................       delay_ms(15); 
4A54:  MOVLW  0F
4A56:  MOVLB  2
4A58:  MOVWF  x5B
4A5A:  MOVLB  0
4A5C:  CALL   0192
4A60:  MOVLB  2
....................    } 
4A62:  MOVLB  0
4A64:  RETURN 0
.................... } 
....................  
.................... void ata(int t) 
.................... { 
....................   if(t==1) 
*
39DA:  MOVLB  2
39DC:  DECFSZ x4E,W
39DE:  BRA    3B58
....................   { 
....................    s1=read_eeprom(14);//baslangic saati 
39E0:  MOVFF  FF2,24F
39E4:  BCF    FF2.7
39E6:  MOVLW  0E
39E8:  MOVWF  FA9
39EA:  BCF    FA6.6
39EC:  BCF    FA6.7
39EE:  BSF    FA6.0
39F0:  MOVF   FA8,W
39F2:  BTFSC  x4F.7
39F4:  BSF    FF2.7
39F6:  CLRF   x37
39F8:  MOVWF  x36
....................    s1=s1*60; 
39FA:  MOVFF  237,252
39FE:  MOVFF  236,251
3A02:  CLRF   x54
3A04:  MOVLW  3C
3A06:  MOVWF  x53
3A08:  MOVLB  0
3A0A:  RCALL  39B8
3A0C:  MOVFF  02,237
3A10:  MOVFF  01,236
....................    s1=s1+read_eeprom(15);//s1+dakika 
3A14:  MOVFF  FF2,24F
3A18:  BCF    FF2.7
3A1A:  MOVLW  0F
3A1C:  MOVWF  FA9
3A1E:  BCF    FA6.6
3A20:  BCF    FA6.7
3A22:  BSF    FA6.0
3A24:  MOVF   FA8,W
3A26:  MOVLB  2
3A28:  BTFSC  x4F.7
3A2A:  BSF    FF2.7
3A2C:  ADDWF  x36,F
3A2E:  MOVLW  00
3A30:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(16);//bitis saati 
3A32:  MOVFF  FF2,24F
3A36:  BCF    FF2.7
3A38:  MOVLW  10
3A3A:  MOVWF  FA9
3A3C:  BCF    FA6.6
3A3E:  BCF    FA6.7
3A40:  BSF    FA6.0
3A42:  MOVF   FA8,W
3A44:  BTFSC  x4F.7
3A46:  BSF    FF2.7
3A48:  CLRF   x39
3A4A:  MOVWF  x38
....................    s2=s2*60; 
3A4C:  MOVFF  239,252
3A50:  MOVFF  238,251
3A54:  CLRF   x54
3A56:  MOVLW  3C
3A58:  MOVWF  x53
3A5A:  MOVLB  0
3A5C:  RCALL  39B8
3A5E:  MOVFF  02,239
3A62:  MOVFF  01,238
....................    s2=s2+read_eeprom(17);//bitis dakikasi 
3A66:  MOVFF  FF2,24F
3A6A:  BCF    FF2.7
3A6C:  MOVLW  11
3A6E:  MOVWF  FA9
3A70:  BCF    FA6.6
3A72:  BCF    FA6.7
3A74:  BSF    FA6.0
3A76:  MOVF   FA8,W
3A78:  MOVLB  2
3A7A:  BTFSC  x4F.7
3A7C:  BSF    FF2.7
3A7E:  ADDWF  x38,F
3A80:  MOVLW  00
3A82:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
3A84:  CLRF   x50
3A86:  MOVFF  244,24F
3A8A:  MOVFF  250,252
3A8E:  MOVFF  244,251
3A92:  CLRF   x54
3A94:  MOVLW  3C
3A96:  MOVWF  x53
3A98:  MOVLB  0
3A9A:  RCALL  39B8
3A9C:  MOVFF  02,23B
3AA0:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
3AA4:  CLRF   03
3AA6:  MOVLB  2
3AA8:  MOVF   x43,W
3AAA:  ADDWF  x3A,F
3AAC:  MOVF   03,W
3AAE:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(18);//baslangic saati 2 
3AB0:  MOVFF  FF2,24F
3AB4:  BCF    FF2.7
3AB6:  MOVLW  12
3AB8:  MOVWF  FA9
3ABA:  BCF    FA6.6
3ABC:  BCF    FA6.7
3ABE:  BSF    FA6.0
3AC0:  MOVF   FA8,W
3AC2:  BTFSC  x4F.7
3AC4:  BSF    FF2.7
3AC6:  CLRF   x3D
3AC8:  MOVWF  x3C
....................    s4=s4*60; 
3ACA:  MOVFF  23D,252
3ACE:  MOVFF  23C,251
3AD2:  CLRF   x54
3AD4:  MOVLW  3C
3AD6:  MOVWF  x53
3AD8:  MOVLB  0
3ADA:  RCALL  39B8
3ADC:  MOVFF  02,23D
3AE0:  MOVFF  01,23C
....................    s4=s4+read_eeprom(19); 
3AE4:  MOVFF  FF2,24F
3AE8:  BCF    FF2.7
3AEA:  MOVLW  13
3AEC:  MOVWF  FA9
3AEE:  BCF    FA6.6
3AF0:  BCF    FA6.7
3AF2:  BSF    FA6.0
3AF4:  MOVF   FA8,W
3AF6:  MOVLB  2
3AF8:  BTFSC  x4F.7
3AFA:  BSF    FF2.7
3AFC:  ADDWF  x3C,F
3AFE:  MOVLW  00
3B00:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(20);//bitis saati 2 
3B02:  MOVFF  FF2,24F
3B06:  BCF    FF2.7
3B08:  MOVLW  14
3B0A:  MOVWF  FA9
3B0C:  BCF    FA6.6
3B0E:  BCF    FA6.7
3B10:  BSF    FA6.0
3B12:  MOVF   FA8,W
3B14:  BTFSC  x4F.7
3B16:  BSF    FF2.7
3B18:  CLRF   x3F
3B1A:  MOVWF  x3E
....................    s5=s5*60; 
3B1C:  MOVFF  23F,252
3B20:  MOVFF  23E,251
3B24:  CLRF   x54
3B26:  MOVLW  3C
3B28:  MOVWF  x53
3B2A:  MOVLB  0
3B2C:  RCALL  39B8
3B2E:  MOVFF  02,23F
3B32:  MOVFF  01,23E
....................    s5=s5+read_eeprom(21); 
3B36:  MOVFF  FF2,24F
3B3A:  BCF    FF2.7
3B3C:  MOVLW  15
3B3E:  MOVWF  FA9
3B40:  BCF    FA6.6
3B42:  BCF    FA6.7
3B44:  BSF    FA6.0
3B46:  MOVF   FA8,W
3B48:  MOVLB  2
3B4A:  BTFSC  x4F.7
3B4C:  BSF    FF2.7
3B4E:  ADDWF  x3E,F
3B50:  MOVLW  00
3B52:  ADDWFC x3F,F
....................     
....................   } 
3B54:  GOTO   445C
....................     
....................   else if(t==2) 
3B58:  MOVF   x4E,W
3B5A:  SUBLW  02
3B5C:  BTFSS  FD8.2
3B5E:  BRA    3CD6
....................   { 
....................    s1=read_eeprom(22);//baslangic saati 
3B60:  MOVFF  FF2,24F
3B64:  BCF    FF2.7
3B66:  MOVLW  16
3B68:  MOVWF  FA9
3B6A:  BCF    FA6.6
3B6C:  BCF    FA6.7
3B6E:  BSF    FA6.0
3B70:  MOVF   FA8,W
3B72:  BTFSC  x4F.7
3B74:  BSF    FF2.7
3B76:  CLRF   x37
3B78:  MOVWF  x36
....................    s1=s1*60; 
3B7A:  MOVFF  237,252
3B7E:  MOVFF  236,251
3B82:  CLRF   x54
3B84:  MOVLW  3C
3B86:  MOVWF  x53
3B88:  MOVLB  0
3B8A:  RCALL  39B8
3B8C:  MOVFF  02,237
3B90:  MOVFF  01,236
....................    s1=s1+read_eeprom(23);//s1+dakika 
3B94:  MOVFF  FF2,24F
3B98:  BCF    FF2.7
3B9A:  MOVLW  17
3B9C:  MOVWF  FA9
3B9E:  BCF    FA6.6
3BA0:  BCF    FA6.7
3BA2:  BSF    FA6.0
3BA4:  MOVF   FA8,W
3BA6:  MOVLB  2
3BA8:  BTFSC  x4F.7
3BAA:  BSF    FF2.7
3BAC:  ADDWF  x36,F
3BAE:  MOVLW  00
3BB0:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(24);//bitis saati 
3BB2:  MOVFF  FF2,24F
3BB6:  BCF    FF2.7
3BB8:  MOVLW  18
3BBA:  MOVWF  FA9
3BBC:  BCF    FA6.6
3BBE:  BCF    FA6.7
3BC0:  BSF    FA6.0
3BC2:  MOVF   FA8,W
3BC4:  BTFSC  x4F.7
3BC6:  BSF    FF2.7
3BC8:  CLRF   x39
3BCA:  MOVWF  x38
....................    s2=s2*60; 
3BCC:  MOVFF  239,252
3BD0:  MOVFF  238,251
3BD4:  CLRF   x54
3BD6:  MOVLW  3C
3BD8:  MOVWF  x53
3BDA:  MOVLB  0
3BDC:  RCALL  39B8
3BDE:  MOVFF  02,239
3BE2:  MOVFF  01,238
....................    s2=s2+read_eeprom(25);//bitis dakikasi 
3BE6:  MOVFF  FF2,24F
3BEA:  BCF    FF2.7
3BEC:  MOVLW  19
3BEE:  MOVWF  FA9
3BF0:  BCF    FA6.6
3BF2:  BCF    FA6.7
3BF4:  BSF    FA6.0
3BF6:  MOVF   FA8,W
3BF8:  MOVLB  2
3BFA:  BTFSC  x4F.7
3BFC:  BSF    FF2.7
3BFE:  ADDWF  x38,F
3C00:  MOVLW  00
3C02:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
3C04:  CLRF   x50
3C06:  MOVFF  244,24F
3C0A:  MOVFF  250,252
3C0E:  MOVFF  244,251
3C12:  CLRF   x54
3C14:  MOVLW  3C
3C16:  MOVWF  x53
3C18:  MOVLB  0
3C1A:  RCALL  39B8
3C1C:  MOVFF  02,23B
3C20:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
3C24:  CLRF   03
3C26:  MOVLB  2
3C28:  MOVF   x43,W
3C2A:  ADDWF  x3A,F
3C2C:  MOVF   03,W
3C2E:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(26);//baslangic saati 2 
3C30:  MOVFF  FF2,24F
3C34:  BCF    FF2.7
3C36:  MOVLW  1A
3C38:  MOVWF  FA9
3C3A:  BCF    FA6.6
3C3C:  BCF    FA6.7
3C3E:  BSF    FA6.0
3C40:  MOVF   FA8,W
3C42:  BTFSC  x4F.7
3C44:  BSF    FF2.7
3C46:  CLRF   x3D
3C48:  MOVWF  x3C
....................    s4=s4*60; 
3C4A:  MOVFF  23D,252
3C4E:  MOVFF  23C,251
3C52:  CLRF   x54
3C54:  MOVLW  3C
3C56:  MOVWF  x53
3C58:  MOVLB  0
3C5A:  RCALL  39B8
3C5C:  MOVFF  02,23D
3C60:  MOVFF  01,23C
....................    s4=s4+read_eeprom(27); 
3C64:  MOVFF  FF2,24F
3C68:  BCF    FF2.7
3C6A:  MOVLW  1B
3C6C:  MOVWF  FA9
3C6E:  BCF    FA6.6
3C70:  BCF    FA6.7
3C72:  BSF    FA6.0
3C74:  MOVF   FA8,W
3C76:  MOVLB  2
3C78:  BTFSC  x4F.7
3C7A:  BSF    FF2.7
3C7C:  ADDWF  x3C,F
3C7E:  MOVLW  00
3C80:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(28);//bitis saati 2 
3C82:  MOVFF  FF2,24F
3C86:  BCF    FF2.7
3C88:  MOVLW  1C
3C8A:  MOVWF  FA9
3C8C:  BCF    FA6.6
3C8E:  BCF    FA6.7
3C90:  BSF    FA6.0
3C92:  MOVF   FA8,W
3C94:  BTFSC  x4F.7
3C96:  BSF    FF2.7
3C98:  CLRF   x3F
3C9A:  MOVWF  x3E
....................    s5=s5*60; 
3C9C:  MOVFF  23F,252
3CA0:  MOVFF  23E,251
3CA4:  CLRF   x54
3CA6:  MOVLW  3C
3CA8:  MOVWF  x53
3CAA:  MOVLB  0
3CAC:  RCALL  39B8
3CAE:  MOVFF  02,23F
3CB2:  MOVFF  01,23E
....................    s5=s5+read_eeprom(29); 
3CB6:  MOVFF  FF2,24F
3CBA:  BCF    FF2.7
3CBC:  MOVLW  1D
3CBE:  MOVWF  FA9
3CC0:  BCF    FA6.6
3CC2:  BCF    FA6.7
3CC4:  BSF    FA6.0
3CC6:  MOVF   FA8,W
3CC8:  MOVLB  2
3CCA:  BTFSC  x4F.7
3CCC:  BSF    FF2.7
3CCE:  ADDWF  x3E,F
3CD0:  MOVLW  00
3CD2:  ADDWFC x3F,F
....................   } 
3CD4:  BRA    445C
....................   else if(t==3) 
3CD6:  MOVF   x4E,W
3CD8:  SUBLW  03
3CDA:  BTFSS  FD8.2
3CDC:  BRA    3E54
....................   { 
....................    s1=read_eeprom(30);//baslangic saati 
3CDE:  MOVFF  FF2,24F
3CE2:  BCF    FF2.7
3CE4:  MOVLW  1E
3CE6:  MOVWF  FA9
3CE8:  BCF    FA6.6
3CEA:  BCF    FA6.7
3CEC:  BSF    FA6.0
3CEE:  MOVF   FA8,W
3CF0:  BTFSC  x4F.7
3CF2:  BSF    FF2.7
3CF4:  CLRF   x37
3CF6:  MOVWF  x36
....................    s1=s1*60; 
3CF8:  MOVFF  237,252
3CFC:  MOVFF  236,251
3D00:  CLRF   x54
3D02:  MOVLW  3C
3D04:  MOVWF  x53
3D06:  MOVLB  0
3D08:  RCALL  39B8
3D0A:  MOVFF  02,237
3D0E:  MOVFF  01,236
....................    s1=s1+read_eeprom(31);//s1+dakika 
3D12:  MOVFF  FF2,24F
3D16:  BCF    FF2.7
3D18:  MOVLW  1F
3D1A:  MOVWF  FA9
3D1C:  BCF    FA6.6
3D1E:  BCF    FA6.7
3D20:  BSF    FA6.0
3D22:  MOVF   FA8,W
3D24:  MOVLB  2
3D26:  BTFSC  x4F.7
3D28:  BSF    FF2.7
3D2A:  ADDWF  x36,F
3D2C:  MOVLW  00
3D2E:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(32);//bitis saati 
3D30:  MOVFF  FF2,24F
3D34:  BCF    FF2.7
3D36:  MOVLW  20
3D38:  MOVWF  FA9
3D3A:  BCF    FA6.6
3D3C:  BCF    FA6.7
3D3E:  BSF    FA6.0
3D40:  MOVF   FA8,W
3D42:  BTFSC  x4F.7
3D44:  BSF    FF2.7
3D46:  CLRF   x39
3D48:  MOVWF  x38
....................    s2=s2*60; 
3D4A:  MOVFF  239,252
3D4E:  MOVFF  238,251
3D52:  CLRF   x54
3D54:  MOVLW  3C
3D56:  MOVWF  x53
3D58:  MOVLB  0
3D5A:  RCALL  39B8
3D5C:  MOVFF  02,239
3D60:  MOVFF  01,238
....................    s2=s2+read_eeprom(33);//bitis dakikasi 
3D64:  MOVFF  FF2,24F
3D68:  BCF    FF2.7
3D6A:  MOVLW  21
3D6C:  MOVWF  FA9
3D6E:  BCF    FA6.6
3D70:  BCF    FA6.7
3D72:  BSF    FA6.0
3D74:  MOVF   FA8,W
3D76:  MOVLB  2
3D78:  BTFSC  x4F.7
3D7A:  BSF    FF2.7
3D7C:  ADDWF  x38,F
3D7E:  MOVLW  00
3D80:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
3D82:  CLRF   x50
3D84:  MOVFF  244,24F
3D88:  MOVFF  250,252
3D8C:  MOVFF  244,251
3D90:  CLRF   x54
3D92:  MOVLW  3C
3D94:  MOVWF  x53
3D96:  MOVLB  0
3D98:  RCALL  39B8
3D9A:  MOVFF  02,23B
3D9E:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
3DA2:  CLRF   03
3DA4:  MOVLB  2
3DA6:  MOVF   x43,W
3DA8:  ADDWF  x3A,F
3DAA:  MOVF   03,W
3DAC:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(34);//baslangic saati 2 
3DAE:  MOVFF  FF2,24F
3DB2:  BCF    FF2.7
3DB4:  MOVLW  22
3DB6:  MOVWF  FA9
3DB8:  BCF    FA6.6
3DBA:  BCF    FA6.7
3DBC:  BSF    FA6.0
3DBE:  MOVF   FA8,W
3DC0:  BTFSC  x4F.7
3DC2:  BSF    FF2.7
3DC4:  CLRF   x3D
3DC6:  MOVWF  x3C
....................    s4=s4*60; 
3DC8:  MOVFF  23D,252
3DCC:  MOVFF  23C,251
3DD0:  CLRF   x54
3DD2:  MOVLW  3C
3DD4:  MOVWF  x53
3DD6:  MOVLB  0
3DD8:  RCALL  39B8
3DDA:  MOVFF  02,23D
3DDE:  MOVFF  01,23C
....................    s4=s4+read_eeprom(35); 
3DE2:  MOVFF  FF2,24F
3DE6:  BCF    FF2.7
3DE8:  MOVLW  23
3DEA:  MOVWF  FA9
3DEC:  BCF    FA6.6
3DEE:  BCF    FA6.7
3DF0:  BSF    FA6.0
3DF2:  MOVF   FA8,W
3DF4:  MOVLB  2
3DF6:  BTFSC  x4F.7
3DF8:  BSF    FF2.7
3DFA:  ADDWF  x3C,F
3DFC:  MOVLW  00
3DFE:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(36);//bitis saati 2 
3E00:  MOVFF  FF2,24F
3E04:  BCF    FF2.7
3E06:  MOVLW  24
3E08:  MOVWF  FA9
3E0A:  BCF    FA6.6
3E0C:  BCF    FA6.7
3E0E:  BSF    FA6.0
3E10:  MOVF   FA8,W
3E12:  BTFSC  x4F.7
3E14:  BSF    FF2.7
3E16:  CLRF   x3F
3E18:  MOVWF  x3E
....................    s5=s5*60; 
3E1A:  MOVFF  23F,252
3E1E:  MOVFF  23E,251
3E22:  CLRF   x54
3E24:  MOVLW  3C
3E26:  MOVWF  x53
3E28:  MOVLB  0
3E2A:  RCALL  39B8
3E2C:  MOVFF  02,23F
3E30:  MOVFF  01,23E
....................    s5=s5+read_eeprom(37); 
3E34:  MOVFF  FF2,24F
3E38:  BCF    FF2.7
3E3A:  MOVLW  25
3E3C:  MOVWF  FA9
3E3E:  BCF    FA6.6
3E40:  BCF    FA6.7
3E42:  BSF    FA6.0
3E44:  MOVF   FA8,W
3E46:  MOVLB  2
3E48:  BTFSC  x4F.7
3E4A:  BSF    FF2.7
3E4C:  ADDWF  x3E,F
3E4E:  MOVLW  00
3E50:  ADDWFC x3F,F
....................   } 
3E52:  BRA    445C
....................     
....................   else if(t==4) 
3E54:  MOVF   x4E,W
3E56:  SUBLW  04
3E58:  BTFSS  FD8.2
3E5A:  BRA    3FD2
....................   { 
....................    s1=read_eeprom(38);//baslangic saati 
3E5C:  MOVFF  FF2,24F
3E60:  BCF    FF2.7
3E62:  MOVLW  26
3E64:  MOVWF  FA9
3E66:  BCF    FA6.6
3E68:  BCF    FA6.7
3E6A:  BSF    FA6.0
3E6C:  MOVF   FA8,W
3E6E:  BTFSC  x4F.7
3E70:  BSF    FF2.7
3E72:  CLRF   x37
3E74:  MOVWF  x36
....................    s1=s1*60; 
3E76:  MOVFF  237,252
3E7A:  MOVFF  236,251
3E7E:  CLRF   x54
3E80:  MOVLW  3C
3E82:  MOVWF  x53
3E84:  MOVLB  0
3E86:  RCALL  39B8
3E88:  MOVFF  02,237
3E8C:  MOVFF  01,236
....................    s1=s1+read_eeprom(39);//s1+dakika 
3E90:  MOVFF  FF2,24F
3E94:  BCF    FF2.7
3E96:  MOVLW  27
3E98:  MOVWF  FA9
3E9A:  BCF    FA6.6
3E9C:  BCF    FA6.7
3E9E:  BSF    FA6.0
3EA0:  MOVF   FA8,W
3EA2:  MOVLB  2
3EA4:  BTFSC  x4F.7
3EA6:  BSF    FF2.7
3EA8:  ADDWF  x36,F
3EAA:  MOVLW  00
3EAC:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(40);//bitis saati 
3EAE:  MOVFF  FF2,24F
3EB2:  BCF    FF2.7
3EB4:  MOVLW  28
3EB6:  MOVWF  FA9
3EB8:  BCF    FA6.6
3EBA:  BCF    FA6.7
3EBC:  BSF    FA6.0
3EBE:  MOVF   FA8,W
3EC0:  BTFSC  x4F.7
3EC2:  BSF    FF2.7
3EC4:  CLRF   x39
3EC6:  MOVWF  x38
....................    s2=s2*60; 
3EC8:  MOVFF  239,252
3ECC:  MOVFF  238,251
3ED0:  CLRF   x54
3ED2:  MOVLW  3C
3ED4:  MOVWF  x53
3ED6:  MOVLB  0
3ED8:  RCALL  39B8
3EDA:  MOVFF  02,239
3EDE:  MOVFF  01,238
....................    s2=s2+read_eeprom(41);//bitis dakikasi 
3EE2:  MOVFF  FF2,24F
3EE6:  BCF    FF2.7
3EE8:  MOVLW  29
3EEA:  MOVWF  FA9
3EEC:  BCF    FA6.6
3EEE:  BCF    FA6.7
3EF0:  BSF    FA6.0
3EF2:  MOVF   FA8,W
3EF4:  MOVLB  2
3EF6:  BTFSC  x4F.7
3EF8:  BSF    FF2.7
3EFA:  ADDWF  x38,F
3EFC:  MOVLW  00
3EFE:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
3F00:  CLRF   x50
3F02:  MOVFF  244,24F
3F06:  MOVFF  250,252
3F0A:  MOVFF  244,251
3F0E:  CLRF   x54
3F10:  MOVLW  3C
3F12:  MOVWF  x53
3F14:  MOVLB  0
3F16:  RCALL  39B8
3F18:  MOVFF  02,23B
3F1C:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
3F20:  CLRF   03
3F22:  MOVLB  2
3F24:  MOVF   x43,W
3F26:  ADDWF  x3A,F
3F28:  MOVF   03,W
3F2A:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(42);//baslangic saati 2 
3F2C:  MOVFF  FF2,24F
3F30:  BCF    FF2.7
3F32:  MOVLW  2A
3F34:  MOVWF  FA9
3F36:  BCF    FA6.6
3F38:  BCF    FA6.7
3F3A:  BSF    FA6.0
3F3C:  MOVF   FA8,W
3F3E:  BTFSC  x4F.7
3F40:  BSF    FF2.7
3F42:  CLRF   x3D
3F44:  MOVWF  x3C
....................    s4=s4*60; 
3F46:  MOVFF  23D,252
3F4A:  MOVFF  23C,251
3F4E:  CLRF   x54
3F50:  MOVLW  3C
3F52:  MOVWF  x53
3F54:  MOVLB  0
3F56:  RCALL  39B8
3F58:  MOVFF  02,23D
3F5C:  MOVFF  01,23C
....................    s4=s4+read_eeprom(43); 
3F60:  MOVFF  FF2,24F
3F64:  BCF    FF2.7
3F66:  MOVLW  2B
3F68:  MOVWF  FA9
3F6A:  BCF    FA6.6
3F6C:  BCF    FA6.7
3F6E:  BSF    FA6.0
3F70:  MOVF   FA8,W
3F72:  MOVLB  2
3F74:  BTFSC  x4F.7
3F76:  BSF    FF2.7
3F78:  ADDWF  x3C,F
3F7A:  MOVLW  00
3F7C:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(44);//bitis saati 2 
3F7E:  MOVFF  FF2,24F
3F82:  BCF    FF2.7
3F84:  MOVLW  2C
3F86:  MOVWF  FA9
3F88:  BCF    FA6.6
3F8A:  BCF    FA6.7
3F8C:  BSF    FA6.0
3F8E:  MOVF   FA8,W
3F90:  BTFSC  x4F.7
3F92:  BSF    FF2.7
3F94:  CLRF   x3F
3F96:  MOVWF  x3E
....................    s5=s5*60; 
3F98:  MOVFF  23F,252
3F9C:  MOVFF  23E,251
3FA0:  CLRF   x54
3FA2:  MOVLW  3C
3FA4:  MOVWF  x53
3FA6:  MOVLB  0
3FA8:  RCALL  39B8
3FAA:  MOVFF  02,23F
3FAE:  MOVFF  01,23E
....................    s5=s5+read_eeprom(45); 
3FB2:  MOVFF  FF2,24F
3FB6:  BCF    FF2.7
3FB8:  MOVLW  2D
3FBA:  MOVWF  FA9
3FBC:  BCF    FA6.6
3FBE:  BCF    FA6.7
3FC0:  BSF    FA6.0
3FC2:  MOVF   FA8,W
3FC4:  MOVLB  2
3FC6:  BTFSC  x4F.7
3FC8:  BSF    FF2.7
3FCA:  ADDWF  x3E,F
3FCC:  MOVLW  00
3FCE:  ADDWFC x3F,F
....................   } 
3FD0:  BRA    445C
....................   else if(t==5) 
3FD2:  MOVF   x4E,W
3FD4:  SUBLW  05
3FD6:  BTFSS  FD8.2
3FD8:  BRA    4150
....................   { 
....................    s1=read_eeprom(46);//baslangic saati 
3FDA:  MOVFF  FF2,24F
3FDE:  BCF    FF2.7
3FE0:  MOVLW  2E
3FE2:  MOVWF  FA9
3FE4:  BCF    FA6.6
3FE6:  BCF    FA6.7
3FE8:  BSF    FA6.0
3FEA:  MOVF   FA8,W
3FEC:  BTFSC  x4F.7
3FEE:  BSF    FF2.7
3FF0:  CLRF   x37
3FF2:  MOVWF  x36
....................    s1=s1*60; 
3FF4:  MOVFF  237,252
3FF8:  MOVFF  236,251
3FFC:  CLRF   x54
3FFE:  MOVLW  3C
4000:  MOVWF  x53
4002:  MOVLB  0
4004:  RCALL  39B8
4006:  MOVFF  02,237
400A:  MOVFF  01,236
....................    s1=s1+read_eeprom(47);//s1+dakika 
400E:  MOVFF  FF2,24F
4012:  BCF    FF2.7
4014:  MOVLW  2F
4016:  MOVWF  FA9
4018:  BCF    FA6.6
401A:  BCF    FA6.7
401C:  BSF    FA6.0
401E:  MOVF   FA8,W
4020:  MOVLB  2
4022:  BTFSC  x4F.7
4024:  BSF    FF2.7
4026:  ADDWF  x36,F
4028:  MOVLW  00
402A:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(48);//bitis saati 
402C:  MOVFF  FF2,24F
4030:  BCF    FF2.7
4032:  MOVLW  30
4034:  MOVWF  FA9
4036:  BCF    FA6.6
4038:  BCF    FA6.7
403A:  BSF    FA6.0
403C:  MOVF   FA8,W
403E:  BTFSC  x4F.7
4040:  BSF    FF2.7
4042:  CLRF   x39
4044:  MOVWF  x38
....................    s2=s2*60; 
4046:  MOVFF  239,252
404A:  MOVFF  238,251
404E:  CLRF   x54
4050:  MOVLW  3C
4052:  MOVWF  x53
4054:  MOVLB  0
4056:  RCALL  39B8
4058:  MOVFF  02,239
405C:  MOVFF  01,238
....................    s2=s2+read_eeprom(49);//bitis dakikasi 
4060:  MOVFF  FF2,24F
4064:  BCF    FF2.7
4066:  MOVLW  31
4068:  MOVWF  FA9
406A:  BCF    FA6.6
406C:  BCF    FA6.7
406E:  BSF    FA6.0
4070:  MOVF   FA8,W
4072:  MOVLB  2
4074:  BTFSC  x4F.7
4076:  BSF    FF2.7
4078:  ADDWF  x38,F
407A:  MOVLW  00
407C:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
407E:  CLRF   x50
4080:  MOVFF  244,24F
4084:  MOVFF  250,252
4088:  MOVFF  244,251
408C:  CLRF   x54
408E:  MOVLW  3C
4090:  MOVWF  x53
4092:  MOVLB  0
4094:  RCALL  39B8
4096:  MOVFF  02,23B
409A:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
409E:  CLRF   03
40A0:  MOVLB  2
40A2:  MOVF   x43,W
40A4:  ADDWF  x3A,F
40A6:  MOVF   03,W
40A8:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(50);//baslangic saati 2 
40AA:  MOVFF  FF2,24F
40AE:  BCF    FF2.7
40B0:  MOVLW  32
40B2:  MOVWF  FA9
40B4:  BCF    FA6.6
40B6:  BCF    FA6.7
40B8:  BSF    FA6.0
40BA:  MOVF   FA8,W
40BC:  BTFSC  x4F.7
40BE:  BSF    FF2.7
40C0:  CLRF   x3D
40C2:  MOVWF  x3C
....................    s4=s4*60; 
40C4:  MOVFF  23D,252
40C8:  MOVFF  23C,251
40CC:  CLRF   x54
40CE:  MOVLW  3C
40D0:  MOVWF  x53
40D2:  MOVLB  0
40D4:  RCALL  39B8
40D6:  MOVFF  02,23D
40DA:  MOVFF  01,23C
....................    s4=s4+read_eeprom(51); 
40DE:  MOVFF  FF2,24F
40E2:  BCF    FF2.7
40E4:  MOVLW  33
40E6:  MOVWF  FA9
40E8:  BCF    FA6.6
40EA:  BCF    FA6.7
40EC:  BSF    FA6.0
40EE:  MOVF   FA8,W
40F0:  MOVLB  2
40F2:  BTFSC  x4F.7
40F4:  BSF    FF2.7
40F6:  ADDWF  x3C,F
40F8:  MOVLW  00
40FA:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(52);//bitis saati 2 
40FC:  MOVFF  FF2,24F
4100:  BCF    FF2.7
4102:  MOVLW  34
4104:  MOVWF  FA9
4106:  BCF    FA6.6
4108:  BCF    FA6.7
410A:  BSF    FA6.0
410C:  MOVF   FA8,W
410E:  BTFSC  x4F.7
4110:  BSF    FF2.7
4112:  CLRF   x3F
4114:  MOVWF  x3E
....................    s5=s5*60; 
4116:  MOVFF  23F,252
411A:  MOVFF  23E,251
411E:  CLRF   x54
4120:  MOVLW  3C
4122:  MOVWF  x53
4124:  MOVLB  0
4126:  RCALL  39B8
4128:  MOVFF  02,23F
412C:  MOVFF  01,23E
....................    s5=s5+read_eeprom(53); 
4130:  MOVFF  FF2,24F
4134:  BCF    FF2.7
4136:  MOVLW  35
4138:  MOVWF  FA9
413A:  BCF    FA6.6
413C:  BCF    FA6.7
413E:  BSF    FA6.0
4140:  MOVF   FA8,W
4142:  MOVLB  2
4144:  BTFSC  x4F.7
4146:  BSF    FF2.7
4148:  ADDWF  x3E,F
414A:  MOVLW  00
414C:  ADDWFC x3F,F
....................   } 
414E:  BRA    445C
....................   else if(t==6) 
4150:  MOVF   x4E,W
4152:  SUBLW  06
4154:  BTFSS  FD8.2
4156:  BRA    42D6
....................   { 
....................    s1=read_eeprom(54);//baslangic saati 
4158:  MOVFF  FF2,24F
415C:  BCF    FF2.7
415E:  MOVLW  36
4160:  MOVWF  FA9
4162:  BCF    FA6.6
4164:  BCF    FA6.7
4166:  BSF    FA6.0
4168:  MOVF   FA8,W
416A:  BTFSC  x4F.7
416C:  BSF    FF2.7
416E:  CLRF   x37
4170:  MOVWF  x36
....................    s1=s1*60; 
4172:  MOVFF  237,252
4176:  MOVFF  236,251
417A:  CLRF   x54
417C:  MOVLW  3C
417E:  MOVWF  x53
4180:  MOVLB  0
4182:  RCALL  39B8
4184:  MOVFF  02,237
4188:  MOVFF  01,236
....................    s1=s1+read_eeprom(55);//s1+dakika 
418C:  MOVFF  FF2,24F
4190:  BCF    FF2.7
4192:  MOVLW  37
4194:  MOVWF  FA9
4196:  BCF    FA6.6
4198:  BCF    FA6.7
419A:  BSF    FA6.0
419C:  MOVF   FA8,W
419E:  MOVLB  2
41A0:  BTFSC  x4F.7
41A2:  BSF    FF2.7
41A4:  ADDWF  x36,F
41A6:  MOVLW  00
41A8:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(56);//bitis saati 
41AA:  MOVFF  FF2,24F
41AE:  BCF    FF2.7
41B0:  MOVLW  38
41B2:  MOVWF  FA9
41B4:  BCF    FA6.6
41B6:  BCF    FA6.7
41B8:  BSF    FA6.0
41BA:  MOVF   FA8,W
41BC:  BTFSC  x4F.7
41BE:  BSF    FF2.7
41C0:  CLRF   x39
41C2:  MOVWF  x38
....................    s2=s2*60; 
41C4:  MOVFF  239,252
41C8:  MOVFF  238,251
41CC:  CLRF   x54
41CE:  MOVLW  3C
41D0:  MOVWF  x53
41D2:  MOVLB  0
41D4:  CALL   39B8
41D8:  MOVFF  02,239
41DC:  MOVFF  01,238
....................    s2=s2+read_eeprom(57);//bitis dakikasi 
41E0:  MOVFF  FF2,24F
41E4:  BCF    FF2.7
41E6:  MOVLW  39
41E8:  MOVWF  FA9
41EA:  BCF    FA6.6
41EC:  BCF    FA6.7
41EE:  BSF    FA6.0
41F0:  MOVF   FA8,W
41F2:  MOVLB  2
41F4:  BTFSC  x4F.7
41F6:  BSF    FF2.7
41F8:  ADDWF  x38,F
41FA:  MOVLW  00
41FC:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
41FE:  CLRF   x50
4200:  MOVFF  244,24F
4204:  MOVFF  250,252
4208:  MOVFF  244,251
420C:  CLRF   x54
420E:  MOVLW  3C
4210:  MOVWF  x53
4212:  MOVLB  0
4214:  CALL   39B8
4218:  MOVFF  02,23B
421C:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
4220:  CLRF   03
4222:  MOVLB  2
4224:  MOVF   x43,W
4226:  ADDWF  x3A,F
4228:  MOVF   03,W
422A:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(58);//baslangic saati 2 
422C:  MOVFF  FF2,24F
4230:  BCF    FF2.7
4232:  MOVLW  3A
4234:  MOVWF  FA9
4236:  BCF    FA6.6
4238:  BCF    FA6.7
423A:  BSF    FA6.0
423C:  MOVF   FA8,W
423E:  BTFSC  x4F.7
4240:  BSF    FF2.7
4242:  CLRF   x3D
4244:  MOVWF  x3C
....................    s4=s4*60; 
4246:  MOVFF  23D,252
424A:  MOVFF  23C,251
424E:  CLRF   x54
4250:  MOVLW  3C
4252:  MOVWF  x53
4254:  MOVLB  0
4256:  CALL   39B8
425A:  MOVFF  02,23D
425E:  MOVFF  01,23C
....................    s4=s4+read_eeprom(59); 
4262:  MOVFF  FF2,24F
4266:  BCF    FF2.7
4268:  MOVLW  3B
426A:  MOVWF  FA9
426C:  BCF    FA6.6
426E:  BCF    FA6.7
4270:  BSF    FA6.0
4272:  MOVF   FA8,W
4274:  MOVLB  2
4276:  BTFSC  x4F.7
4278:  BSF    FF2.7
427A:  ADDWF  x3C,F
427C:  MOVLW  00
427E:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(60);//bitis saati 2 
4280:  MOVFF  FF2,24F
4284:  BCF    FF2.7
4286:  MOVLW  3C
4288:  MOVWF  FA9
428A:  BCF    FA6.6
428C:  BCF    FA6.7
428E:  BSF    FA6.0
4290:  MOVF   FA8,W
4292:  BTFSC  x4F.7
4294:  BSF    FF2.7
4296:  CLRF   x3F
4298:  MOVWF  x3E
....................    s5=s5*60; 
429A:  MOVFF  23F,252
429E:  MOVFF  23E,251
42A2:  CLRF   x54
42A4:  MOVLW  3C
42A6:  MOVWF  x53
42A8:  MOVLB  0
42AA:  CALL   39B8
42AE:  MOVFF  02,23F
42B2:  MOVFF  01,23E
....................    s5=s5+read_eeprom(61); 
42B6:  MOVFF  FF2,24F
42BA:  BCF    FF2.7
42BC:  MOVLW  3D
42BE:  MOVWF  FA9
42C0:  BCF    FA6.6
42C2:  BCF    FA6.7
42C4:  BSF    FA6.0
42C6:  MOVF   FA8,W
42C8:  MOVLB  2
42CA:  BTFSC  x4F.7
42CC:  BSF    FF2.7
42CE:  ADDWF  x3E,F
42D0:  MOVLW  00
42D2:  ADDWFC x3F,F
....................   } 
42D4:  BRA    445C
....................   else if(t==7) 
42D6:  MOVF   x4E,W
42D8:  SUBLW  07
42DA:  BTFSS  FD8.2
42DC:  BRA    445C
....................   { 
....................    s1=read_eeprom(62);//baslangic saati 
42DE:  MOVFF  FF2,24F
42E2:  BCF    FF2.7
42E4:  MOVLW  3E
42E6:  MOVWF  FA9
42E8:  BCF    FA6.6
42EA:  BCF    FA6.7
42EC:  BSF    FA6.0
42EE:  MOVF   FA8,W
42F0:  BTFSC  x4F.7
42F2:  BSF    FF2.7
42F4:  CLRF   x37
42F6:  MOVWF  x36
....................    s1=s1*60; 
42F8:  MOVFF  237,252
42FC:  MOVFF  236,251
4300:  CLRF   x54
4302:  MOVLW  3C
4304:  MOVWF  x53
4306:  MOVLB  0
4308:  CALL   39B8
430C:  MOVFF  02,237
4310:  MOVFF  01,236
....................    s1=s1+read_eeprom(63);//s1+dakika 
4314:  MOVFF  FF2,24F
4318:  BCF    FF2.7
431A:  MOVLW  3F
431C:  MOVWF  FA9
431E:  BCF    FA6.6
4320:  BCF    FA6.7
4322:  BSF    FA6.0
4324:  MOVF   FA8,W
4326:  MOVLB  2
4328:  BTFSC  x4F.7
432A:  BSF    FF2.7
432C:  ADDWF  x36,F
432E:  MOVLW  00
4330:  ADDWFC x37,F
....................     
....................    s2=read_eeprom(64);//bitis saati 
4332:  MOVFF  FF2,24F
4336:  BCF    FF2.7
4338:  MOVLW  40
433A:  MOVWF  FA9
433C:  BCF    FA6.6
433E:  BCF    FA6.7
4340:  BSF    FA6.0
4342:  MOVF   FA8,W
4344:  BTFSC  x4F.7
4346:  BSF    FF2.7
4348:  CLRF   x39
434A:  MOVWF  x38
....................    s2=s2*60; 
434C:  MOVFF  239,252
4350:  MOVFF  238,251
4354:  CLRF   x54
4356:  MOVLW  3C
4358:  MOVWF  x53
435A:  MOVLB  0
435C:  CALL   39B8
4360:  MOVFF  02,239
4364:  MOVFF  01,238
....................    s2=s2+read_eeprom(65);//bitis dakikasi 
4368:  MOVFF  FF2,24F
436C:  BCF    FF2.7
436E:  MOVLW  41
4370:  MOVWF  FA9
4372:  BCF    FA6.6
4374:  BCF    FA6.7
4376:  BSF    FA6.0
4378:  MOVF   FA8,W
437A:  MOVLB  2
437C:  BTFSC  x4F.7
437E:  BSF    FF2.7
4380:  ADDWF  x38,F
4382:  MOVLW  00
4384:  ADDWFC x39,F
....................     
....................    s3=(int16)saat*60;//RTC SAAT 
4386:  CLRF   x50
4388:  MOVFF  244,24F
438C:  MOVFF  250,252
4390:  MOVFF  244,251
4394:  CLRF   x54
4396:  MOVLW  3C
4398:  MOVWF  x53
439A:  MOVLB  0
439C:  CALL   39B8
43A0:  MOVFF  02,23B
43A4:  MOVFF  01,23A
....................    s3=s3+(int16)dakika;//RTC DAKIKA 
43A8:  CLRF   03
43AA:  MOVLB  2
43AC:  MOVF   x43,W
43AE:  ADDWF  x3A,F
43B0:  MOVF   03,W
43B2:  ADDWFC x3B,F
....................     
....................    s4=read_eeprom(66);//baslangic saati 2 
43B4:  MOVFF  FF2,24F
43B8:  BCF    FF2.7
43BA:  MOVLW  42
43BC:  MOVWF  FA9
43BE:  BCF    FA6.6
43C0:  BCF    FA6.7
43C2:  BSF    FA6.0
43C4:  MOVF   FA8,W
43C6:  BTFSC  x4F.7
43C8:  BSF    FF2.7
43CA:  CLRF   x3D
43CC:  MOVWF  x3C
....................    s4=s4*60; 
43CE:  MOVFF  23D,252
43D2:  MOVFF  23C,251
43D6:  CLRF   x54
43D8:  MOVLW  3C
43DA:  MOVWF  x53
43DC:  MOVLB  0
43DE:  CALL   39B8
43E2:  MOVFF  02,23D
43E6:  MOVFF  01,23C
....................    s4=s4+read_eeprom(67); 
43EA:  MOVFF  FF2,24F
43EE:  BCF    FF2.7
43F0:  MOVLW  43
43F2:  MOVWF  FA9
43F4:  BCF    FA6.6
43F6:  BCF    FA6.7
43F8:  BSF    FA6.0
43FA:  MOVF   FA8,W
43FC:  MOVLB  2
43FE:  BTFSC  x4F.7
4400:  BSF    FF2.7
4402:  ADDWF  x3C,F
4404:  MOVLW  00
4406:  ADDWFC x3D,F
....................     
....................    s5=read_eeprom(68);//bitis saati 2 
4408:  MOVFF  FF2,24F
440C:  BCF    FF2.7
440E:  MOVLW  44
4410:  MOVWF  FA9
4412:  BCF    FA6.6
4414:  BCF    FA6.7
4416:  BSF    FA6.0
4418:  MOVF   FA8,W
441A:  BTFSC  x4F.7
441C:  BSF    FF2.7
441E:  CLRF   x3F
4420:  MOVWF  x3E
....................    s5=s5*60; 
4422:  MOVFF  23F,252
4426:  MOVFF  23E,251
442A:  CLRF   x54
442C:  MOVLW  3C
442E:  MOVWF  x53
4430:  MOVLB  0
4432:  CALL   39B8
4436:  MOVFF  02,23F
443A:  MOVFF  01,23E
....................    s5=s5+read_eeprom(69); 
443E:  MOVFF  FF2,24F
4442:  BCF    FF2.7
4444:  MOVLW  45
4446:  MOVWF  FA9
4448:  BCF    FA6.6
444A:  BCF    FA6.7
444C:  BSF    FA6.0
444E:  MOVF   FA8,W
4450:  MOVLB  2
4452:  BTFSC  x4F.7
4454:  BSF    FF2.7
4456:  ADDWF  x3E,F
4458:  MOVLW  00
445A:  ADDWFC x3F,F
....................   } 
445C:  MOVLB  0
445E:  RETURN 0
.................... } 
....................  
.................... void eeprom() 
.................... { 
....................    eeprom_hazir=ext_eeprom_ready(); 
*
4B40:  CALL   0474
4B44:  MOVLB  2
4B46:  BCF    x40.0
4B48:  BTFSC  01.0
4B4A:  BSF    x40.0
....................    if(eeprom_hazir==0) 
4B4C:  BTFSC  x40.0
4B4E:  BRA    4B8A
....................    {   
....................       sayi=0; 
4B50:  CLRF   x34
4B52:  CLRF   x33
4B54:  CLRF   x32
4B56:  CLRF   x31
....................       disable_interrupts(int_timer0);  
4B58:  BCF    FF2.5
....................       output_low(pin_b0); 
4B5A:  BCF    F8A.0
....................       bit_set(eeprom_test,0); 
4B5C:  BSF    x41.0
....................       printf(lcd_putc,"\f"); 
4B5E:  MOVLW  0C
4B60:  MOVWF  x5A
4B62:  MOVLB  0
4B64:  RCALL  4488
....................       lcd_gotoxy(1,1);//LCD belirtilen satýr ve sütuna git komutu 
4B66:  MOVLW  01
4B68:  MOVLB  2
4B6A:  MOVWF  x5B
4B6C:  MOVWF  x5C
4B6E:  MOVLB  0
4B70:  RCALL  4460
....................       printf(lcd_putc,"KARTI TAKINIZ");  
4B72:  MOVLW  84
4B74:  MOVWF  FF6
4B76:  MOVLW  01
4B78:  MOVWF  FF7
4B7A:  BRA    4B1E
....................       delay_ms(5);                
4B7C:  MOVLW  05
4B7E:  MOVLB  2
4B80:  MOVWF  x5B
4B82:  MOVLB  0
4B84:  CALL   0192
4B88:  MOVLB  2
....................    } 
4B8A:  MOVLB  0
4B8C:  RETURN 0
.................... } 
....................  
....................  
.................... void pazartesi_test() 
.................... { 
....................    if(read_eeprom(80)<2) 
*
4A66:  MOVFF  FF2,24E
4A6A:  BCF    FF2.7
4A6C:  MOVLW  50
4A6E:  MOVWF  FA9
4A70:  BCF    FA6.6
4A72:  BCF    FA6.7
4A74:  BSF    FA6.0
4A76:  MOVF   FA8,W
4A78:  MOVLB  2
4A7A:  BTFSC  x4E.7
4A7C:  BSF    FF2.7
4A7E:  SUBLW  01
4A80:  BNC   4B1A
....................    {               
....................       degisken2++; 
4A82:  MOVLB  0
4A84:  INCF   xA1,F
....................       if(degisken2==1) 
4A86:  DECFSZ xA1,W
4A88:  BRA    4ACE
....................       { 
....................          disable_interrupts(GLOBAL); 
4A8A:  BCF    FF2.6
4A8C:  BCF    FF2.7
4A8E:  BTFSC  FF2.7
4A90:  BRA    4A8C
....................          degisken++; 
4A92:  MOVLB  2
4A94:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
4A96:  MOVLW  AB
4A98:  MOVWF  x4E
4A9A:  MOVFF  249,24F
4A9E:  MOVLB  0
4AA0:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
4AA2:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
4AA4:  MOVLW  C0
4AA6:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
4AA8:  MOVLW  AB
4AAA:  MOVLB  2
4AAC:  MOVWF  x4E
4AAE:  MOVLB  0
4AB0:  CALL   04BE
4AB4:  MOVF   01,W
4AB6:  SUBLW  1F
4AB8:  BC    4ACE
....................          { 
....................             key=3; 
4ABA:  MOVLW  03
4ABC:  MOVWF  xAA
....................             degisken=0; 
4ABE:  MOVLB  2
4AC0:  CLRF   x49
....................             sayi=0; 
4AC2:  CLRF   x34
4AC4:  CLRF   x33
4AC6:  CLRF   x32
4AC8:  CLRF   x31
....................             //disable_interrupts(int_timer0); 
....................             bit_set(eeprom_test,1);    
4ACA:  BSF    x41.1
4ACC:  MOVLB  0
....................          } 
....................       } 
....................                    
....................       if(degisken2==3) 
4ACE:  MOVF   xA1,W
4AD0:  SUBLW  03
4AD2:  BNZ   4B18
....................       {          
....................          degisken2=2; 
4AD4:  MOVLW  02
4AD6:  MOVWF  xA1
....................          write_eeprom(80,degisken2); 
4AD8:  MOVF   FF2,W
4ADA:  MOVWF  00
4ADC:  BCF    FF2.7
4ADE:  MOVLW  50
4AE0:  MOVWF  FA9
4AE2:  MOVFF  A1,FA8
4AE6:  BCF    FA6.6
4AE8:  BCF    FA6.7
4AEA:  BSF    FA6.2
4AEC:  MOVLB  F
4AEE:  MOVLW  55
4AF0:  MOVWF  FA7
4AF2:  MOVLW  AA
4AF4:  MOVWF  FA7
4AF6:  BSF    FA6.1
4AF8:  BTFSC  FA6.1
4AFA:  BRA    4AF8
4AFC:  BCF    FA6.2
4AFE:  MOVF   00,W
4B00:  IORWF  FF2,F
....................          delay_ms(10); 
4B02:  MOVLW  0A
4B04:  MOVLB  2
4B06:  MOVWF  x5B
4B08:  MOVLB  0
4B0A:  CALL   0192
....................          sifirla(1);            
4B0E:  MOVLW  01
4B10:  MOVLB  2
4B12:  MOVWF  x4E
4B14:  MOVLB  0
4B16:  RCALL  4894
4B18:  MOVLB  2
....................       }              
....................    } 
4B1A:  MOVLB  0
4B1C:  RETURN 0
.................... } 
....................  
.................... void sali_test() 
.................... { 
....................    if(read_eeprom(81)<2) 
*
4BA0:  MOVFF  FF2,24E
4BA4:  BCF    FF2.7
4BA6:  MOVLW  51
4BA8:  MOVWF  FA9
4BAA:  BCF    FA6.6
4BAC:  BCF    FA6.7
4BAE:  BSF    FA6.0
4BB0:  MOVF   FA8,W
4BB2:  MOVLB  2
4BB4:  BTFSC  x4E.7
4BB6:  BSF    FF2.7
4BB8:  SUBLW  01
4BBA:  BNC   4C4C
....................    { 
....................       degisken3++; 
4BBC:  MOVLB  0
4BBE:  INCF   xA2,F
....................       if(degisken3==1) 
4BC0:  DECFSZ xA2,W
4BC2:  BRA    4C00
....................       { 
....................          disable_interrupts(GLOBAL); 
4BC4:  BCF    FF2.6
4BC6:  BCF    FF2.7
4BC8:  BTFSC  FF2.7
4BCA:  BRA    4BC6
....................          degisken++; 
4BCC:  MOVLB  2
4BCE:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
4BD0:  MOVLW  AB
4BD2:  MOVWF  x4E
4BD4:  MOVFF  249,24F
4BD8:  MOVLB  0
4BDA:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
4BDC:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
4BDE:  MOVLW  C0
4BE0:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
4BE2:  MOVLW  AB
4BE4:  MOVLB  2
4BE6:  MOVWF  x4E
4BE8:  MOVLB  0
4BEA:  CALL   04BE
4BEE:  MOVF   01,W
4BF0:  SUBLW  1F
4BF2:  BC    4C00
....................          { 
....................             key=3; 
4BF4:  MOVLW  03
4BF6:  MOVWF  xAA
....................             degisken=0; 
4BF8:  MOVLB  2
4BFA:  CLRF   x49
....................             bit_set(eeprom_test,2);    
4BFC:  BSF    x41.2
4BFE:  MOVLB  0
....................          } 
....................       } 
....................                   
....................       if(degisken3==3) 
4C00:  MOVF   xA2,W
4C02:  SUBLW  03
4C04:  BNZ   4C4A
....................       { 
....................          degisken3=2; 
4C06:  MOVLW  02
4C08:  MOVWF  xA2
....................          write_eeprom(81,degisken3); 
4C0A:  MOVF   FF2,W
4C0C:  MOVWF  00
4C0E:  BCF    FF2.7
4C10:  MOVLW  51
4C12:  MOVWF  FA9
4C14:  MOVFF  A2,FA8
4C18:  BCF    FA6.6
4C1A:  BCF    FA6.7
4C1C:  BSF    FA6.2
4C1E:  MOVLB  F
4C20:  MOVLW  55
4C22:  MOVWF  FA7
4C24:  MOVLW  AA
4C26:  MOVWF  FA7
4C28:  BSF    FA6.1
4C2A:  BTFSC  FA6.1
4C2C:  BRA    4C2A
4C2E:  BCF    FA6.2
4C30:  MOVF   00,W
4C32:  IORWF  FF2,F
....................          delay_ms(10); 
4C34:  MOVLW  0A
4C36:  MOVLB  2
4C38:  MOVWF  x5B
4C3A:  MOVLB  0
4C3C:  CALL   0192
....................          sifirla(2);                 
4C40:  MOVLW  02
4C42:  MOVLB  2
4C44:  MOVWF  x4E
4C46:  MOVLB  0
4C48:  RCALL  4894
4C4A:  MOVLB  2
....................       } 
....................    } 
4C4C:  MOVLB  0
4C4E:  RETURN 0
.................... } 
....................  
.................... void carsamba_test() 
.................... { 
....................    if(read_eeprom(82)<2) 
*
4D18:  MOVFF  FF2,24E
4D1C:  BCF    FF2.7
4D1E:  MOVLW  52
4D20:  MOVWF  FA9
4D22:  BCF    FA6.6
4D24:  BCF    FA6.7
4D26:  BSF    FA6.0
4D28:  MOVF   FA8,W
4D2A:  MOVLB  2
4D2C:  BTFSC  x4E.7
4D2E:  BSF    FF2.7
4D30:  SUBLW  01
4D32:  BNC   4DC4
....................    {                 
....................       degisken4++; 
4D34:  MOVLB  0
4D36:  INCF   xA3,F
....................       if(degisken4==1) 
4D38:  DECFSZ xA3,W
4D3A:  BRA    4D78
....................       {  
....................          disable_interrupts(GLOBAL); 
4D3C:  BCF    FF2.6
4D3E:  BCF    FF2.7
4D40:  BTFSC  FF2.7
4D42:  BRA    4D3E
....................          degisken++; 
4D44:  MOVLB  2
4D46:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
4D48:  MOVLW  AB
4D4A:  MOVWF  x4E
4D4C:  MOVFF  249,24F
4D50:  MOVLB  0
4D52:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
4D54:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
4D56:  MOVLW  C0
4D58:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
4D5A:  MOVLW  AB
4D5C:  MOVLB  2
4D5E:  MOVWF  x4E
4D60:  MOVLB  0
4D62:  CALL   04BE
4D66:  MOVF   01,W
4D68:  SUBLW  1F
4D6A:  BC    4D78
....................          { 
....................             key=3; 
4D6C:  MOVLW  03
4D6E:  MOVWF  xAA
....................             degisken=0; 
4D70:  MOVLB  2
4D72:  CLRF   x49
....................             bit_set(eeprom_test,3);    
4D74:  BSF    x41.3
4D76:  MOVLB  0
....................          } 
....................       }           
....................       if(degisken4==3) 
4D78:  MOVF   xA3,W
4D7A:  SUBLW  03
4D7C:  BNZ   4DC2
....................       { 
....................          degisken4=2; 
4D7E:  MOVLW  02
4D80:  MOVWF  xA3
....................          write_eeprom(82,degisken4); 
4D82:  MOVF   FF2,W
4D84:  MOVWF  00
4D86:  BCF    FF2.7
4D88:  MOVLW  52
4D8A:  MOVWF  FA9
4D8C:  MOVFF  A3,FA8
4D90:  BCF    FA6.6
4D92:  BCF    FA6.7
4D94:  BSF    FA6.2
4D96:  MOVLB  F
4D98:  MOVLW  55
4D9A:  MOVWF  FA7
4D9C:  MOVLW  AA
4D9E:  MOVWF  FA7
4DA0:  BSF    FA6.1
4DA2:  BTFSC  FA6.1
4DA4:  BRA    4DA2
4DA6:  BCF    FA6.2
4DA8:  MOVF   00,W
4DAA:  IORWF  FF2,F
....................          delay_ms(10); 
4DAC:  MOVLW  0A
4DAE:  MOVLB  2
4DB0:  MOVWF  x5B
4DB2:  MOVLB  0
4DB4:  CALL   0192
....................          sifirla(3);  
4DB8:  MOVLW  03
4DBA:  MOVLB  2
4DBC:  MOVWF  x4E
4DBE:  MOVLB  0
4DC0:  RCALL  4894
4DC2:  MOVLB  2
....................       } 
....................    } 
4DC4:  MOVLB  0
4DC6:  RETURN 0
.................... } 
....................  
.................... void persembe_test() 
.................... { 
....................    if(read_eeprom(83)<2) 
4DC8:  MOVFF  FF2,24E
4DCC:  BCF    FF2.7
4DCE:  MOVLW  53
4DD0:  MOVWF  FA9
4DD2:  BCF    FA6.6
4DD4:  BCF    FA6.7
4DD6:  BSF    FA6.0
4DD8:  MOVF   FA8,W
4DDA:  MOVLB  2
4DDC:  BTFSC  x4E.7
4DDE:  BSF    FF2.7
4DE0:  SUBLW  01
4DE2:  BNC   4E74
....................    {  
....................       degisken5++; 
4DE4:  MOVLB  0
4DE6:  INCF   xA4,F
....................       if(degisken5==1) 
4DE8:  DECFSZ xA4,W
4DEA:  BRA    4E28
....................       {  
....................          disable_interrupts(GLOBAL); 
4DEC:  BCF    FF2.6
4DEE:  BCF    FF2.7
4DF0:  BTFSC  FF2.7
4DF2:  BRA    4DEE
....................          degisken++; 
4DF4:  MOVLB  2
4DF6:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
4DF8:  MOVLW  AB
4DFA:  MOVWF  x4E
4DFC:  MOVFF  249,24F
4E00:  MOVLB  0
4E02:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
4E04:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
4E06:  MOVLW  C0
4E08:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
4E0A:  MOVLW  AB
4E0C:  MOVLB  2
4E0E:  MOVWF  x4E
4E10:  MOVLB  0
4E12:  CALL   04BE
4E16:  MOVF   01,W
4E18:  SUBLW  1F
4E1A:  BC    4E28
....................          { 
....................             key=3; 
4E1C:  MOVLW  03
4E1E:  MOVWF  xAA
....................             degisken=0; 
4E20:  MOVLB  2
4E22:  CLRF   x49
....................             bit_set(eeprom_test,4);   
4E24:  BSF    x41.4
4E26:  MOVLB  0
....................          } 
....................       } 
....................                   
....................       if(degisken5==3) 
4E28:  MOVF   xA4,W
4E2A:  SUBLW  03
4E2C:  BNZ   4E72
....................       { 
....................          degisken5=2; 
4E2E:  MOVLW  02
4E30:  MOVWF  xA4
....................          write_eeprom(83,degisken5); 
4E32:  MOVF   FF2,W
4E34:  MOVWF  00
4E36:  BCF    FF2.7
4E38:  MOVLW  53
4E3A:  MOVWF  FA9
4E3C:  MOVFF  A4,FA8
4E40:  BCF    FA6.6
4E42:  BCF    FA6.7
4E44:  BSF    FA6.2
4E46:  MOVLB  F
4E48:  MOVLW  55
4E4A:  MOVWF  FA7
4E4C:  MOVLW  AA
4E4E:  MOVWF  FA7
4E50:  BSF    FA6.1
4E52:  BTFSC  FA6.1
4E54:  BRA    4E52
4E56:  BCF    FA6.2
4E58:  MOVF   00,W
4E5A:  IORWF  FF2,F
....................          delay_ms(10); 
4E5C:  MOVLW  0A
4E5E:  MOVLB  2
4E60:  MOVWF  x5B
4E62:  MOVLB  0
4E64:  CALL   0192
....................          sifirla(4);  
4E68:  MOVLW  04
4E6A:  MOVLB  2
4E6C:  MOVWF  x4E
4E6E:  MOVLB  0
4E70:  RCALL  4894
4E72:  MOVLB  2
....................       } 
....................    } 
4E74:  MOVLB  0
4E76:  RETURN 0
.................... } 
....................  
.................... void cuma_test() 
.................... { 
....................    if(read_eeprom(84)<2) 
4E78:  MOVFF  FF2,24E
4E7C:  BCF    FF2.7
4E7E:  MOVLW  54
4E80:  MOVWF  FA9
4E82:  BCF    FA6.6
4E84:  BCF    FA6.7
4E86:  BSF    FA6.0
4E88:  MOVF   FA8,W
4E8A:  MOVLB  2
4E8C:  BTFSC  x4E.7
4E8E:  BSF    FF2.7
4E90:  SUBLW  01
4E92:  BNC   4F24
....................    { 
....................       degisken6++; 
4E94:  MOVLB  0
4E96:  INCF   xA5,F
....................       if(degisken6==1) 
4E98:  DECFSZ xA5,W
4E9A:  BRA    4ED8
....................       {  
....................          disable_interrupts(GLOBAL); 
4E9C:  BCF    FF2.6
4E9E:  BCF    FF2.7
4EA0:  BTFSC  FF2.7
4EA2:  BRA    4E9E
....................          degisken++; 
4EA4:  MOVLB  2
4EA6:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
4EA8:  MOVLW  AB
4EAA:  MOVWF  x4E
4EAC:  MOVFF  249,24F
4EB0:  MOVLB  0
4EB2:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
4EB4:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
4EB6:  MOVLW  C0
4EB8:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
4EBA:  MOVLW  AB
4EBC:  MOVLB  2
4EBE:  MOVWF  x4E
4EC0:  MOVLB  0
4EC2:  CALL   04BE
4EC6:  MOVF   01,W
4EC8:  SUBLW  1F
4ECA:  BC    4ED8
....................          { 
....................             key=3; 
4ECC:  MOVLW  03
4ECE:  MOVWF  xAA
....................             degisken=0; 
4ED0:  MOVLB  2
4ED2:  CLRF   x49
....................             bit_set(eeprom_test,5);   
4ED4:  BSF    x41.5
4ED6:  MOVLB  0
....................          } 
....................       } 
....................       if(degisken6==3) 
4ED8:  MOVF   xA5,W
4EDA:  SUBLW  03
4EDC:  BNZ   4F22
....................       { 
....................          degisken6=2; 
4EDE:  MOVLW  02
4EE0:  MOVWF  xA5
....................          write_eeprom(84,degisken5); 
4EE2:  MOVF   FF2,W
4EE4:  MOVWF  00
4EE6:  BCF    FF2.7
4EE8:  MOVLW  54
4EEA:  MOVWF  FA9
4EEC:  MOVFF  A4,FA8
4EF0:  BCF    FA6.6
4EF2:  BCF    FA6.7
4EF4:  BSF    FA6.2
4EF6:  MOVLB  F
4EF8:  MOVLW  55
4EFA:  MOVWF  FA7
4EFC:  MOVLW  AA
4EFE:  MOVWF  FA7
4F00:  BSF    FA6.1
4F02:  BTFSC  FA6.1
4F04:  BRA    4F02
4F06:  BCF    FA6.2
4F08:  MOVF   00,W
4F0A:  IORWF  FF2,F
....................          delay_ms(10); 
4F0C:  MOVLW  0A
4F0E:  MOVLB  2
4F10:  MOVWF  x5B
4F12:  MOVLB  0
4F14:  CALL   0192
....................          sifirla(5);  
4F18:  MOVLW  05
4F1A:  MOVLB  2
4F1C:  MOVWF  x4E
4F1E:  MOVLB  0
4F20:  RCALL  4894
4F22:  MOVLB  2
....................       } 
....................    } 
4F24:  MOVLB  0
4F26:  RETURN 0
.................... } 
....................  
.................... void cumartesi_test() 
.................... { 
....................    if(read_eeprom(85)<2) 
4F28:  MOVFF  FF2,24E
4F2C:  BCF    FF2.7
4F2E:  MOVLW  55
4F30:  MOVWF  FA9
4F32:  BCF    FA6.6
4F34:  BCF    FA6.7
4F36:  BSF    FA6.0
4F38:  MOVF   FA8,W
4F3A:  MOVLB  2
4F3C:  BTFSC  x4E.7
4F3E:  BSF    FF2.7
4F40:  SUBLW  01
4F42:  BNC   4FD2
....................    {                
....................       degisken7++; 
4F44:  MOVLB  0
4F46:  INCF   xA6,F
....................       if(degisken7==1) 
4F48:  DECFSZ xA6,W
4F4A:  BRA    4F88
....................       {  
....................          disable_interrupts(GLOBAL); 
4F4C:  BCF    FF2.6
4F4E:  BCF    FF2.7
4F50:  BTFSC  FF2.7
4F52:  BRA    4F4E
....................          degisken++; 
4F54:  MOVLB  2
4F56:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
4F58:  MOVLW  AB
4F5A:  MOVWF  x4E
4F5C:  MOVFF  249,24F
4F60:  MOVLB  0
4F62:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
4F64:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
4F66:  MOVLW  C0
4F68:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
4F6A:  MOVLW  AB
4F6C:  MOVLB  2
4F6E:  MOVWF  x4E
4F70:  MOVLB  0
4F72:  CALL   04BE
4F76:  MOVF   01,W
4F78:  SUBLW  1F
4F7A:  BC    4F88
....................          { 
....................             key=3; 
4F7C:  MOVLW  03
4F7E:  MOVWF  xAA
....................             degisken=0; 
4F80:  MOVLB  2
4F82:  CLRF   x49
....................             bit_set(eeprom_test,6);  
4F84:  BSF    x41.6
4F86:  MOVLB  0
....................          } 
....................       } 
....................                   
....................       if(degisken7==3) 
4F88:  MOVF   xA6,W
4F8A:  SUBLW  03
4F8C:  BNZ   4FD0
....................       { 
....................          degisken7=2; 
4F8E:  MOVLW  02
4F90:  MOVWF  xA6
....................          write_eeprom(85,degisken7); 
4F92:  MOVF   FF2,W
4F94:  MOVWF  00
4F96:  BCF    FF2.7
4F98:  MOVLW  55
4F9A:  MOVWF  FA9
4F9C:  MOVFF  A6,FA8
4FA0:  BCF    FA6.6
4FA2:  BCF    FA6.7
4FA4:  BSF    FA6.2
4FA6:  MOVLB  F
4FA8:  MOVWF  FA7
4FAA:  MOVLW  AA
4FAC:  MOVWF  FA7
4FAE:  BSF    FA6.1
4FB0:  BTFSC  FA6.1
4FB2:  BRA    4FB0
4FB4:  BCF    FA6.2
4FB6:  MOVF   00,W
4FB8:  IORWF  FF2,F
....................          delay_ms(10); 
4FBA:  MOVLW  0A
4FBC:  MOVLB  2
4FBE:  MOVWF  x5B
4FC0:  MOVLB  0
4FC2:  CALL   0192
....................          sifirla(6);  
4FC6:  MOVLW  06
4FC8:  MOVLB  2
4FCA:  MOVWF  x4E
4FCC:  MOVLB  0
4FCE:  RCALL  4894
4FD0:  MOVLB  2
....................       } 
....................    } 
4FD2:  MOVLB  0
4FD4:  RETURN 0
.................... } 
....................  
.................... void pazar_test() 
.................... { 
....................    if(read_eeprom(86)<2) 
4FD6:  MOVFF  FF2,24E
4FDA:  BCF    FF2.7
4FDC:  MOVLW  56
4FDE:  MOVWF  FA9
4FE0:  BCF    FA6.6
4FE2:  BCF    FA6.7
4FE4:  BSF    FA6.0
4FE6:  MOVF   FA8,W
4FE8:  MOVLB  2
4FEA:  BTFSC  x4E.7
4FEC:  BSF    FF2.7
4FEE:  SUBLW  01
4FF0:  BNC   5082
....................    { 
....................       degisken8++; 
4FF2:  MOVLB  0
4FF4:  INCF   xA7,F
....................       if(degisken8==1) 
4FF6:  DECFSZ xA7,W
4FF8:  BRA    5036
....................       {  
....................          disable_interrupts(GLOBAL); 
4FFA:  BCF    FF2.6
4FFC:  BCF    FF2.7
4FFE:  BTFSC  FF2.7
5000:  BRA    4FFC
....................          degisken++; 
5002:  MOVLB  2
5004:  INCF   x49,F
....................          write_ext_eeprom(171,degisken); 
5006:  MOVLW  AB
5008:  MOVWF  x4E
500A:  MOVFF  249,24F
500E:  MOVLB  0
5010:  RCALL  4862
....................          clear_interrupt(INT_RDA); 
5012:  MOVF   FAE,W
....................          enable_interrupts(GLOBAL); 
5014:  MOVLW  C0
5016:  IORWF  FF2,F
....................          INTCON.T0IE==0; 
....................          if(read_ext_eeprom(171)>31) 
5018:  MOVLW  AB
501A:  MOVLB  2
501C:  MOVWF  x4E
501E:  MOVLB  0
5020:  CALL   04BE
5024:  MOVF   01,W
5026:  SUBLW  1F
5028:  BC    5036
....................          { 
....................             key=3; 
502A:  MOVLW  03
502C:  MOVWF  xAA
....................             degisken=0; 
502E:  MOVLB  2
5030:  CLRF   x49
....................             bit_set(eeprom_test,7);  
5032:  BSF    x41.7
5034:  MOVLB  0
....................          }  
....................       } 
....................                   
....................       if(degisken8==3) 
5036:  MOVF   xA7,W
5038:  SUBLW  03
503A:  BNZ   5080
....................       { 
....................          degisken8=2; 
503C:  MOVLW  02
503E:  MOVWF  xA7
....................          write_eeprom(86,degisken8); 
5040:  MOVF   FF2,W
5042:  MOVWF  00
5044:  BCF    FF2.7
5046:  MOVLW  56
5048:  MOVWF  FA9
504A:  MOVFF  A7,FA8
504E:  BCF    FA6.6
5050:  BCF    FA6.7
5052:  BSF    FA6.2
5054:  MOVLB  F
5056:  MOVLW  55
5058:  MOVWF  FA7
505A:  MOVLW  AA
505C:  MOVWF  FA7
505E:  BSF    FA6.1
5060:  BTFSC  FA6.1
5062:  BRA    5060
5064:  BCF    FA6.2
5066:  MOVF   00,W
5068:  IORWF  FF2,F
....................          delay_ms(10); 
506A:  MOVLW  0A
506C:  MOVLB  2
506E:  MOVWF  x5B
5070:  MOVLB  0
5072:  CALL   0192
....................          sifirla(7); 
5076:  MOVLW  07
5078:  MOVLB  2
507A:  MOVWF  x4E
507C:  MOVLB  0
507E:  RCALL  4894
5080:  MOVLB  2
....................       } 
....................    } 
5082:  MOVLB  0
5084:  RETURN 0
.................... } 
....................  
.................... void calistir(void) 
.................... { 
.................... //enable_interrupts(int_rda); 
....................    if(INTCON.T0IE==0) 
*
4B8E:  BTFSC  FF2.5
4B90:  BRA    4B9E
....................    { 
....................       set_timer0(settmr); 
4B92:  CLRF   FD7
4B94:  MOVLW  07
4B96:  MOVWF  FD6
....................       INTCON.T0IE=1; 
4B98:  BSF    FF2.5
....................       //enable_interrupts(INT_timer0); 
....................       enable_interrupts(GLOBAL); 
4B9A:  MOVLW  C0
4B9C:  IORWF  FF2,F
....................    } 
4B9E:  RETURN 0
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: C100   XT FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
